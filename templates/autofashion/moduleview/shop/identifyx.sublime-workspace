{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"rec",
				"record"
			],
			[
				"inp",
				"input_info"
			],
			[
				"con",
				"console	(widget.tpl)"
			],
			[
				"mu",
				"multiOffers"
			],
			[
				"em",
				"emptyText"
			],
			[
				"cre",
				"createdon"
			],
			[
				"icon-times-c",
				"icon-times-circle-o"
			],
			[
				"edit",
				"editable	(combo.js)"
			],
			[
				"use",
				"user_ids	(getlist.class.php)"
			],
			[
				"fp_",
				"fp_obj"
			],
			[
				"id",
				"id_arr"
			],
			[
				"fu",
				"function"
			],
			[
				"user_id",
				"user_ids	(getlist.class.php)"
			],
			[
				"arr",
				"array"
			],
			[
				"fo",
				"foreach	foreach …"
			],
			[
				"user_",
				"user_ids"
			],
			[
				"getli",
				"getlist"
			],
			[
				"idfxU",
				"idfxUserLikes"
			],
			[
				"get",
				"getCount"
			],
			[
				"tis",
				"this"
			],
			[
				"pa",
				"pagetitle"
			],
			[
				"full",
				"fullname"
			],
			[
				"fp",
				"fp_val"
			],
			[
				"calcu",
				"calculateVotes"
			],
			[
				"ip",
				"ip_obj"
			],
			[
				"add",
				"addFp"
			],
			[
				"to",
				"toArray"
			],
			[
				"ret",
				"return"
			],
			[
				"res",
				"res_id"
			],
			[
				"var",
				"var_dump"
			],
			[
				"al",
				"already_liked"
			],
			[
				"par",
				"params"
			],
			[
				"row",
				"rows"
			],
			[
				"sel",
				"selected"
			],
			[
				"unblo",
				"unblockUser"
			],
			[
				"blo",
				"blockUser"
			],
			[
				"idf",
				"idxfUserData"
			],
			[
				"R",
				"Resource"
			],
			[
				"inte",
				"internalKey"
			],
			[
				"user",
				"userData"
			],
			[
				"uni",
				"unique_2"
			],
			[
				"un",
				"unique_1"
			],
			[
				"_ge",
				"_getUserIds"
			],
			[
				"identifyx_ip",
				"identifyx_ip_addr_err	(default.inc.php)"
			],
			[
				"mod",
				"modResource"
			],
			[
				"def",
				"default"
			],
			[
				"idfx",
				"idfxData"
			],
			[
				"index",
				"indexgrp"
			],
			[
				"cl",
				"classKey"
			],
			[
				"new",
				"newObject	(modprocessor.class.php)"
			],
			[
				"pack",
				"packages"
			],
			[
				"fi",
				"fingerprint"
			],
			[
				"getO",
				"hw_GetObject"
			],
			[
				"Fp",
				"fprintf"
			],
			[
				"chi",
				"childrens"
			],
			[
				"max",
				"maxWidth"
			],
			[
				"chil",
				"children	(widget.tpl)"
			],
			[
				"he",
				"height	(style.css)"
			],
			[
				"info",
				"infoBlock	(style.css)"
			],
			[
				"remove",
				"removeClass"
			],
			[
				"print",
				"print_r"
			],
			[
				"pay",
				"payment"
			],
			[
				"if",
				"if	if"
			],
			[
				"curr",
				"currentOrder	(checkout.inc.php)"
			],
			[
				"cart",
				"cart_items"
			],
			[
				"butto",
				"button"
			],
			[
				"car",
				"cart_items"
			],
			[
				"ordrr",
				"orderCart"
			],
			[
				"cat",
				"catalog_config"
			],
			[
				"or",
				"orderdata"
			],
			[
				"main",
				"main_image"
			],
			[
				"el",
				"elseif	elseif"
			],
			[
				"d",
				"default	default"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "@import url('http://fonts.googleapis.com/css?family=Open+Sans%3A400%2C300&ver=4.1.2');\n@import url('../fonts/FFSignaPro-Black.css');\n@import url('../fonts/FFSignaPro-Book.css');\n@import url('font-awesome.min.css');\nbody,\np {\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    line-height: 20px;\n}\np {\n    margin: 0 0 20px;\n}\n.container {\n    padding: 0;\n}\nh1,\n.h1 {\n    color: #000;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 52px;\n    line-height: 68px;\n}\nh2,\n.h2 {\n    color: #000;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 36px;\n    line-height: 48px;\n}\nh3,\n.h3 {\n    color: #000;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 18px;\n    line-height: 28px;\n}\nh4,\n.h4 {\n    color: #000;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 28px;\n}\nh5,\n.h5 {\n    color: #d7d7d7;\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 28px;\n}\nh6,\n.h6 {\n    color: #d7d7d7;\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 12px;\n    line-height: 20px;\n}\nh3.anchorFix {\n    margin-top: -80px;\n    padding-top: 80px;\n}\nul {\n    list-style: none;\n}\n.btn {\n    border-radius: 0;\n}\na {\n    cursor: pointer;\n    -webkit-transition: all .2s ease-out;\n    -o-transition: all .2s ease-out;\n    transition: all .2s ease-out;\n}\na:hover,\na:focus {\n    text-decoration: none;\n}\ninput,\nselect {\n    padding: 4px 10px 7px;\n    border: 2px solid #ebebeb;\n    background: transparent;\n}\ninput.has-error {\n    border-color: #e91b25;\n}\naddress {\n    margin: 10px 0;\n}\n.formFieldError,\n.error {\n    color: #e91b25;\n    font-size: 12px;\n    line-height: 1.3;\n}\n.label {\n    display: block;\n    padding: 0;\n    text-align: left;\n    white-space: normal;\n    color: #000;\n    font-size: 14px;\n}\n.fa {\n    vertical-align: middle;\n}\n\n/**                       **/\n\n\n/* Absolute Center Spinner */\n\n\n/**                       **/\n\n.loading {\n    position: fixed;\n    z-index: 999;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: show;\n    width: 2em;\n    height: 2em;\n    margin: auto;\n}\n\n/* Transparent Overlay */\n\n.loading:before {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: block;\n    width: 100%;\n    height: 100%;\n    content: '';\n    background-color: rgba(0, 0, 0, .3);\n}\n\n/* :not(:required) hides these rules from IE9 and below */\n\n.loading:not(:required) {\n    color: transparent;\n    border: 0;\n    background-color: transparent;\n    text-shadow: none;\n    /* hide \"loading...\" text */\n    font: 0/0 a;\n}\n.loading:not(:required):after {\n    display: block;\n    width: 1em;\n    height: 1em;\n    margin-top: -.5em;\n    content: '';\n    -webkit-animation: spinner 1500ms infinite linear;\n    -moz-animation: spinner 1500ms infinite linear;\n    -ms-animation: spinner 1500ms infinite linear;\n    -o-animation: spinner 1500ms infinite linear;\n    animation: spinner 1500ms infinite linear;\n    border-radius: .5em;\n    -webkit-box-shadow: rgba(0, 0, 0, .75) 1.5em 0 0 0, rgba(0, 0, 0, .75) 1.1em 1.1em 0 0, rgba(0, 0, 0, .75) 0 1.5em 0 0, rgba(0, 0, 0, .75) -1.1em 1.1em 0 0, rgba(0, 0, 0, .5) -1.5em 0 0 0, rgba(0, 0, 0, .5) -1.1em -1.1em 0 0, rgba(0, 0, 0, .75) 0 -1.5em 0 0, rgba(0, 0, 0, .75) 1.1em -1.1em 0 0;\n    box-shadow: rgba(0, 0, 0, .75) 1.5em 0 0 0, rgba(0, 0, 0, .75) 1.1em 1.1em 0 0, rgba(0, 0, 0, .75) 0 1.5em 0 0, rgba(0, 0, 0, .75) -1.1em 1.1em 0 0, rgba(0, 0, 0, .75) -1.5em 0 0 0, rgba(0, 0, 0, .75) -1.1em -1.1em 0 0, rgba(0, 0, 0, .75) 0 -1.5em 0 0, rgba(0, 0, 0, .75) 1.1em -1.1em 0 0;\n    font-size: 10px;\n}\n.modal-footer {\n    position: relative;\n}\n.modal-footer .loading {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    margin-top: 50px;\n    margin-left: 50%;\n}\n.modal-footer .loading:before {\n    position: absolute;\n    top: -50px;\n    left: -50%;\n    border-bottom-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n}\n\n/* Animation */\n\n@-webkit-keyframes spinner {\n    0% {\n        -webkit-transform: rotate(0deg);\n        -moz-transform: rotate(0deg);\n        -ms-transform: rotate(0deg);\n        -o-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n        -moz-transform: rotate(360deg);\n        -ms-transform: rotate(360deg);\n        -o-transform: rotate(360deg);\n        transform: rotate(360deg);\n    }\n}\n@-moz-keyframes spinner {\n    0% {\n        -webkit-transform: rotate(0deg);\n        -moz-transform: rotate(0deg);\n        -ms-transform: rotate(0deg);\n        -o-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n        -moz-transform: rotate(360deg);\n        -ms-transform: rotate(360deg);\n        -o-transform: rotate(360deg);\n        transform: rotate(360deg);\n    }\n}\n@-o-keyframes spinner {\n    0% {\n        -webkit-transform: rotate(0deg);\n        -moz-transform: rotate(0deg);\n        -ms-transform: rotate(0deg);\n        -o-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n        -moz-transform: rotate(360deg);\n        -ms-transform: rotate(360deg);\n        -o-transform: rotate(360deg);\n        transform: rotate(360deg);\n    }\n}\n@keyframes spinner {\n    0% {\n        -webkit-transform: rotate(0deg);\n        -moz-transform: rotate(0deg);\n        -ms-transform: rotate(0deg);\n        -o-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n        -moz-transform: rotate(360deg);\n        -ms-transform: rotate(360deg);\n        -o-transform: rotate(360deg);\n        transform: rotate(360deg);\n    }\n}\n\n/* Breadcrumbs */\n\n.breadcrumb-wrap {\n    text-align: right;\n}\n.breadcrumb {\n    display: inline-block;\n    margin: 0;\n    padding: 17px 0 0 0;\n    background-color: transparent;\n}\n.breadcrumb > li + li:before {\n    padding: 0 5px;\n    content: '\\f105';\n    color: #ccc;\n    font-family: FontAwesome;\n}\n.breadcrumb > li {\n    margin: 0 3px;\n}\n.breadcrumb > li a {\n    text-decoration: none;\n    color: #888;\n}\n\n/* HEADER */\n\nheader.container {\n    height: 100px;\n}\n\n/* Top menu */\n\n.topMenuNav {\n    z-index: 100;\n    top: 0;\n    width: 100%;\n    height: 60px;\n    background-color: #000;\n    -webkit-box-shadow: 1px 0 1px 0;\n    box-shadow: 1px 0 1px 0;\n}\nul.topMenu {\n    float: left;\n    margin: 0;\n    padding: 0;\n}\n.topMenu > li {\n    position: relative;\n    display: inline-block;\n    margin-right: 21px;\n}\n.topMenuNav .topMenu > li a {\n    display: block;\n    padding: 19px 0;\n    color: #8f8f8f;\n}\n.topMenuNav .topMenu > li a:hover {\n    color: #cbcbcb;\n}\n.topMenuNav .topMenu > li > ul {\n    position: absolute;\n    top: 47px;\n    left: 0;\n    display: none;\n    width: initial;\n}\n.topMenuNav .topMenu > li:hover > ul {\n    display: block;\n}\n.topMenuNav .topMenu > li > ul li {\n    width: initial;\n}\n.topMenuNav .topMenu > li > ul li a {\n    height: initial;\n    margin: 0 10px;\n    padding: 5px 0;\n    white-space: nowrap;\n    line-height: 1.3;\n}\n\n/* Header Icons Block */\n\n.headerIconsBlock {\n    float: right;\n}\n.headerIconsBlock > div {\n    position: relative;\n    float: left;\n    margin-top: 14px;\n    margin-left: 26px;\n}\n.headerIconsBlock > div.userAuthBlock {\n    margin-left: 0;\n}\n\n/* Header UserAuth Block */\n\n.userAuthButton {\n    float: right;\n}\n.userAuthBlock .auth {\n    /* margin-right: 10px; */\n    float: right;\n    margin-top: -15px;\n    padding-top: 20px;\n    padding-bottom: 21px;\n    padding-left: 20px;\n    /* display: none; */\n    text-align: right;\n}\n.userAuthBlock:hover .auth,\n.dropblock:hover .dropdown {\n    display: block;\n}\n.userAuthBlock a {\n    margin-left: 8px;\n    color: #8f8f8f;\n}\n.userAuthBlock .auth a:hover {\n    color: #cbcbcb;\n}\n.userAuthBlock .authorized {\n    position: relative;\n    float: right;\n}\n.userAuthBlock .authorized .top {\n    position: relative;\n    margin-top: 5px;\n}\n.userAuthBlock .authorized .my,\n.userAuthBlock .authorized .user {\n    display: inline-flex;\n    margin-right: 10px;\n}\n.dropdown {\n    position: absolute;\n    z-index: 2;\n    top: 25px;\n    display: none;\n    width: 120px;\n    background: #e4e4e4;\n    box-shadow: 0 2px 5px #999;\n}\n.dropdown li {\n    border-top: 1px solid #ccc;\n}\n.dropdown li:hover {\n    border-color: #e91b25;\n    background: #e91b25;\n}\n.dropdown li a {\n    display: block;\n    height: 25px;\n    margin: 0 20px 0 10px;\n    padding: 0;\n    line-height: 25px;\n}\n.dropdown li:hover a {\n    color: #fff;\n}\n.dropblock {\n    height: 40px;\n}\n.userAuthBlock .authorized .messages {\n    position: absolute;\n    top: -6px;\n    right: -48px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    background-color: #e91b25;\n    font-size: 14px;\n}\n.userAuthBlock .authorized .messages a {\n    margin: 0;\n    padding: 0;\n    color: #fff;\n}\n.userAuthBlock .username {\n    color: #fff;\n}\n\n/* Authorization & register forms */\n\n.authorization.changePass {\n    margin: 0 auto;\n}\n.authorization {\n    width: 460px;\n    padding: 15px;\n}\n.authorization.register {\n    width: 630px;\n}\n.mainContent .authorization {\n    padding: 0 15px;\n}\n.authorization #fieldsBlock > div {\n    padding-right: 25px;\n    padding-left: 25px;\n}\n.userType {\n    display: none;\n}\n.companyFields {\n    display: none;\n}\n.authorization .forms {\n    text-align: center;\n}\n.authorization h1 {\n    margin: 0;\n    text-align: center;\n    font-size: 18px;\n}\n.mainContent .authorization h1 {\n    line-height: 2;\n}\n.authorization label {\n    display: none;\n}\n.authorization input[type='text'],\n.authorization input[type='password'] {\n    width: 100%;\n    margin-top: 10px;\n    padding: 3px 5px 6px 5px;\n}\n.buttons button[type='submit'],\n.buttons a.cornered {\n    position: relative;\n    width: 160px;\n    height: 32px;\n    margin: 10px 0;\n    color: #fff;\n    border: none;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #e91b25;\n}\n.buttons button[type='submit']:before,\n.buttons a.cornered:before {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 158px;\n    height: 30px;\n    content: '';\n    border: 2px solid;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.buttons a.cornered {\n    display: block;\n    margin: 10px auto;\n    padding-top: 5px;\n}\n.rem {\n    margin-top: 10px;\n}\n.rem label {\n    display: inline-block;\n    margin-bottom: 0;\n}\n.underLine {\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.underLine p {\n    margin-bottom: 10px;\n    text-align: left;\n}\n#colorbox {\n    border: 2px solid #888;\n}\n#colorbox #cboxClose {\n    top: 14px;\n    right: 14px;\n    width: auto;\n    height: auto;\n    text-indent: 0;\n    background: none;\n    font-size: 22px;\n}\n.captcha {\n    margin-top: 10px;\n    text-align: center;\n}\n.captcha input[type='text'] {\n    margin: 0;\n}\n\n/* Header Cart Block */\n\n.cartBlock {\n    position: relative;\n}\n.cartBlock .countBlock {\n    position: absolute;\n    top: -6px;\n    right: -10px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    color: #fff;\n    background-color: #e91b25;\n    font-size: 14px;\n}\n#popupCart {\n    position: absolute;\n    z-index: 30;\n    top: 60px;\n    width: 100%;\n}\n#popupCart .viewport {\n    position: relative;\n}\n#popupCart .emptyCart {\n    padding: 30px 0;\n}\n.cartFloatBlock {\n    position: absolute;\n    right: -76px;\n    min-width: 607px;\n    padding: 12px;\n    border: 3px solid #222;\n    background: white;\n}\n.cartFloatBlock select {\n    padding: 0;\n    border: none;\n    background: transparent;\n}\n.cartFloatBlock .delimiter {\n    height: 20px;\n}\n.cartFloatBlock .cartTop {\n    margin: 1px 9px 0 30px;\n}\n.cartFloatBlock .cartTop .totalItems {\n    display: inline-block;\n}\n.cartFloatBlock .cartTop .closeDlg {\n    float: right;\n}\n.cartFloatBlock .scrollBox {\n    overflow: auto;\n    max-height: 361px;\n}\n.cartFloatBlock .items {\n    width: 100%;\n}\n.cartFloatBlock .items .couponLine td {\n    padding-top: 10px;\n    padding-bottom: 10px;\n}\n.cartFloatBlock .items td {\n    padding-bottom: 1px;\n    vertical-align: middle;\n}\n.cartFloatBlock .items .image a {\n    display: block;\n    width: 78px;\n    height: 109px;\n    padding: 0 5px;\n    line-height: 107px;\n}\n.cartFloatBlock .items .image img {\n    padding: 5px;\n    border: 3px solid #ebebeb;\n}\n.cartFloatBlock .items .title {\n    padding: 0 25px;\n}\n.cartFloatBlock .items .title a {\n    text-decoration: none;\n    color: #111;\n    font-size: 14px;\n    font-weight: bold;\n}\n.cartFloatBlock .items .title a:hover {\n    color: #777;\n}\n.cartFloatBlock .items .title .barcode {\n    display: none;\n    margin-bottom: 2px;\n    color: #b6b6b6;\n}\n.cartFloatBlock .items .price {\n    width: 120px;\n    text-align: center;\n}\n.cartFloatBlock .items .price .cost {\n    white-space: nowrap;\n    color: #111;\n    font-weight: bold;\n}\n.cartFloatBlock .items .remove {\n    width: 12px;\n    padding-right: 6px;\n}\n.cartFloatBlock .multiOffers {\n    position: relative;\n    margin-top: 6px;\n    padding: 0;\n    border: none;\n}\n.cartFloatBlock .multiOffers .multiofferTitle {\n    display: inline-block;\n    margin: 0;\n    text-transform: none;\n    color: #555;\n    font-size: 14px;\n    font-weight: normal;\n}\n.cartFloatBlock .amount > * {\n    display: block;\n    float: left;\n}\n.cartFloatBlock .amount > span {\n    margin: 6px 1px 0 1px;\n}\n.cartFloatBlock div.amount {\n    position: absolute;\n    top: 20px;\n    right: 0;\n    width: 100px;\n    text-align: center;\n}\n.cartFloatBlock .items .title a.inc {\n    width: 24px;\n    margin: 0 auto;\n    cursor: pointer;\n    font-size: 32px;\n}\n.cartFloatBlock .items .title a.dec {\n    width: 24px;\n    margin: 0 auto;\n    cursor: pointer;\n    font-size: 32px;\n}\n.cartFloatBlock .cartHeader {\n    position: relative;\n    margin: 23px 15px 0 30px;\n    padding-top: 12px;\n    border-top: 3px solid #ebebeb;\n}\n.cartFloatBlock .totalRow {\n    position: absolute;\n    top: 6px;\n    right: 0;\n    font-size: 16px;\n    line-height: 2;\n}\n.cartFloatBlock .totalRow td {\n    border: none;\n}\n.cartFloatBlock .totalRow .price {\n    margin-left: 10px;\n    color: #e91b25;\n    font-weight: bold;\n}\n.cartFloatBlock .clearCart {\n    display: block;\n    text-decoration: none;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: #8b8b8b;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n}\n.cartFloatBlock .hasPromo {\n    display: block;\n    margin-top: 10px;\n    margin-left: 36px;\n    cursor: pointer;\n    text-decoration: none;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: #e91b25;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n}\n.cartFloatBlock .promo {\n    display: none;\n    margin: 10px 0 30px 36px;\n}\n.cartFloatBlock .onPromo .promo {\n    display: block;\n}\n.cartFloatBlock .actionLine {\n    margin-top: -18px;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    text-align: right;\n}\n.cartFloatBlock .actionLine a {\n    margin-left: 10px;\n}\n.cartFloatBlock .cartError {\n    margin: 12px 10px;\n    padding: 6px 12px;\n    border: 1px solid transparent;\n}\n.iconRemove {\n    color: #888;\n    font-size: 24px;\n}\n.iconRemove:hover {\n    background-position: 0 -34px;\n}\n\n/* Float offer choose */\n\n.complectsPopup .buttons a.cornered {\n    width: 150px;\n    font-size: 18px;\n    text-align: center;\n    line-height: 1.2;\n}\n.complectsPopup .buttons a.cornered:before {\n	width: 146px;\n}\n\n/* Header Wishlist Block */\n\n.countBlock.floatWishAmount {\n    position: absolute;\n    top: -6px;\n    right: -10px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n    color: #fff;\n    background-color: #e91b25;\n    font-size: 14px;\n}\n\n/* Searchline */\n\n.searchLine {\n    position: absolute;\n    z-index: 50;\n}\n.searchLine .find {\n    float: left;\n    margin-top: 35px;\n    margin-left: 10px;\n    color: #cbcbcb;\n    border: none;\n    background-color: transparent;\n    font-size: 24px;\n}\n.searchLine .queryWrap {\n    float: left;\n}\n.searchLine .queryWrap input {\n    width: 250px;\n    margin-top: 28px;\n    padding: 10px 0 10px 13px;\n    color: #888;\n    border: 1px solid #cbcbcb;\n    font-size: 16px;\n}\n.ui-autocomplete {\n    padding: 5px 0;\n    background-color: #fff;\n}\n.ui-autocomplete .ui-menu-item {\n    width: 300px;\n    padding: 4px 10px;\n    cursor: pointer;\n}\n.ui-autocomplete .ui-menu-item .image {\n    width: 62px;\n    text-align: center;\n}\n.ui-autocomplete .ui-menu-item .ui-corner-all {\n    margin-left: 10px;\n    border: 1px solid transparent;\n}\n.ui-autocomplete .ui-menu-item .image,\n.ui-autocomplete .ui-menu-item .ui-corner-all {\n    display: inline-table;\n    vertical-align: middle;\n}\n.ui-autocomplete .label {\n    color: #888;\n}\n.ui-autocomplete .barcode {\n    color: #cbcbcb;\n}\n.ui-autocomplete .price {\n    color: #000;\n}\n.ui-corner-all > span {\n    display: block;\n    padding: 2px;\n    font-size: 12px;\n    font-weight: normal;\n    line-height: 1.2;\n}\n.ui-autocomplete .ui-menu-item .ui-corner-all.ui-state-focus {\n    border: 1px solid #cbcbcb;\n}\n\n/* Logo Block */\n\n.logoBlock {\n    height: 90px;\n    margin-top: 10px;\n}\n.logo {\n    margin-left: 5px;\n}\n.slogan {\n    margin-top: 5px;\n    color: #4d4d4d;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n}\n\n/* Header Phone Block */\n\n.phoneBlock .phone {\n    display: block;\n    float: right;\n    width: 300px;\n    margin-top: 26px;\n    color: #969696;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 24px;\n}\n.phoneBlock .phoneIcon {\n    display: none;\n    float: left;\n}\n.phoneBlock .region {\n    float: right;\n    font-size: 12px;\n}\n.phoneBlock .number {\n    float: right;\n    margin-top: 2px;\n}\n\n/* Categories List */\n\n.categoriesList {\n    margin-top: 18px;\n    font-family: 'FFSignaPro-Black';\n}\n.categoriesList .category {\n    margin-right: 39px;\n    padding: 0;\n}\n.categoriesList .category > li {\n    position: relative;\n    display: inline-block;\n    height: 26px;\n    margin-right: 68px;\n}\n.categoriesList .category > li > a {\n    font-size: 18px;\n}\n.categoriesList .category > li > a:hover {\n    color: #337ab7;\n}\n.categoriesList .category > li > a:after {\n    position: absolute;\n    top: 1px;\n    right: -26px;\n    content: '\\f078';\n    font-family: 'FontAwesome';\n    font-size: 11px;\n}\n.categoriesList .category > li.dlya-zhenshchin > a {\n    color: #ec2028;\n}\n.categoriesList .category > li > ul {\n    position: absolute;\n    z-index: 60;\n    top: 26px;\n    left: 0;\n    display: none;\n    width: 170px;\n    padding: 9px 0 4px 11px;\n    background-color: #e4e4e4;\n}\n.categoriesList .category > li:hover > ul {\n    display: block;\n}\n.categoriesList .category > li > ul > li {\n    margin-bottom: 10px;\n}\n.categoriesList .category > li > ul > li:last-child {\n    margin-bottom: 0;\n}\n.categoriesList .category > li > ul > li a {\n    color: #000;\n    font-family: 'FFSignaPro-Book';\n}\n.categoriesList .category > li > ul > li a:hover {\n    color: #23527c;\n}\n\n/* Main */\n\n.container.main {\n    padding-bottom: 60px;\n}\n\n/* Slider */\n\n.sliders-wrap {\n    position: relative;\n    margin: 0;\n}\n.sliders-wrap-inner {\n    padding: 0;\n}\n.carousel-indicators {\n    right: 0;\n    bottom: 0;\n    left: initial;\n    padding-right: 14px;\n    text-align: right;\n}\n.carousel-indicators li {\n    width: 12px;\n    height: 12px;\n    margin-left: 4px;\n    border-radius: 50%;\n    background-color: #fff;\n}\n.carousel-indicators li.active {\n    width: 14px;\n    height: 14px;\n    margin-left: 3px;\n    border-color: #ec2028;\n    background-color: #ec2028;\n}\n\n/* Top products */\n\n.titleWrap {\n    margin-top: 23px;\n}\n.titleWrap:before {\n    position: absolute;\n    z-index: -1;\n    top: 50%;\n    left: 1.2%;\n    width: 97.6%;\n    height: 1px;\n    content: '';\n    background-color: #000;\n}\n.titleWrap h3 {\n    display: inline-block;\n    padding: 0 15px 5px;\n    background-color: #fff;\n}\n.productWrap {\n    margin-top: 10px;\n}\n.productItem {\n    height: 500px;\n    margin: 15px 0;\n}\n.productItemWrap {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n.productItem .wishWrap {\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    width: 100%;\n    -webkit-transition: opacity .4s ease-out;\n    -o-transition: opacity .4s ease-out;\n    transition: opacity .4s ease-out;\n    text-align: center;\n    opacity: 0;\n    background-color: rgba(192, 192, 192, .67);\n}\n.productItem:hover .wishWrap {\n    opacity: 1;\n}\n.wishBox {\n    width: 32px;\n    height: 32px;\n    margin: 0 auto;\n    cursor: pointer;\n    border-top-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n    background-color: #e91b25;\n}\n.wishBox:before {\n    position: absolute;\n    top: 1px;\n    left: 50%;\n    width: 30px;\n    height: 30px;\n    margin-left: -15px;\n    content: '';\n    border: 1px solid #fff;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.wishBox img {\n    width: 20px;\n    margin-top: 5px;\n}\n.productItem .wishDesc {\n    overflow: hidden;\n    height: 0;\n    -webkit-transition: all .4s ease-out;\n    -o-transition: all .4s ease-out;\n    transition: all .4s ease-out;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: #fff;\n    line-height: 1.5;\n}\n.productItem:hover .wishDesc {\n    height: 46px;\n}\n.productItem .toCartWrap {\n    position: absolute;\n    z-index: 1;\n    top: 184px;\n    left: 50%;\n    width: 150px;\n    margin-left: -75px;\n    -webkit-transition: opacity .4s ease-out;\n    -o-transition: opacity .4s ease-out;\n    transition: opacity .4s ease-out;\n    opacity: 0;\n}\n.productItem:hover .toCartWrap {\n    opacity: 1;\n}\n.productItem .mainLink {\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n    -webkit-transition: all .4s ease-out;\n    -ms-transition: all .4s ease-out;\n    -o-transition: all .4s ease-out;\n    transition: all .4s ease-out;\n    text-decoration: none;\n    background-color: #f0f0f0;\n}\n.productItem:hover .mainLink {\n    background-color: #c1c1c1;\n}\n.productItem .mainLink .pic {\n    padding-top: 30px;\n}\n.productItem .mainLink .pic img {\n    border: 8px solid #fff;\n}\n.productItem .mainLink .infoWrap {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 156px;\n}\n.productItem .mainLink .info {\n    position: relative;\n    height: 100%;\n    margin: 0 10px;\n}\n.productItem .mainLink .info:after {\n    position: absolute;\n    top: 16px;\n    width: 100%;\n    height: 130px;\n    content: '';\n    border: 6px solid #fff;\n}\n.productItem .mainLink .info .price {\n    position: absolute;\n    z-index: 1;\n    left: 50%;\n    width: 130px;\n    height: 32px;\n    margin-left: -65px;\n    text-align: center;\n    color: #fff;\n    border-top-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n    background-color: #006bb4;\n    font-size: 16px;\n    line-height: 2.1;\n}\n.productItem .mainLink .info .price:before {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 128px;\n    height: 30px;\n    content: '';\n    border: 2px solid #fff;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.productItem .mainLink .info .old-price {\n    height: 52px;\n    padding-top: 32px;\n    text-align: center;\n    text-decoration: line-through;\n    color: #bebebe;\n    font-size: 16px;\n}\n.productItem .mainLink:hover .info .old-price {\n    color: #555;\n}\n.productItem .mainLink .info .title {\n    margin: 1px 0 0 0;\n    padding: 0 6px;\n    text-align: center;\n    color: #000;\n}\n.productItem .mainLink .info .desc {\n    margin-top: 6px;\n    padding: 0 6px;\n    text-align: center;\n    color: #000;\n}\n\n/* Info Block 1 */\n\n.infoBlock1 {\n    background-color: #2c2f34;\n    /* Old browsers */\n    background-image: url('../img/bg_blackdot.png');\n    background-position: 5px -1px;\n}\n.infoBlock1 .container {\n    height: 300px;\n    padding: 60px 0;\n}\n\n/* Last News */\n\n.container.lastNews {\n    padding: 60px 0 48px;\n}\n.lastNews .newBlk {\n    position: relative;\n    height: 239px;\n    margin-bottom: 30px;\n}\n.lastNews .newWrap {\n    width: 100%;\n    height: 100%;\n    padding-bottom: 15px;\n    border: 6px solid #b2b2b2;\n    border-top-left-radius: 16px;\n    border-bottom-right-radius: 16px;\n    background-color: #ededed;\n}\n.dateBlock {\n    float: left;\n    width: 70px;\n    height: 70px;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #006bb5;\n}\n.dateBlock .date {\n    width: 66px;\n    height: 66px;\n    margin-top: 2px;\n    margin-left: 2px;\n    text-align: center;\n    color: #fff;\n    border: 3px solid #ededed;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.dateBlock .date .day {\n    margin: 5px 0 0 3px;\n    color: #fff;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.dateBlock .date .month {\n    margin: -16px 0 0 0;\n    font-size: 12px;\n}\n.lastNews .titleBlock {\n    float: left;\n    width: 36%;\n}\n.lastNews .small .titleBlock {\n    width: 75%;\n}\n.lastNews .titleBlock .title {\n    margin: 14px 0 0 25px;\n}\n.lastNews .titleBlock .title a {\n    text-decoration: none;\n    line-height: 1.2;\n}\n.lastNews .titleBlock .intro {\n    margin: 10px 0 0 25px;\n    font-size: 12px;\n    line-height: 1.5;\n}\n.lastNews .imageBlock {\n    position: absolute;\n    right: 20px;\n    overflow: hidden;\n    width: 52%;\n    height: 228px;\n    text-align: right;\n}\n.lastNews .imageBlock .imageWrap {\n    position: relative;\n}\n.lastNews .imageBlock img {\n    position: absolute;\n    top: 0;\n    right: 0;\n    border-bottom-right-radius: 10px;\n}\n.lastNews .more .titleWrap {\n    margin: 0;\n}\n.lastNews .more .titleWrap:before,\n.lastNews .more .titleWrap:after {\n    top: 16px;\n    width: 41%;\n}\n.lastNews .more .titleWrap .moreWrap {\n    position: relative;\n    width: 130px;\n    height: 32px;\n    margin: 0 auto;\n    padding-top: 6px;\n    border-top-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n    background-color: #e91b25;\n}\n.lastNews .more .titleWrap .moreWrap:before {\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    width: 122px;\n    height: 24px;\n    content: '';\n    border: 1px solid #fff;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.lastNews .more .titleWrap a {\n    position: absolute;\n    z-index: 1;\n    top: 6px;\n    margin-left: -44px;\n    text-decoration: none;\n    letter-spacing: .7px;\n    color: #fff;\n}\n\n/* About */\n\n.about {\n    position: relative;\n}\n.aboutHead {\n    height: 180px;\n    color: #fff;\n    background: url('../img/about_back.jpg');\n}\n.aboutHead .preview {\n    width: 370px;\n    margin: 0 auto;\n    padding: 17px 0 13px;\n    text-align: center;\n    border-bottom: 1px solid;\n}\n.aboutHead .title {\n    padding: 23px 0 4px;\n    text-align: center;\n    letter-spacing: 4.6px;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 39px;\n    line-height: 1;\n}\n.aboutHead .desc {\n    text-align: center;\n}\n.aboutBody {\n    padding: 27px 0;\n}\n\n/* Article page */\n\n.article {\n    position: relative;\n}\n.article img {\n    margin-top: -1px;\n}\n.title {\n    z-index: 12;\n    top: 0;\n    width: 100%;\n}\n.article .title .dateWrap {\n    position: relative;\n    width: 100%;\n    height: 0;\n}\n.title h1 {\n    margin-top: 40px;\n    font-size: 36px;\n    line-height: 1.2;\n}\n.title.onImage h1 {\n    margin-top: 60px;\n    color: #fff;\n}\n.article .content {\n    margin-top: 50px;\n    padding: 0 5px;\n}\n\n/* Category page */\n\n.mainTitle {\n    position: relative;\n}\n.productListTitle .mainTitle {\n    margin-top: -1px;\n    background: url('../img/title_jack.jpg') no-repeat scroll 50%;\n}\n.mainTitle h1 {\n    margin: 0;\n    padding-top: 5px;\n    letter-spacing: .2rem;\n    color: #fff;\n    font-size: 36px;\n}\n.subCategories {\n    text-align: center;\n}\n.subCategories li {\n    display: inline-block;\n    margin: 0 10px;\n}\n.productsBlock {\n    position: relative;\n}\n.productList .sortLine {\n    z-index: 20;\n    text-align: right;\n}\n.wishlist .sortLine {\n    margin-top: 15px;\n}\n.productList .sortLine .total {\n    float: left;\n    margin: 0;\n    line-height: 1.6;\n}\n.productList .pageSize {\n    margin-left: 35px;\n}\n.productList .pageSize .h4 {\n    letter-spacing: 0;\n}\n.productList .viewAs {\n    float: right;\n    height: 31px;\n    line-height: 31px;\n}\n.productList .viewAs a {\n    /* background: url(../img/viewas.png) no-repeat; */\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n}\n.productList .viewAs .table {\n    background-position: -34px 0;\n}\n.productList .viewAs .blocks {\n    margin-right: 10px;\n}\n.productList .viewAs .blocks:hover,\n.productList .viewAs .blocks.act {\n    background-position: -17px 0;\n}\n.productList .viewAs .table:hover,\n.productList .viewAs .table.act {\n    background-position: -51px 0;\n}\n.ddList {\n    position: relative;\n    display: inline-block;\n    height: 29px;\n}\n.ddList .value {\n    padding-left: 5px;\n    cursor: pointer;\n    /* background:url(../img/down.png) no-repeat right center; */\n    line-height: 10px;\n}\n.ddList ul {\n    position: absolute;\n    z-index: 2;\n    top: 90%;\n    right: 0;\n    display: none;\n    min-width: 100%;\n    background: #e4e4e4;\n    box-shadow: 0 2px 5px #999;\n}\n.ddList:hover ul {\n    display: block;\n}\n.ddList ul li {\n    border-top: 1px solid #ccc;\n}\n.ddList ul .first {\n    border-top: none;\n}\n.ddList ul li:hover {\n    border-color: #e91b25;\n    background: #e91b25;\n}\n.ddList ul li:hover a {\n    color: white;\n}\n.ddList ul a {\n    display: block;\n    height: 29px;\n    padding: 0 20px;\n    text-decoration: none;\n    color: #8f8f8f;\n    line-height: 29px;\n}\n.ddList .h4,\n.sortLine .h4 {\n    letter-spacing: 1.8px;\n    text-transform: uppercase;\n    font-size: 14px;\n}\n.filterSection {\n    padding: 5px 16px 0 22px;\n    border: 6px solid #ededed;\n    border-top-left-radius: 15px;\n    border-bottom-right-radius: 15px;\n}\n.filters h4 {\n    margin-bottom: 5px;\n    padding-bottom: 5px;\n    text-align: center;\n    text-transform: uppercase;\n}\n.filters .filter {\n    margin-bottom: 30px;\n}\n.filters .filter.bool {\n    text-align: center;\n}\n.filters .buttons {\n    margin-bottom: 20px;\n    text-align: center;\n}\n.filters .submitFilter {\n    margin-bottom: 20px;\n}\n.filter .fullwidth {\n    width: 100%;\n}\n.filter .fullwidth td {\n    vertical-align: middle;\n}\n.filter .fullwidth input {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    width: 97%;\n    height: 30px;\n    border: 1px solid #ececec;\n}\n.filter .fullwidth .padd4 {\n    padding: 0 4px;\n}\n.filter .fullwidth .p50 {\n    padding-bottom: 3px;\n}\n.filter.typeMultiselect ul {\n    overflow: auto;\n    max-height: 205px;\n}\n.no-touch .filter input[type=checkbox] {\n    position: absolute;\n    left: -9999px;\n}\n.filter.typeMultiselect li {\n    float: left;\n    width: 20%;\n    cursor: pointer;\n    text-align: center;\n    font-weight: bold;\n}\n.filter.typeMultiselect label {\n    position: relative;\n}\n\n/* .no-touch .filter input[type=checkbox] + label:before {\n    content: \"\";\n    position: absolute;\n    width: 19px;\n    height: 19px;\n    background: #777;\n    top: 0;\n    left: 0;\n} */\n\n.no-touch .filter input[type=checkbox]:checked + label:before {\n    background: #000;\n}\n.multiselectItem {\n    float: left;\n    width: 100%;\n    text-align: center;\n    font-weight: bold;\n}\n.cvet .multiselectItem,\n.razmer .multiselectItem {\n    width: 20%;\n}\n.specifikacii .multiselectItem {\n    width: 50%;\n}\n.specifikacii .siluet .multiselectItem,\n.specifikacii .poyas .multiselectItem {\n    width: 100%;\n}\n.multiselectItemInner {\n    margin: 2px;\n    padding: 5px 0;\n    cursor: pointer;\n    border: 1px solid #cacaca;\n}\n.multiselectItem .multiselectItemInner {\n    border: 2px solid #ebebeb;\n}\n.cvet .multiselectItem .multiselectItemInner {\n    border: 4px solid #ebebeb;\n}\n.multiselectItem.active .multiselectItemInner {\n    border: 2px solid #3769ba;\n}\n.cvet .multiselectItem.active .multiselectItemInner {\n    border: 2px solid #3769ba;\n    box-shadow: inset 0 0 0 2px #ebebeb;\n}\n.jslider {\n    margin-top: 35px;\n    padding-bottom: 20px;\n}\n.jslider .jslider-bg i,\n.jslider .jslider-pointer {\n    background: url(../img/jslider.plastic.png) no-repeat 0 0;\n}\n.jslider {\n    position: relative;\n    top: .6em;\n    display: block;\n    width: 90%;\n    height: 1em;\n    margin-right: 5%;\n    margin-left: 5%;\n    font-family: Arial, sans-serif;\n}\n.jslider table {\n    width: 100%;\n    border: 0;\n    border-collapse: collapse;\n}\n.jslider td,\n.jslider th {\n    padding: 0;\n    text-align: left;\n    vertical-align: top;\n    border: 0;\n}\n.jslider table,\n.jslider table tr,\n.jslider table tr td {\n    width: 100%;\n    vertical-align: top;\n}\n.jslider .jslider-bg {\n    position: relative;\n}\n.jslider .jslider-bg i {\n    position: absolute;\n    top: 0;\n    height: 5px;\n    font-size: 0;\n}\n.jslider .jslider-bg .l {\n    left: 0;\n    width: 10%;\n    background-position: 0 0;\n}\n.jslider .jslider-bg .f {\n    left: 10%;\n    width: 80%;\n    background-repeat: repeat-x;\n    background-position: 0 -20px;\n}\n.jslider .jslider-bg .r {\n    left: 90%;\n    width: 10%;\n    background-position: right 0;\n}\n.jslider .jslider-bg .v {\n    position: absolute;\n    top: 0;\n    left: 20%;\n    width: 60%;\n    height: 5px;\n    background-repeat: repeat-x;\n    background-position: 0 -40px;\n}\n.jslider .jslider-pointer {\n    position: absolute;\n    top: -6px;\n    left: 20%;\n    width: 3px;\n    height: 9px;\n    margin-left: -2px;\n    cursor: pointer;\n    background-position: -6px -56px;\n}\n.jslider .jslider-pointer-hover {\n    background-position: -6px -56px;\n}\n.jslider .jslider-pointer-to {\n    left: 80%;\n}\n.jslider .jslider-label {\n    position: absolute;\n    top: -23px;\n    left: 0;\n    padding: 0 2px;\n    white-space: nowrap;\n    opacity: .4;\n    color: black;\n    font-size: 12px;\n    line-height: 12px;\n}\n.jslider .jslider-label-to {\n    right: 0;\n    left: auto;\n}\n.jslider .jslider-value {\n    position: absolute;\n    top: -24px;\n    left: 20%;\n    padding: 1px 2px 0;\n    white-space: nowrap;\n    -webkit-border-radius: 2px;\n    -moz-border-radius: 2px;\n    border-radius: 2px;\n    background: white;\n    font-size: 12px;\n    line-height: 12px;\n    -o-border-radius: 2px;\n}\n.jslider .jslider-value-to {\n    left: 80%;\n}\n.jslider .jslider-label small,\n.jslider .jslider-value small {\n    position: relative;\n    top: -.4em;\n}\n.jslider .jslider-scale {\n    position: relative;\n    top: 12px;\n}\n.jslider .jslider-scale span {\n    position: absolute;\n    height: 5px;\n    border-left: 1px solid #999;\n    font-size: 0;\n}\n.jslider .jslider-scale ins {\n    position: absolute;\n    top: 5px;\n    left: 0;\n    text-decoration: none;\n    color: #999;\n    font-size: 12px;\n}\n.jslider-single .jslider-pointer-to,\n.jslider-single .jslider-value-to,\n.jslider-single .jslider-bg .v,\n.jslider-limitless .jslider-label {\n    display: none;\n}\n\n/* Product page */\n\n.row.title h2 {\n    margin: 11px 0 28px;\n    line-height: 1.2;\n}\n.priceBlock {\n    margin-top: -6px;\n    margin-bottom: 16px;\n}\n.priceBlock .price {\n    text-align: center;\n    color: #e91b25;\n    font-size: 56px;\n    line-height: .8;\n}\n.priceBlock .lineTroughtPrice {\n    margin-top: 16px;\n    text-align: center;\n    text-decoration: line-through;\n    color: #cbcbcb;\n    font-size: 24px;\n}\n.withoutDelivery {\n    margin-top: 10px;\n    text-align: center;\n    text-decoration: underline;\n    color: #969696;\n}\n.amount {\n    margin-bottom: 20px;\n    text-align: center;\n    font-size: 18px;\n}\n.fieldAmount {\n    width: 70px;\n    padding: 2px 6px 3px 10px;\n    border-radius: 2px;\n}\n.multiOffers {\n    padding: 5px 74px 52px 66px;\n    border: 6px solid #ededed;\n    border-top-left-radius: 15px;\n    border-bottom-right-radius: 15px;\n}\n.sku {\n    margin-top: 13px;\n    font-weight: bold;\n}\n.multiOffers [name^='multioffers['] {\n    display: none;\n}\n.multiofferTitle {\n    margin-top: 24px;\n    text-align: center;\n    letter-spacing: 2.5px;\n    text-transform: uppercase;\n    font-size: 14px;\n    font-weight: bold;\n}\n.multiofferBlock {\n    margin-top: 8px;\n}\n.multiofferBlock .moItem {\n    float: left;\n    width: 20%;\n    cursor: pointer;\n    text-align: center;\n    font-weight: bold;\n}\n.multiofferBlock1 .moItem {\n    width: 40px;\n    height: 40px;\n    margin: 2px;\n    border: 1px solid #b3b3b3;\n}\n.multiofferBlock1 .moItemInner {\n    width: 38px;\n    height: 38px;\n    text-indent: -9999px;\n    border: 3px solid #f5f5f5;\n}\n.multiofferBlock1 .moItem.active {\n    border: 2px solid #3769ba;\n}\n.multiofferBlock1 .active .moItemInner {\n    width: 36px;\n    height: 36px;\n    border: 2px solid #f5f5f5;\n}\n.multiofferBlock2 .moItemInner {\n    margin: 2px;\n    padding: 5px 0;\n    border: 1px solid #cacaca;\n}\n.multiofferBlock2 .active .moItemInner {\n    padding: 4px 0;\n    border: 2px solid #3769ba;\n}\n.multiofferBlock3 .moItem {\n    width: 50%;\n    height: 52px;\n}\n.multiofferBlock3 .moItemInner {\n    height: 48px;\n    margin: 2px;\n    padding: 3px 0;\n    border: 1px solid #b3b3b3;\n}\n.multiofferBlock3 .active .moItemInner {\n    padding: 2px 0;\n    border: 2px solid #3769ba;\n}\n.button.showMultiOffers {\n    position: absolute;\n    bottom: -12px;\n    left: 50%;\n    width: 150px;\n    height: 32px;\n    margin-left: -75px;\n    padding-top: 5px;\n    cursor: pointer;\n    text-align: center;\n    color: #fff;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #e91b25;\n    font-size: 16px;\n}\n.button.showMultiOffers:before {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 148px;\n    height: 30px;\n    content: '';\n    border: 2px solid;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.addToCartWrap,\n.buyOneClickWrap {\n    padding: 4px;\n    text-align: center;\n    border-top-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    background-color: #216cb0;\n}\n.button.addToCart img {\n    margin-top: -6px;\n}\n.buyOneClickWrap {\n    margin-top: 10px;\n    background-color: #91b5d7;\n}\n.button.addToCart,\n.button.buyOneClick {\n    display: block;\n    padding: 9px 0;\n    cursor: pointer;\n    color: #fff;\n    border: 2px solid #fff;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n    font-size: 26px;\n    line-height: 26px;\n}\n.toCartText {\n    display: inline-block;\n}\n.product .wishWrap {\n    position: relative;\n    margin-top: 15px;\n}\n.product .wishBox {\n    float: left;\n    width: 44px;\n    height: 44px;\n    margin: 0;\n}\n.product .wishBox:before {\n    left: 1px;\n    width: 42px;\n    height: 42px;\n    margin: 0;\n    padding: 0;\n    border: 2px solid #fff;\n    border-top-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n}\n.product .wishBox img {\n    width: 32px;\n    margin-top: 6px;\n    margin-left: 6px;\n}\n.product .wishDesc {\n    float: left;\n    margin-top: 10px;\n    margin-left: 10px;\n    white-space: normal;\n    text-transform: uppercase;\n    color: #808080;\n    font-size: 14px;\n    font-weight: bold;\n    line-height: 1.5;\n}\n.compare {\n    display: none;\n}\n.productImages {\n    position: relative;\n}\n.specCategoriesBlockWrap {\n    position: absolute;\n    z-index: 19;\n    top: 6px;\n    left: 6px;\n}\n.specCategory {\n    margin-bottom: 4px;\n}\n.productImagesWrap {\n    position: relative;\n    float: left;\n    border: 6px solid #ededed;\n}\n.productImages .control {\n    position: absolute;\n    z-index: 19;\n    top: 50%;\n    color: #91b5d7;\n    font-size: 20px;\n}\n.productImages .control.next {\n    right: 0;\n}\n.productImages .main .item {\n    display: block;\n    text-align: center;\n}\n.productImages .main .winImage {\n    width: 100%;\n    padding: 20px;\n}\n.productImages .main .hidden {\n    display: none;\n}\n.gallery {\n    position: relative;\n    padding: 15px 0;\n}\n.gallery .prev3.disabled:hover,\n.gallery .control {\n    position: absolute;\n    left: 50%;\n    margin-left: -6px;\n}\n.gallery .prev3 {\n    top: -3px;\n}\n.gallery .next3 {\n    bottom: -3px;\n}\n.gallery .disabled {\n    opacity: .3;\n}\n\n/* .gallery .next3.disabled:hover,\n.gallery .next3 {\n	bottom: -10px;\n	background-position: -32px 4px;\n}\n.gallery .prev3:hover {\n	background-position: 0 -35px;\n}\n.gallery .next3:hover {\n	background-position: -32px -35px;\n} */\n\n.gallery .wrap {\n    position: relative;\n    overflow: hidden;\n    text-align: center;\n}\n.gallery ul {\n    position: relative;\n    display: inline-block;\n}\n.gallery ul li {\n    margin: 10px 0;\n    padding: 5px;\n    border: 1px solid #ebebeb;\n}\n.gallery ul li.active {\n    padding: 4px;\n    border: 2px solid #e91b25;\n}\n.gallery ul li a {\n    display: block;\n    width: 50px;\n    height: 75px;\n    text-align: center;\n    opacity: .9;\n    line-height: 70px;\n}\n.gallery ul li a:hover {\n    opacity: 1;\n}\n.productNavTabs {\n    margin-top: 30px;\n    border-bottom: 2px solid #969696;\n}\n.productNavTabs > li {\n    width: 200px;\n    margin-right: -2px;\n    margin-bottom: -2px;\n    text-align: center;\n    border: 2px solid #969696;\n    border-top-left-radius: 7px;\n    border-top-right-radius: 7px;\n}\n.productNavTabs > li > a {\n    width: 100%;\n    padding: 10px 0 5px;\n    color: #fff;\n    border: 2px solid #fff;\n    border-radius: 5px 5px 0 0;\n    background-color: #969696;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 18px;\n}\n.productNavTabs > li > a:hover {\n    color: #969696;\n    border-color: #fff;\n    background-color: #fff;\n}\n.productNavTabs > li.active > a,\n.productNavTabs > li.active > a:hover,\n.productNavTabs > li.active > a:focus {\n    border: 2px solid #fff;\n}\n.specificationBlock {\n    margin-top: 20px;\n    -moz-column-count: 3;\n    -moz-column-gap: 15px;\n    -webkit-column-count: 3;\n    -webkit-column-gap: 15px;\n    column-count: 3;\n    column-gap: 15px;\n}\n.productSpecification {\n    display: inline-block;\n    width: 100%;\n    padding: 0 15px;\n}\n.productSpecification .label {\n    position: relative;\n    float: left;\n    width: 50%;\n    margin-top: 2px;\n    padding-right: 10px;\n}\n.productSpecification .value {\n    float: left;\n    width: 50%;\n}\n.materialsBlock {\n    margin-top: 20px;\n}\n.materialItem {\n    min-height: 32px;\n    margin-bottom: 10px;\n}\n.materialItem .title {\n    margin-bottom: 20px;\n    cursor: pointer;\n    line-height: 1.2;\n}\n.materialItem .title .icon {\n    float: left;\n    width: 18%;\n}\n.materialItem .title .text {\n    float: left;\n    width: 82%;\n}\n.materialItem .description,\n.optionItem .description {\n    display: none;\n}\n.product .description {\n    min-height: 250px;\n}\n.description p {\n    padding: 0 40px;\n}\n.productDescription {\n    margin-top: 20px;\n    margin-bottom: 40px;\n}\n.optionsList {\n    margin-top: 20px;\n}\n.optionItem {\n    margin-top: 5px;\n    cursor: pointer;\n    text-indent: 4px;\n}\n.optionItem .fa {\n    color: #888;\n}\n.recommendedWrap {\n    margin-top: 10px;\n}\n\n/* .recommendedWrap .titleWrap:before {\n	width: 100%;\n} */\n\n\n/* Comments */\n\n.commentsWrap .titleWrap {\n    margin-top: 37px;\n}\n\n/* .commentsWrap .titleWrap:before {\n	width: 100%;\n} */\n\n.commentFormBlock {\n    margin-bottom: 35px;\n}\n.commentFormBlock .button.handler {\n    position: relative;\n    display: block;\n    width: 150px;\n    height: 32px;\n    margin: 17px auto 0;\n    padding-top: 5px;\n    text-align: center;\n    text-decoration: none;\n    color: #fff;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #e91b25;\n    font-size: 16px;\n}\n.commentFormBlock .button.handler:before {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 148px;\n    height: 30px;\n    content: '';\n    border: 2px solid #fff;\n    border-top-left-radius: 8px;\n    border-bottom-right-radius: 8px;\n}\n.commentBlock .commentList .info {\n    overflow: hidden;\n    /* background:url(../img/dot.png) repeat-x bottom left; */\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.commentBlock .noComments {\n    padding-top: 20px;\n    /* background:url(../img/dot.png) repeat-x top left; */\n    text-align: center;\n}\n.commentBlock .commentList .info .date {\n    float: left;\n    padding-bottom: 2px;\n    padding-left: 40px;\n    color: #777;\n    background: white;\n}\n.commentBlock .commentList .info .name {\n    float: left;\n    padding-right: 5px;\n    padding-bottom: 2px;\n    background: white;\n    font-weight: bold;\n}\n.commentBlock .commentList .info .starsSection {\n    float: right;\n    background: white;\n}\n.commentFormBlock .errors {\n    margin: 10px 0;\n    color: #f06060;\n}\n.stars {\n    display: inline-block;\n    width: 96px;\n    height: 15px;\n}\n.stars i {\n    display: inline-block;\n    height: 15px;\n}\n.commentBlock .commentList .comment {\n    margin: 8px 0 -5px;\n}\n.commentFormBlock form {\n    padding-left: 3px;\n}\n.commentFormBlock .name {\n    margin: 20px 0 10px;\n    white-space: nowrap;\n}\n.commentFormBlock .name input {\n    margin-left: 7px;\n    padding: 3px 10px;\n}\n.commentFormBlock .message {\n    margin-bottom: -5px;\n}\n.commentFormBlock.open .handler {\n    display: none;\n}\n.commentFormBlock .formStyle textarea {\n    width: 100%;\n    height: 74px;\n    resize: vertical;\n    border: 2px solid #e7e7e7;\n}\n.commentFormBlock .already {\n    margin-top: 5px;\n}\n.commentFormBlock .rating {\n    overflow: hidden;\n    margin: 25px 0 10px;\n    text-align: right;\n}\n.commentFormBlock .rating .desc {\n    text-transform: none;\n    color: #777;\n    font-family: Verdana;\n    font-size: 11px;\n}\n.commentFormBlock .rating .starsBlock {\n    display: inline-block;\n    margin-left: 16px;\n    vertical-align: middle;\n}\n.commentFormBlock .rating .starsBlock i {\n    display: block;\n    float: left;\n    width: 16px;\n    height: 16px;\n    /* background:url(../img/votestars.png) no-repeat; */\n    padding-right: 5px;\n}\n.commentFormBlock .captcha {\n    margin: 0;\n    text-align: left;\n    white-space: nowrap;\n}\n.commentFormBlock .captcha img {\n    display: inline-block;\n    margin-top: 10px;\n    margin-right: -15px;\n}\n.commentFormBlock .captcha input[type='text'] {\n    display: inline-block;\n    width: 60px;\n    margin: 10px 0 0;\n}\n.starsBlock i.act:before {\n    content: '\\f005';\n    color: #df0000;\n}\n.iconX {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    background: url(../img/close.png) no-repeat;\n}\n.iconX:hover {\n    width: 16px;\n    height: 16px;\n    background: url(../img/close.png) no-repeat -17px 0;\n}\n.commentFormBlock .buttons button[type='submit'] {\n    background-color: #808080;\n}\n.commentList .rate {\n    margin-top: 30px;\n    padding: 0 0 0 15px;\n}\n.starsSection {\n    white-space: nowrap;\n}\n.starsSection i.act:before {\n    content: '\\f005';\n    color: #df0000;\n}\n.commentList .comment p {\n    margin-bottom: 17px;\n    padding-bottom: 27px;\n    border-bottom: 1px solid;\n}\n\n/* Paginator */\n\n.paginator {\n    margin-top: 3px;\n    font-size: 18px;\n}\n.paginator a {\n    display: inline-block;\n    width: 32px;\n    height: 32px;\n    padding-top: 5px;\n    color: #000;\n}\n.paginator a:hover {\n    text-decoration: none;\n}\n.paginator a.act {\n    position: relative;\n    color: #fff;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #df0000;\n}\n.paginator a.act:before {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 30px;\n    height: 30px;\n    content: '';\n    color: #fff;\n    border: 2px solid;\n    border-top-left-radius: 7px;\n    border-bottom-right-radius: 7px;\n}\n.paginator i {\n    font-size: 22px;\n}\n\n/* Profile */\n\n.profile h1 {\n    margin: 0;\n    letter-spacing: 1.7px;\n    font-size: 36px;\n}\n.profileMenu {\n    display: inline-block;\n    margin-top: 10px;\n    padding-bottom: 21px;\n    border-bottom: 1px solid #000;\n}\n.profileMenu li {\n    display: inline-block;\n    margin: 0 15px;\n}\n.profileMenu li:first-child {\n    margin-left: 0;\n}\n.profileMenu li:last-child {\n    margin-right: 0;\n}\n\n/* .profileMenu li.exitButton {\n	float: right;\n	margin-right: 0;\n} */\n\n.profileMenu li a {\n    padding: 15px 0 16px;\n    letter-spacing: 3px;\n    text-transform: uppercase;\n    color: #8b8b8b;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: bold;\n}\n.profileMenu li.act a {\n    color: #000;\n    border-bottom: 3px solid #000;\n}\nli.exitButton a {\n    color: #ec2028;\n}\n.profile input[type='text'],\n.profile input[type='password'],\n.profile textarea {\n    width: 100%;\n    max-width: 370px;\n    margin-top: 10px;\n    padding: 3px 5px 6px 5px;\n}\n.profile label {\n    display: none;\n}\n.profile .formLine {\n    text-align: center;\n}\nlabel[for='changePass'] {\n    display: inline-block;\n    margin-left: 5px;\n}\n.changePassWrap {\n    padding-top: 12px;\n}\n.profile .formFieldError {\n    display: block;\n    margin-top: 2px;\n}\n.profile .buttons {\n    text-align: center;\n}\n.orderTable {\n    width: 100%;\n    margin-top: 30px;\n    border-bottom: 1px solid #000;\n}\n.orderTable tr {\n    border-top: 1px solid #000;\n}\n.orderTable td {\n    height: 80px;\n    padding: 10px 0;\n    vertical-align: middle;\n}\n.orderTable td.number {\n    width: 10%;\n}\n.orderTable td.date {\n    width: 10%;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderTable td.date .date {\n    margin-bottom: -4px;\n}\n.orderTable td.items {\n    width: 40%;\n}\n.orderTable .atAll {\n    display: block;\n    margin-bottom: -4px;\n    margin-left: 20px;\n    text-decoration: underline;\n    color: #000;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderTable .atAll.collapse {\n    display: none;\n    margin-bottom: 5px;\n    margin-left: 190px;\n}\n.orderTable .on .atAll {\n    display: none;\n}\n.orderTable .on .atAll.collapse {\n    display: block;\n}\n.orderTable .allItems {\n    display: none;\n    margin-right: 20px;\n    margin-left: 20px;\n}\n.orderTable .on .allItems {\n    display: block;\n}\n.orderTable .allItems ul {\n    margin: 0;\n}\n.orderTable .allItems li {\n    padding: 3px 5px;\n}\n.orderTable .allItems li:nth-child(odd),\n.orderTable .allItems .items li:nth-child(even) {\n    background-color: #eee;\n}\n.orderTable .allItems li:nth-child(even),\n.orderTable .allItems .items li:nth-child(odd) {\n    background-color: #fff;\n}\n.orderTable .allItems li .price {\n    float: right;\n    margin-top: 2px;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderTable .moreItems .items {\n    display: none;\n}\n.orderTable .moreItems.on .items {\n    display: block;\n}\n.orderTable .moreItems.on .expand {\n    display: none;\n}\n.orderTable .moreItems.on .collapse {\n    display: block;\n}\n.orderTable td.status {\n    width: 15%;\n    padding: 0 10px;\n    text-align: center;\n}\n.orderTable td.price {\n    width: 11%;\n    padding-right: 5px;\n    text-align: right;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderTable td.price .price {\n    margin-bottom: -4px;\n}\n.orderTable td.actions {\n    width: 14%;\n}\n.actions a {\n    display: block;\n    margin: 5px 0;\n    padding: 3px 0;\n    text-align: center;\n    color: #fff;\n    border: 2px solid #fff;\n    border-top-left-radius: 9px;\n    border-bottom-right-radius: 9px;\n    background-color: #ec2028;\n    box-shadow: 0 0 0 1px #ec2028;\n}\n.orderTitle h2 {\n    margin: 2px 0;\n}\n.orderInfo {\n    margin-top: 10px;\n}\n.orderInfo tr {\n    height: 24px;\n}\n.orderInfo .key {\n    width: 160px;\n    color: #8b8b8b;\n}\n.orderInfo .value .price {\n    width: 100px;\n    text-align: right;\n}\n.orderCount {\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderStatus {\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\n.orderInfo .orderStatus {\n    margin-left: 30px;\n    padding: 2px 10px 0;\n}\n.profile .products {\n    margin-top: 30px;\n    border-top: 2px solid #8b8b8b;\n}\n.profile .products li {\n    padding: 10px 0;\n    border-bottom: 2px solid #8b8b8b;\n}\n.productTitleWrap a {\n    display: block;\n    margin-top: 15px;\n    color: #000;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 18px;\n}\n\n/* Checkout */\n\n.checkout .title h1 {\n    margin: 0;\n}\n.checkoutSteps {\n    margin: -10px 0 10px;\n}\n.checkoutSteps li {\n    display: inline-block;\n}\n.checkoutSteps .item,\n.cartList .item {\n    display: block;\n    height: 100px;\n    margin: 0 25px;\n    opacity: .4;\n    line-height: 13.5;\n}\n.cartList .item {\n    width: 60px;\n    margin: -25px 0;\n}\n.checkoutSteps .current .item,\n.checkoutSteps .already .item {\n    opacity: 1;\n}\n.checkoutSteps .item .text {\n    position: relative;\n}\n.checkoutSteps .item i {\n    position: absolute;\n    bottom: 6px;\n    left: -30px;\n}\n.step_address .item {\n    background: url('../img/step_address.png') no-repeat scroll center center transparent;\n}\n.step_delivery .item {\n    background: url('../img/step_delivery.png') no-repeat scroll center center transparent;\n}\n.step_payment .item {\n    background: url('../img/step_payment.png') no-repeat scroll center center transparent;\n}\n.step_confirm .item {\n    background: url('../img/step_confirm.png') no-repeat scroll center center transparent;\n}\n.checkoutSteps .item .text {\n    letter-spacing: 1.8px;\n    text-transform: uppercase;\n}\n.checkout .titleWrap {\n    margin-top: 0;\n}\n.changeUser {\n    margin: 0;\n}\n.changeUser .link {\n    text-decoration: underline;\n    letter-spacing: 2px;\n    text-transform: uppercase;\n    font-size: 12px;\n}\n.themeTable {\n    width: 100%;\n}\n.themeTable .tableRow > div {\n    display: inline-block;\n    vertical-align: top;\n}\n.themeTable .key {\n    width: 20%;\n    padding: 8px 2px;\n    text-align: right;\n    font-weight: bold;\n}\n.themeTable .value {\n    width: 79%;\n    padding: 2px 12px 10px 6px;\n}\n.themeTable .value input[type='text'],\n.themeTable .value input[type='password'],\n.themeTable .value select {\n    width: 100%;\n}\n.themeTable .value input[type='checkbox'] {\n    margin-top: 9px;\n}\n.themeTable .value.phone {\n    width: 26%;\n}\n.themeTable .key.e_mail {\n    width: 9%;\n}\n.themeTable .value.e_mail {\n    width: 42.8%;\n}\n.lastAddress .key {\n    padding: 1px 5px;\n}\n.lastAddress .value {\n    width: 73%;\n}\n.lastAddress .value label {\n    margin: 0;\n}\n.lastAddress .delete {\n    width: 5%;\n    padding: 2px 5px;\n}\n.themeTable .value.district {\n    width: 49%;\n}\n.themeTable .key.index {\n    width: 11%;\n}\n.themeTable .value.index {\n    width: 17.8%;\n}\n.themeTable .value.inputPass,\n.themeTable .value.repeatPass {\n    width: 28.8%;\n}\n.checkout .cartList .row {\n    margin: 20px 0 -10px;\n}\n.checkout .cartList .row > div {\n    min-height: 100px;\n    border-bottom: 2px solid #ebebeb;\n}\n.checkout .cartList .row > div.imageBlock {\n    border: none;\n}\n.checkout .cartList .row.atAll > div {\n    min-height: 65px;\n}\n.checkout .cartList .imageBlock {\n    text-align: center;\n}\n.checkout .cartList .infoBlock {\n    padding: 0 20px;\n    border-bottom: 2px solid #ebebeb;\n}\n.checkout .cartList .title {\n    margin: 0;\n}\n.checkout .cartList .title a {\n    color: #000;\n}\n.checkout .cartList .sku {\n    margin: 0;\n    color: #888;\n}\n.checkout .cartList .offer {\n    margin: 5px 0 0;\n}\n.checkout .cartItem .offer .value {\n    margin-right: 20px;\n    color: #31708f;\n    font-weight: bold;\n}\n.checkout .cartItem .amountBlock {\n    height: 91px;\n    /* padding-top: 30px; */\n    border-bottom: 2px solid #ebebeb;\n}\n.checkout .priceBlock {\n    height: 91px;\n    margin: 0;\n    padding: 0;\n    text-align: right;\n    border-bottom: 2px solid #ebebeb;\n    font-size: 24px;\n    line-height: 3.3;\n}\n.checkout .change {\n    margin-left: 10px;\n}\n.checkout .atAll {\n    padding-top: 26px;\n    text-decoration: underline;\n    letter-spacing: 2px;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: bold;\n}\n.checkout .changeCartBlock {\n    margin-bottom: 16px;\n    padding-left: 35px;\n}\n.checkout .atAllBlock {\n    margin-left: -10px;\n    padding: 0;\n    text-align: center;\n    font-size: 14px;\n    line-height: 2.1;\n}\n.checkout .priceAllBlock {\n    margin-right: 0;\n    padding: 0;\n    text-align: center;\n    text-transform: none;\n    color: #ec2028;\n    font-size: 24px;\n    font-weight: normal;\n    line-height: 1;\n}\n.checkout .buttons button[type='submit'],\n.checkout .buttons a.cornered {\n    width: 134px;\n    background: #999;\n}\n.checkout .buttons button[type='submit']:before,\n.checkout .buttons a.cornered:before {\n    width: 132px;\n}\n.checkout .sod_select {\n    width: 100%;\n    border: none;\n}\n.checkout .sod_select .sod_label:before {\n    position: absolute;\n    top: 0;\n    left: -2px;\n    width: 100%;\n    height: 100%;\n    content: '';\n    border: 2px solid #ebebeb;\n}\n.checkout .sod_select.open .sod_label:before {\n    border-bottom-color: transparent;\n}\n.checkout .sod_select .sod_list_wrapper {\n    width: 100%;\n    border-color: #ebebeb;\n}\n.checkoutBox .radio {\n    padding: 0 27px 0 0;\n    text-align: right;\n}\n.checkoutBox .info {\n    position: relative;\n    margin: 0 0 10px -20px;\n    padding: 0 0 8px;\n    border-bottom: 2px solid #ebebeb;\n}\n.checkoutBox .logoService {\n    display: inline-block;\n    margin-right: 47px;\n}\n.vertItems {\n    margin-top: 4px;\n}\n.vertItems .price {\n    margin-top: 7px;\n    margin-left: -26px;\n    font-size: 16px;\n    font-weight: bold;\n}\n.vertItems .title {\n    float: left;\n    width: initial;\n    margin: 7px 0 2px;\n}\n.additionalInfo {\n    position: absolute;\n    top: 0;\n    right: 100px;\n}\n\n/* .additionalInfo .costWrap {\n	position: relative;\n} */\n\n.additionalInfo .buttons {\n    position: absolute;\n    right: 20px;\n    bottom: 20px;\n}\n.additionalInfo .buttons button[type='submit'] {\n    display: inline-block;\n    width: 112px;\n    margin: 0;\n    padding: 0;\n    background-color: #337ab7;\n}\n.additionalInfo .buttons button[type='submit']:before {\n    width: 110px;\n}\n.additionalInfo .buttons button.btn-default {\n    color: #333;\n    background-color: #fff;\n}\n.spacing {\n    text-decoration: underline;\n    letter-spacing: 2.3px;\n    text-transform: lowercase;\n    color: #337ab7;\n    border: none;\n    background: transparent;\n}\n.spacing:hover {\n    text-decoration: underline;\n    color: #337ab7;\n    border: none;\n    background: transparent;\n}\n.addressBlock {\n    margin-bottom: 10px;\n}\n.byerRow .infoWrap {\n    margin-bottom: 5px;\n}\n.buttons button[type='submit'].wideVer {\n    width: 180px;\n}\n.buttons button[type='submit'].wideVer:before {\n    width: 178px;\n}\n\n/* Cart Page */\n\n.cartWrapper {\n    position: relative;\n}\n.cartWrapper .title h1 {\n    margin: 0;\n}\n.cartWrapper .info {\n    padding: 40px 30px;\n}\n.cartWrapper .image {\n    padding: 15px 0 0;\n    text-align: center;\n}\n.cartWrapper .multiOffers {\n    margin: 0;\n    padding: 0;\n    border: none;\n}\n.cartWrapper .multiofferTitle {\n    display: inline-block;\n    margin: 0;\n}\n.cartWrapper .multiOffers select {\n    margin-bottom: 8px;\n}\n.cartWrapper .price {\n    font-size: 24px;\n}\n.cartWrapper .remove {\n    font-size: 30px;\n    line-height: 4.6;\n}\n.cartWrapper .barcode {\n    margin: 0;\n    color: #888;\n    font-weight: bold;\n}\n.cartWrapper .clearCart {\n    position: absolute;\n    top: 10px;\n    right: 40px;\n    text-decoration: underline;\n    color: #ec2028;\n    font-size: 20px;\n    font-weight: bold;\n}\n.cartWrapper .amount {\n    position: relative;\n    padding: 55px 0 0;\n}\n.cartWrapper .incdec a {\n    position: absolute;\n    top: 60px;\n}\n.cartWrapper .incdec a.inc {\n    right: 15px;\n}\n.cartWrapper .incdec a.dec {\n    left: 15px;\n}\n.cartWrapper .offers {\n    padding: 10px 0 0;\n}\n.cartWrapper .cartitem .price {\n    margin-top: 60px;\n}\n.discount {\n    margin-top: 10px;\n    font-size: 14px;\n}\n.cartWrapper .row.cartitem {\n    padding: 10px 0;\n    border-bottom: 2px solid #ebebeb;\n}\n.cartWrapper .amountBlock .amount a {\n    display: none;\n}\n\n/* IML Map */\n\n.selectSd {\n    padding: 5px 0 5px 10px;\n    cursor: pointer;\n    line-height: 1.35;\n    -webkit-transition: .3s all ease-out;\n    -o-transition: .3s all ease-out;\n    transition: .3s all ease-out;\n}\n.selectSd:hover {\n    background: #f1f1f1;\n}\n.selectSd.active {\n    background: rgba(255, 204, 0, .7);\n}\n.selectRegion {\n    position: absolute;\n    top: -46px;\n    left: 10px;\n}\n.close {\n    font-size: 30px;\n}\n.modal-body {\n    padding: 0;\n}\n.modal-header .close {\n    margin-top: -4px;\n}\n.modal-title {\n    margin: 4px 0 -4px 0;\n}\n.modal-footer .btn {\n    margin-top: 40px;\n}\n.modal-footer .btn + .btn {\n    margin-left: 15px;\n}\n.priceItem {\n    float: left;\n    margin-bottom: 4px;\n    text-align: left;\n}\n.priceItem > div {\n    display: inline-block;\n}\n.priceItem .name {\n    width: 400px;\n    font-size: 16px;\n}\n.priceItem .priceText {\n    width: 195px;\n    text-align: right;\n    font-weight: bold;\n}\n\n/* Footer */\n\n.preFooter .payMethods {\n    margin-top: 20px;\n}\n.preFooter .banner {\n    margin-top: 50px;\n}\nfooter {\n    height: 380px;\n    margin-top: 50px;\n    background: #000;\n}\nfooter .item {\n    padding-top: 46px;\n}\nfooter .item .title {\n    text-transform: uppercase;\n    color: #888;\n}\nfooter .item .list ul {\n    padding: 0;\n}\nfooter .item .list li {\n    margin-bottom: -4px;\n}\nfooter .item .list a {\n    color: #ccc;\n}\nfooter .footerAddress {\n    margin-top: 12px;\n}\nfooter .phones {\n    margin-bottom: 14px;\n}\nfooter .label {\n    padding: 0;\n    color: #888;\n    font-size: 14px;\n    font-weight: normal;\n}\nfooter .phone {\n    margin-top: 2px;\n    margin-bottom: 4px;\n}\nfooter .footerAddress a {\n    color: #ccc;\n    font-family: 'FFSignaPro-Black', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 16px;\n}\nfooter .email {\n    margin-top: 2px;\n    margin-bottom: 4px;\n}\nfooter .email a {\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 13px;\n}\nfooter .social {\n    margin-top: 20px;\n}\nfooter .social a {\n    margin-right: 4px;\n    opacity: .7;\n}\nfooter .social a:hover {\n    opacity: 1;\n}\nfooter .copyright {\n    margin-top: 20px;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    font-family: 'FFSignaPro-Book', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.footerFriendLinks .link {\n    margin-top: 20px;\n    -webkit-transition: all .4s ease-out;\n    -o-transition: all .4s ease-out;\n    transition: all .4s ease-out;\n    opacity: .6;\n}\n.footerFriendLinks .link:hover {\n    opacity: 1;\n}\n\n/* Large Devices, Wide Screens */\n\n@media only screen and (max-width: 1200px) {}\n\n/* Custom  */\n\n@media only screen and (max-width: 1024px) {\n    .topMenu li {\n        margin-right: 10px;\n    }\n    .logoBlock img {\n        width: 300px;\n    }\n    .logoBlock .slogan {\n        margin-left: 6px;\n        white-space: nowrap;\n        font-size: 12px;\n    }\n    .userAuthBlock .authorized .my,\n    .userAuthBlock .authorized .user {\n        margin-right: 0;\n    }\n    .headerIconsBlock > div {\n        margin-left: 15px;\n    }\n}\n\n/* Medium Devices, Desktops */\n\n@media only screen and (max-width: 992px) {}\n\n/* Small Devices, Tablets */\n\n@media only screen and (max-width: 768px) {}\n\n/* Extra Small Devices, Phones */\n\n@media only screen and (max-width: 480px) {}\n\n/* Custom, iPhone Retina */\n\n@media only screen and (max-width: 320px) {}\n\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/css/style.css",
			"file_size": 63071,
			"file_write_time": 130996191070193141,
			"settings":
			{
				"buffer_size": 63071,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* Класс доставки компании IMLogistic\n*\n* @copyright Copyright (c) YellowMarkerWS. Ефремов Денис <efremov.a.denis@gmail.com> 2015.\n*/\nnamespace Imldelivery\\Model\\DeliveryType;\nuse \\RS\\Orm\\Type;\n\nclass Iml extends \\Shop\\Model\\DeliveryType\\AbstractType\n{\n    const\n        // Учетные данные\n        API_LOGIN = '07308',\n        API_PASS = 'TAaB4myF',\n\n        // Основное API\n        URL_API_STATUS              =   'http://api.iml.ru/json/GetStatuses',\n        URL_API_ORDERSLIST          =   'http://api.iml.ru/json/GetOrders',\n        URL_API_CREATEORDER         =   'http://api.iml.ru/json/CreateOrder',\n        URL_API_GETPRICE            =   'http://api.iml.ru/json/GetPrice',\n\n        // Справочные таблицы для API\n        URL_HELP_DELIVERYSTATUS     =   'http://api.iml.ru/list/deliverystatus?type=json',\n        URL_HELP_ORDERSTATUS        =   'http://api.iml.ru/list/orderstatus?type=json',\n        URL_HELP_REGION             =   'http://api.iml.ru/list/region?type=json',\n        URL_HELP_SD                 =   'http://api.iml.ru/list/sd?type=json',\n        URL_HELP_SERVICES           =   'http://api.iml.ru/list/service?type=json',\n\n        // Остальные справочники\n        URL_LOCATION                =   'http://list.iml.ru/Location?type=json',\n        URL_ZONE                    =   'http://list.iml.ru/zone?type=json',\n        URL_EXCEPTIONSERVICEREGION  =   'http://list.iml.ru/ExceptionServiceRegion?type=json',\n        URL_POSTDELIVERYLIMIT       =   'http://list.iml.ru/PostDeliveryLimit?type=json',\n        URL_REGION                  =   'http://list.iml.ru/region?type=json',\n        URL_SELFDELIVERY            =   'http://list.iml.ru/sd?type=json',\n        URL_STATUS                  =   'http://list.iml.ru/status?type=json',\n        URL_POSTRATEZONE            =   'http://list.iml.ru/PostRateZone?type=json',\n        URL_POSTCODE                =   'http://list.iml.ru/PostCode?type=json',\n        URL_CALENDAR                =   'http://list.iml.ru/calendar?type=json',\n        URL_SERVICE                 =   'http://list.iml.ru/service?type=json';\n\n    //protected\n        //$service_id            = null, // Текущая услуга\n        //$region_id_from        = null; // Услуги доставки IML\n        //$carries          = null; // Агрегаторы доставки существующие в sheepla\n\n    private\n        $cache_api_requests = array();  // Кэш запросов к серверу рассчета\n\n    /**\n    * Возвращает название расчетного модуля (типа доставки)\n    *\n    * @return string\n    */\n    function getTitle()\n    {\n        return t('IML');\n    }\n\n    /**\n    * Возвращает описание типа доставки\n    *\n    * @return string\n    */\n    function getDescription()\n    {\n        return t('IML агрегатор доставок');\n    }\n\n    /**\n    * Возвращает идентификатор данного типа доставки. (только англ. буквы)\n    *\n    * @return string\n    */\n    function getShortName()\n    {\n        return t('iml');\n    }\n\n    /**\n    * Функция которая возвращает надо ли, проверять возможность создание заказа на доставку\n    *\n    * @return bool\n    */\n    function getNeedCheckCreate(){\n        return true;\n    }\n\n    /**\n    * Возвращает ORM объект для генерации формы или null\n    *\n    * @return \\RS\\Orm\\FormObject | null\n    */\n    function getFormObject()\n    {\n        $properties = new \\RS\\Orm\\PropertyIterator(array(\n            'region_id_from' => new Type\\String(array(\n                'description' => t('Регион, откуда осуществляется отправка'),\n                'hint' => t('Все регионы, с которыми работает IML'),\n                'list' => array(array('\\Imldelivery\\Model\\DeliveryType\\Iml','staticGetRegions')),\n            )),\n            'service_id_all' => new Type\\String(array(\n                'description' => t('Услуги этого способа доставки'),\n                'maxLength' => 11,\n                'visible' => false,\n                'List' => array(array('\\Imldelivery\\Model\\DeliveryType\\Iml','staticGetServices')),\n                'ChangeSizeForList' => false,\n                'attr' => array(array(\n                    'size' => 16,\n                    'multiple' => true\n                ))\n            )),\n            'service_id' => new Type\\ArrayList(array(\n                'description' => t('Список всех услуг'),\n                'maxLength' => 1000,\n                'runtime' => false,\n                'attr' => array(array(\n                    'multiple' => true\n                )),\n                'template' => '%imldelivery%/form/delivery/iml/services_list.tpl',\n                'listFromArray' => array(array())\n            )),\n            'show_map' => new Type\\Integer(array(\n                'description' => t('Показывать карту'),\n                'maxLength' => 1,\n                'default' => 0,\n                'CheckboxView' => array(1,0),\n            )),\n            'timeout' => new Type\\Integer(array(\n                'description' => t('Время ожидания ответа IML, сек'),\n                'hint' => t('Иногда запросы к IML идут очень долго,<br/> чтобы не дожидатся ответа используется это значение.<br/>Рекоммендуемое значение 2 сек.'),\n                'default' => 2,\n            )),\n        ));\n        return new \\RS\\Orm\\FormObject($properties);\n    }\n\n    /**\n     * Справочник услуг\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetServices()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_SERVICES, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник регионов\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetRegions()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_REGION, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник состояний заказа\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetDeliveryStatuses()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_DELIVERYSTATUS, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник статусов заказа\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetOrderStatus()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_ORDERSTATUS, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник пунктов самовывоза\n     *\n     * @return array\n     */\n    static function getSelfDeliveryList()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_SD, self::API_LOGIN, self::API_PASS);\n        return $list;\n    }\n    /**\n     * Получает массив регионов, в которых есть пункты самовывоза\n     *\n     * @return array [code] => [name]\n     */\n    static function getSdRegions(\\Shop\\Model\\Orm\\Order $order, $delivery_id = null, $params = array())\n    {\n        $iml = new Iml;\n        $arr = array();\n        $regions = $iml->staticGetRegions();\n        foreach ($iml->getSelfDeliveryList() as $sd_item) {\n            $code = $sd_item['RegionCode'];\n            $arr[$code] = $regions[$code];\n        }\n        return $arr;\n    }\n\n    /**\n     * Получает пункты самовывоза одного региона\n     *\n     * @param  string $params код региона из справочника\n     * @return array\n     */\n    static function getSdByRegion(\\Shop\\Model\\Orm\\Order $order, $delivery_id = null, $params = array())\n    {\n        $iml = new Iml;\n        $arr = array();\n        $regions = $iml->staticGetRegions();\n        $region = $params['region'];\n        foreach ($iml->getSelfDeliveryList() as $sd_item) {\n            if ($sd_item['RegionCode'] == $region) {\n                $arr[] = $sd_item;\n            }\n        }\n        return $arr;\n    }\n\n    public function getActiveServices()\n    {\n        $services = $this->getOption('service_id');\n        $servicesList = self::staticGetServices();\n        $arr = array();\n        if (is_array($services)) {\n            foreach ($services as $service) {\n                $arr[$service] = $servicesList[$service];\n            }\n        }\n        return $arr;\n    }\n\n    /**\n     * Добавляет доп данные в объект заказа\n     *\n     * @param array $params\n     */\n    public function updateExtraData(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        $extra = $order['order_extra'];\n        foreach ($params as $key => $value) {\n            $extra['delivery'][$key] = $value;\n        }\n\n        return $order['order_extra'] = array_merge($order['order_extra'], $extra);\n    }\n\n    /**\n     * Получает цену на доставку до пунктов самовывоза\n     *\n     * @param  array $params\n     * @return string|number\n     */\n    public function getDeliveryCostAjax(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        return self::getImlCost($order, $params);\n    }\n\n    /**\n     * Запрос базовой стоимости заказа у IML\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    public function getImlCost(\\Shop\\Model\\Orm\\Order $order, $params = array())\n    {\n        if ($params == array()) {\n	        $order_extra = $order['order_extra'];\n	        $imlData = isset($order_extra['delivery']) ? $order_extra['delivery'] : $order_extra['address'];\n        } else {\n        	$imlData = $params;\n        }\n\n        $cost = array();\n        foreach ($imlData['service_id'] as $code => $service) {\n            $content = array(\n                'Job' => $code,                 								// услуга\n                'RegionFrom' => $imlData['region_id_from'],     				// регион отправки\n                'RegionTo' => $imlData['region_id_to'],             			// регион получения\n                'Volume' => '1',                                            	// кол-во мест\n                'Weigth' => $order->getWeight() ? $order->getWeight() : '1',	// вес(кг)\n                'SpecialCode' => $imlData['request_code'],      				// код пункта самовывоза\n            );\n            $cost[$code] = self::postApiRequest(self::URL_API_GETPRICE, self::API_LOGIN, self::API_PASS, $content);\n        }\n        return $cost;\n    }\n\n\n    /**\n    * Возвращает стоимость доставки для заданного заказа. Только число.\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address - Адрес доставки\n    * @return double\n    */\n    public function getDeliveryCost(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null, $use_currency = true)\n    {\n        $cost = $this->getImlCost($order);\n        if (!is_array($cost)) return -1;\n        $cost_arr = array();\n        foreach ($cost as $code => $obj) {\n            $cost_arr[] = isset($obj['Price']) ? $obj['Price'] : true;\n        }\n        return min($cost_arr);\n    }\n\n    public function getDeliveryCostText(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        $cost = $this->getDeliveryCost($order, $address);\n        if ($cost < 0) {\n            return '';\n        } else {\n            return ($cost) ? \\RS\\Helper\\CustomView::cost($cost).' '.$order->getMyCurrency()->stitle : 'бесплатно';\n        }\n    }\n\n    /**\n     * Основной POST запрос к API. Вернет массив объектов\n     *\n     * @param  string         $url\n     * @param  string         $login\n     * @param  string         $pass\n     * @param  array          $content\n     * @return array\n     */\n    private function postApiRequest($url, $login, $pass, array $content = array())\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($content));\n        curl_setopt($curl, CURLOPT_USERPWD, $login.\":\".$pass);\n        curl_setopt($curl, CURLOPT_SSLVERSION, 3);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        $response = curl_exec($curl);\n        return json_decode($response, true);\n    }\n\n    /**\n     * Основной GET запрос к API. Вернет массив объектов\n     *\n     * @param  string         $url\n     * @param  string         $login\n     * @param  string         $pass\n     * @return array\n     */\n    private function getApiRequest($url, $login, $pass)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_USERPWD, $login.\":\".$pass);\n        curl_setopt($curl, CURLOPT_SSLVERSION, 3);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        $response = curl_exec($curl);\n        return json_decode($response, true); // результат запроса\n    }\n\n    /**\n     * Переделывает структуру массива для формы в админке\n     *\n     * @return array [id] => [name]\n     */\n    public function getHelpIdList($incomingData)\n    {\n        $arr = array();\n        foreach ($incomingData as $data) {\n            $arr[$data['Code']] = $data['Description'];\n        }\n        return $arr;\n    }\n\n    /**\n    * Возвращает дополнительный HTML для публичной части без плагина карты\n    *\n    * @return string\n    */\n    public function getAddittionalHtml(\\Shop\\Model\\Orm\\Delivery $delivery, \\Shop\\Model\\Orm\\Order $order = null)\n    {\n        if (!$order) {\n            $order = \\Shop\\Model\\Orm\\Order::currentOrder();\n        }\n        $currencyApi = new \\Catalog\\Model\\CurrencyApi();\n        $currency = ($order->getMyCurrency() != '') ? $order->getMyCurrency() : $currencyApi->getDefaultCurrency();\n        $extra = $order['order_extra'];\n        $region_id_to = $extra['delivery']['region_id_to'] ? $extra['delivery']['region_id_to'] : $extra['address']['region_id_to'];\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'region_id_to'       => $region_id_to,       //Регион куда\n            'region_id_from'     => $this->getOption('region_id_from'),         //Регион откуда\n            'service_ids'        => json_encode($this->getActiveServices()),    //Услуги этогй доставки\n            'delivery_cost_json' => json_encode($this->getImlCost($order)),     //Текущий объект цены доставки\n            'delivery_cost'      => $this->getImlCost($order),                  //Текущий объект цены доставки\n            'order'              => $order,                                     //Текущий недоофрмленный заказ\n            'currency'           => json_encode($currency->getValues()),       	//Текущий объект валюты\n            'delivery'           => $delivery,                                  //Текущий объект доставки\n            'user'               => \\RS\\Application\\Auth::getCurrentUser(),     //Текущий объект пользователя\n        ) + \\RS\\Module\\Item::getResourceFolders($this));\n\n        if ($this->getOption('show_map') == 1) {\n            return $view->fetch('%imldelivery%/delivery/iml/widget.tpl');\n        }\n\n    }\n\n    /**\n     * Возвращает адреса пунктов самовывоза для карты\n     */\n    static function loadMap(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        //return print_r($order->getDelivery()->getTypeObject());\n        $order_extra = $order['order_extra'];\n        $order['delivery'] = $delivery_id;\n        $delivery = $order->getDelivery();\n        $delivery_type = new Iml;\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'region_id_to'       => $order_extra['address']['region_id_to'],       //Регион куда\n            'service_ids'        => json_encode($delivery_type->getActiveServices()),             //Услуги этой доставки\n            'delivery_cost_json' => json_encode($delivery_type->getImlCost($order)),         //Текущий объект цены доставки\n            'delivery_cost'      => $delivery_type->getImlCost($order),         //Текущий объект цены доставки\n            'order'              => $order,                                 //Текущий недоофрмленный заказ\n            'delivery'           => $delivery,                              //Текущий объект доставки\n            'delivery_type'      => $delivery_type,                              //Текущий объект типа доставки\n            'user'               => \\RS\\Application\\Auth::getCurrentUser(), //Текущий объект пользователя\n        ) + \\RS\\Module\\Item::getResourceFolders($delivery_type));\n\n        return $view->fetch('%imldelivery%/delivery/iml/map.tpl');\n    }\n\n    /**\n    * Возвращает дополнительный HTML для административной части с выбором опций доставки в заказе\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - заказ доставки\n    * @return string\n    */\n    function getAdminAddittionalHtml(\\Shop\\Model\\Orm\\Order $order = null)\n    {\n        //Получим данные по товарам\n        $products = $order->getCart()->getProductItems();\n\n        if (empty($products)){\n            $this->addError(t('В заказ не добавлено ни одного товара'));\n        }\n\n        //Получим цену с параметрами по умолчанию\n        $cost     = $this->getDeliveryCostText($order);\n        $delivery = $order->getDelivery();\n        $service_id = $this->getOption('service_id');\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'errors'      => $this->getErrors(),\n            'order'       => $order,\n            'cost'        => $cost,\n            'extra_info'  => $order->getExtraKeyPair(),\n            'delivery'    => $delivery,\n            'service_id'  => $service_id,\n        )+ \\RS\\Module\\Item::getResourceFolders($this));\n\n        return $view->fetch(\"%imldelivery%/form/delivery/iml/iml_admin.tpl\");\n    }\n\n    /**\n    * Возвращает HTML виджет с краткой информацией заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlShortInfo(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'type' => 'short',\n         'title' => 'Краткие сведения заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет с информацией заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlInfo(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'full',\n         'title' => 'Сведения заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет с историей заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlHistory(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'history',\n         'title' => 'История заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет со статусом заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlStatus(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'standard',\n         'title' => 'Статус заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Действие с запросами к заказу для получения дополнительной информации от доставки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    function actionOrderQuery(\\Shop\\Model\\Orm\\Order $order)\n    {\n        $url = new \\RS\\Http\\Request();\n        $method = $url->request('method',TYPE_STRING,false);\n        switch ($method) {\n            case \"getInfo\": //Получение статуса заказа\n                return $this->getHtmlInfo($order);\n                break;\n            case \"getShortInfo\": //Получение статуса заказа\n                return $this->getHtmlShortInfo($order);\n                break;\n            case \"getHistory\": //Получение статуса заказа\n                return $this->getHtmlHistory($order);\n                break;\n            case \"getStatus\": //Получение статуса заказа\n            default:\n                return $this->getHtmlStatus($order);\n                break;\n        }\n    }\n\n    /**\n    * Возвращает дополнительный HTML для админ части в заказе\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - заказ доставки\n    * @return string\n    */\n    function getAdminHTML(\\Shop\\Model\\Orm\\Order $order)\n    {\n        $view = new \\RS\\View\\Engine();\n\n        $view->assign(array(\n            'order' => $order,\n        ));\n\n        return $view->fetch(\"%imldelivery%/form/delivery/iml/iml_additional_html.tpl\");\n    }\n\n\n\n\n    /**\n     * Запрос получает статус и состояние заказа(ов)\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function getImlStatuses(array $filters = null)\n    {\n        $content = array(\n            'Test' => 'True',                       // для тестового режима, иначе не указывайте\n            'CustomerOrder' => '',                 // номер заказа\n            'BarCode' => '',                        // штрих код\n            'DeliveryDateStart' => '',               // фильтр по дате доставки, с указанной даты и позднее\n            'DeliveryDateEnd' => '',                // фильтр по дате доставки, до указанной даты\n            'State' => 999,                         // из справочника\n            'OrderStatus' => 0,                    // из справочника\n            'Job' => '',                          // из справочника услуг\n            'RegionFrom' => '',                   // фильтр по региону отправки\n            'RegionTo' => '',                       // фильтр по региону получения\n            'CreationDateStart' => '',              // фильтр по дате доставки, с указанной даты и позднее\n            'CreationDateEnd' => ''                 // фильтр по дате доставки, до указанной даты\n        );\n\n        return $this->postApiRequest(self::URL_API_STATUS, self::API_LOGIN, self::API_PASS, array_merge($content, $filters));\n    }\n\n    /**\n     * Запрос позволяет получить список заказов по параметрам\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function getImlOrders(array $filters = null)\n    {\n        $content =array(\n            'Test' => 'True', // для тестового режима, иначе не указывайте\n            //'CustomerOrder' => '',                 // номер заказа\n            //'BarCode' => '2624028597816',          // штрих код\n            //'DeliveryDateStart' => '2014-01-15',   // с указанной даты и позднее\n            //'DeliveryDateEnd' => '2014-07-15',     // до указанной даты\n            //'State' => 3                           // из справочника\n            //'OrderStatus' => 0,                    // из справочника\n            'Job' => 'С24КО', // из справочника услуг\n            //'RegionFrom' => 'МОСКВА',              // из справочника регионов\n            //'RegionTo' => 'МОСКВА',                // из справочника регионов\n            'CreationDateStart' => '2014-01-15' // с указанной даты и позднее\n            //'CreationDateEnd' => '2014-07-15'      // до указанной даты\n        );\n\n        return $this->postApiRequest(self::URL_API_ORDERSLIST, self::API_LOGIN, self::API_PASS, array_merge($content, ilters));\n    }\n\n    /**\n     * Запрос позволяет создать заказ в системе IML\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function createImlOrder(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        if(!$address) $address = $order->getAddress();\n        $catalog_config = \\RS\\Config\\Loader::byModule('catalog');\n\n        $currency      = \\Catalog\\Model\\CurrencyApi::getBaseCurrency(); //Базовая валюта\n        $date          = date('c',strtotime($order['dateof'])); //Дата заказа\n        $delivery      = $order->getDelivery(); //объект доставки\n        $delivery_cost = $delivery->getDeliveryCost($order);\n        $payment       = $order->getPayment();\n        $user          = $order->getUser();\n        $extra         = $order->getExtraInfo();\n        $cartItemsArray    = array();\n\n        $cart     = $order->getCart();\n        $products = $cart->getProductItems();\n        $cartdata = $cart->getPriceItemsData();\n\n        $services = self::staticGetServices();\n\n        // Заполняем продукты\n        foreach ($products as $n => $item) {\n            $product           = $item['product'];\n            $barcode           = $product->getBarCode($item['cartitem']['offer']);\n            $offer_title       = $product->getOfferTitle($item['cartitem']['offer']);\n\n            $cartItemsArray[] = array(\n                'productNo'=> $barcode,\n                'productName' => $product->title,\n                'productVariant' => $offer_title,\n                'productBarCode' => '',\n                'couponCode' => '',\n                'discount' => $item->discount,\n                'weightLine' => $item->single_weight,\n                'amountLine' => $item->single_cost,\n                'statisticalValueLine' => '',\n                'itemQuantity' => $item['cartitem']['amount'],\n                'deliveryService' => FALSE\n            );\n        }\n\n        // Заполняем доставку\n        if ($delivery_cost > 0) {\n            $cartItemsArray[] = array(\n                'productNo'=> $extra['iml_service_id']['value'],\n                'productName' => $services[$extra['iml_service_id']['value']],\n                'productVariant' => '',\n                'productBarCode' => '',\n                'couponCode' => '',\n                'discount' => '',\n                'weightLine' => '',\n                'amountLine' => '',\n                'statisticalValueLine' => '',\n                'itemQuantity' => '',\n                'deliveryService' => TRUE\n            );\n        }\n\n        // Заполняем инфо о заказе\n        $content = array(\n            'Test' => 'True', // для тестового режима, иначе не указывайте\n            'CustomerOrder' => $user['id'] ? $user['id'] : $order['id'],\n            'Job' => $extra['iml_service_id']['value'], // из справочника услуг\n            'Contact' => $user['name'],\n            'RegionCodeFrom' => $this->getOption('region_id_from',0), // из справочника регионов\n            'RegionCodeTo' => $extra['iml_region_to']['value'], // из справочника регионов\n            'Address' => $address['address'],\n            'DeliveryPoint' => $extra['iml_request_code']['value'], // из справочника пунктов самовывоза\n            'Phone' => $user['phone'],\n            'Amount' => $order['totalcost'], // разделитель '.' (точка)\n            'ValuatedAmount' => '14.2', // разделитель '.' (точка)\n            'Weight' => $order->getWeight(), // разделитель '.' (точка)\n            'Comment' => $order['comments'],\n            'GoodItems' => $cartItemsArray      //не обязательно, если есть позиции заказа\n        );\n\n        return $this->postApiRequest(self::URL_API_CREATEORDER, self::API_LOGIN, self::API_PASS, $content);\n\n    }\n        //  Test – тестовый режим, 'True' для тестового режима, иначе не указывайте\n        //  Job – услуга доставки, Code из справочника услуг\n        //  CustomerOrder – номер заказа\n        //  DeliveryDate – дата доставки в строковом представлении, формат dd.MM.yyyy\n        //  Volume – количество мест\n        //  Weight – вес\n        //  BarCode – штрих код заказа в формате EAN-13\n        //  DeliveryPoint – пункта самовывоза, RequestCode из таблицы пунктов самовывоза\n        //  Phone – телефон\n        //  Contact – контактное лицо\n        //  RegionCodeFrom – региона отправления, Code из таблицы регионов\n        //  RegionCodeTo – код региона получения, Code из таблицы регионов\n        //  Address – адрес доставки\n        //  TimeFrom – начало временного периода доставки\n        //  TimeTo – конец временного периода доставки\n        //  Amount – сумма заказа\n        //  ValuatedAmount – оценочная стоимость заказа\n        //  Comment – комментарий\n        //  City – город доставки, для отправки почтой России\n        //  PostCode – индекс, для отправки почтой России\n        //  PostRegion – регион, для отправки почтой России\n        //  PostArea – район, для отправки почтой России\n        //  PostContentType – тип вложения (0 - Печатная, 1 - Разное, 2 - 1 Класс), для отправки почтой России\n\n    /**\n    * Функция срабатывает после создания заказа\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order     - объект заказа\n    * @param \\Shop\\Model\\Orm\\Address $address - Объект адреса\n    * @return void\n    */\n    // function onOrderCreate(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null) {\n    //     $extra = $order->getExtraInfo();\n    //     if (!isset($extra['iml_order_response'])){ // Если заказ не создан\n    //         //Создадим заказ\n    //         //$created_order = $this->createImlOrder($order,$address);\n    //         //Если ответа дождались, то запишем номер заказа\n    //         if ($created_order){\n    //             if ($created_order['Result'] == 'OK') {\n    //                 $order->addExtraInfoLine(\n    //                     'IML ответ на создание заказа',\n    //                     $created_order['Result'],\n    //                     $created_order['Order'],\n    //                     'iml_order_response'\n    //                 );\n    //             } elseif ($created_order['Result'] == 'Error') {\n    //                 $order->addExtraInfoLine(\n    //                     'IML ошибка создания заказа',\n    //                     $created_order['Result'],\n    //                     $created_order['Errors'],\n    //                     'iml_order_error'\n    //                 );\n    //             }\n    //         } else { //Иначе\n    //             $order->addExtraInfoLine(\n    //                 'IML API не отвечает',\n    //                 'Error',\n    //                 array(\n    //                     0 => 'Что-то с сетью'\n    //                 ),\n    //                 'iml_api_error'\n    //             );\n    //         }\n    //         //$extra = $order->getExtraInfo();\n    //     }\n\n    //     //Запишем данные в таблицу, чтобы не вызывать повторного сохранения\n    //     \\RS\\Orm\\Request::make()\n    //         ->update()\n    //         ->from(new \\Shop\\Model\\Orm\\Order())\n    //         ->set(array(\n    //             '_serialized' => serialize($order['extra'])\n    //         ))\n    //         ->where(array(\n    //             'id' => $order['id']\n    //     ))->exec();\n    // }\n\n}\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/imldelivery/model/deliverytype/iml.inc.php.bak",
			"file_size": 35837,
			"file_write_time": 130996254550962803,
			"settings":
			{
				"buffer_size": 31575,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* Класс доставки компании IMLogistic\n*\n* @copyright Copyright (c) YellowMarkerWS. Ефремов Денис <efremov.a.denis@gmail.com> 2015.\n*/\nnamespace Imldelivery\\Model\\DeliveryType;\nuse \\RS\\Orm\\Type;\n\nclass Iml extends \\Shop\\Model\\DeliveryType\\AbstractType\n{\n    const\n        // Учетные данные\n        API_LOGIN = '07308',\n        API_PASS = 'TAaB4myF',\n\n        // Основное API\n        URL_API_STATUS              =   'http://api.iml.ru/json/GetStatuses',\n        URL_API_ORDERSLIST          =   'http://api.iml.ru/json/GetOrders',\n        URL_API_CREATEORDER         =   'http://api.iml.ru/json/CreateOrder',\n        URL_API_GETPRICE            =   'http://api.iml.ru/json/GetPrice',\n\n        // Справочные таблицы для API\n        URL_HELP_DELIVERYSTATUS     =   'http://api.iml.ru/list/deliverystatus?type=json',\n        URL_HELP_ORDERSTATUS        =   'http://api.iml.ru/list/orderstatus?type=json',\n        URL_HELP_REGION             =   'http://api.iml.ru/list/region?type=json',\n        URL_HELP_SD                 =   'http://api.iml.ru/list/sd?type=json',\n        URL_HELP_SERVICES           =   'http://api.iml.ru/list/service?type=json',\n\n        // Остальные справочники\n        URL_LOCATION                =   'http://list.iml.ru/Location?type=json',\n        URL_ZONE                    =   'http://list.iml.ru/zone?type=json',\n        URL_EXCEPTIONSERVICEREGION  =   'http://list.iml.ru/ExceptionServiceRegion?type=json',\n        URL_POSTDELIVERYLIMIT       =   'http://list.iml.ru/PostDeliveryLimit?type=json',\n        URL_REGION                  =   'http://list.iml.ru/region?type=json',\n        URL_SELFDELIVERY            =   'http://list.iml.ru/sd?type=json',\n        URL_STATUS                  =   'http://list.iml.ru/status?type=json',\n        URL_POSTRATEZONE            =   'http://list.iml.ru/PostRateZone?type=json',\n        URL_POSTCODE                =   'http://list.iml.ru/PostCode?type=json',\n        URL_CALENDAR                =   'http://list.iml.ru/calendar?type=json',\n        URL_SERVICE                 =   'http://list.iml.ru/service?type=json';\n\n    //protected\n        //$service_id            = null, // Текущая услуга\n        //$region_id_from        = null; // Услуги доставки IML\n        //$carries          = null; // Агрегаторы доставки существующие в sheepla\n\n    private\n        $cache_api_requests = array();  // Кэш запросов к серверу рассчета\n\n    /**\n    * Возвращает название расчетного модуля (типа доставки)\n    *\n    * @return string\n    */\n    function getTitle()\n    {\n        return t('IML');\n    }\n\n    /**\n    * Возвращает описание типа доставки\n    *\n    * @return string\n    */\n    function getDescription()\n    {\n        return t('IML агрегатор доставок');\n    }\n\n    /**\n    * Возвращает идентификатор данного типа доставки. (только англ. буквы)\n    *\n    * @return string\n    */\n    function getShortName()\n    {\n        return t('iml');\n    }\n\n    /**\n    * Функция которая возвращает надо ли, проверять возможность создание заказа на доставку\n    *\n    * @return bool\n    */\n    function getNeedCheckCreate(){\n        return true;\n    }\n\n    /**\n    * Возвращает ORM объект для генерации формы или null\n    *\n    * @return \\RS\\Orm\\FormObject | null\n    */\n    function getFormObject()\n    {\n        $properties = new \\RS\\Orm\\PropertyIterator(array(\n            'region_id_from' => new Type\\String(array(\n                'description' => t('Регион, откуда осуществляется отправка'),\n                'hint' => t('Все регионы, с которыми работает IML'),\n                'list' => array(array('\\Imldelivery\\Model\\DeliveryType\\Iml','staticGetRegions')),\n            )),\n            'service_id_all' => new Type\\String(array(\n                'description' => t('Услуги этого способа доставки'),\n                'maxLength' => 11,\n                'visible' => false,\n                'List' => array(array('\\Imldelivery\\Model\\DeliveryType\\Iml','staticGetServices')),\n                'ChangeSizeForList' => false,\n                'attr' => array(array(\n                    'size' => 16,\n                    'multiple' => true\n                ))\n            )),\n            'service_id' => new Type\\ArrayList(array(\n                'description' => t('Список всех услуг'),\n                'maxLength' => 1000,\n                'runtime' => false,\n                'attr' => array(array(\n                    'multiple' => true\n                )),\n                'template' => '%imldelivery%/form/delivery/iml/services_list.tpl',\n                'listFromArray' => array(array())\n            )),\n            'show_map' => new Type\\Integer(array(\n                'description' => t('Показывать карту'),\n                'maxLength' => 1,\n                'default' => 0,\n                'CheckboxView' => array(1,0),\n            )),\n            'timeout' => new Type\\Integer(array(\n                'description' => t('Время ожидания ответа IML, сек'),\n                'hint' => t('Иногда запросы к IML идут очень долго,<br/> чтобы не дожидатся ответа используется это значение.<br/>Рекоммендуемое значение 2 сек.'),\n                'default' => 2,\n            )),\n        ));\n        return new \\RS\\Orm\\FormObject($properties);\n    }\n\n    /**\n     * Справочник услуг\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetServices()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_SERVICES, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник регионов\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetRegions()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_REGION, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник состояний заказа\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetDeliveryStatuses()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_DELIVERYSTATUS, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник статусов заказа\n     *\n     * @return array [id]|string => [name]|string\n     */\n    static function staticGetOrderStatus()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_ORDERSTATUS, self::API_LOGIN, self::API_PASS);\n        return $iml->getHelpIdList($list);\n    }\n\n    /**\n     * Справочник пунктов самовывоза\n     *\n     * @return array\n     */\n    static function getSelfDeliveryList()\n    {\n        $iml = new Iml;\n        $list = $iml->getApiRequest(self::URL_HELP_SD, self::API_LOGIN, self::API_PASS);\n        return $list;\n    }\n    /**\n     * Получает массив регионов, в которых есть пункты самовывоза\n     *\n     * @return array [code] => [name]\n     */\n    static function getSdRegions(\\Shop\\Model\\Orm\\Order $order, $delivery_id = null, $params = array())\n    {\n        $iml = new Iml;\n        $arr = array();\n        $regions = $iml->staticGetRegions();\n        foreach ($iml->getSelfDeliveryList() as $sd_item) {\n            $code = $sd_item['RegionCode'];\n            $arr[$code] = $regions[$code];\n        }\n        return $arr;\n    }\n\n    /**\n     * Получает пункты самовывоза одного региона\n     *\n     * @param  string $params код региона из справочника\n     * @return array\n     */\n    static function getSdByRegion(\\Shop\\Model\\Orm\\Order $order, $delivery_id = null, $params = array())\n    {\n        $iml = new Iml;\n        $arr = array();\n        $regions = $iml->staticGetRegions();\n        $region = $params['region'];\n        foreach ($iml->getSelfDeliveryList() as $sd_item) {\n            if ($sd_item['RegionCode'] == $region) {\n                $arr[] = $sd_item;\n            }\n        }\n        return $arr;\n    }\n\n    public function getActiveServices()\n    {\n        $services = $this->getOption('service_id');\n        $servicesList = self::staticGetServices();\n        $arr = array();\n        if (is_array($services)) {\n            foreach ($services as $service) {\n                $arr[$service] = $servicesList[$service];\n            }\n        }\n        return $arr;\n    }\n\n    /**\n     * Добавляет доп данные в объект заказа\n     *\n     * @param array $params\n     */\n    public function updateExtraData(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        $extra = $order['order_extra'];\n        foreach ($params as $key => $value) {\n            $extra['delivery'][$key] = $value;\n        }\n\n        return $order['order_extra'] = array_merge($order['order_extra'], $extra);\n    }\n\n    /**\n     * Получает цену на доставку до пунктов самовывоза\n     *\n     * @param  array $params\n     * @return string|number\n     */\n    public function getDeliveryCostAjax(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        return self::getImlCost($order, $params);\n    }\n\n    /**\n     * Запрос базовой стоимости заказа у IML\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    public function getImlCost(\\Shop\\Model\\Orm\\Order $order, $params = array())\n    {\n        if ($params == array()) {\n	        $order_extra = $order['order_extra'];\n	        $imlData = isset($order_extra['delivery']) ? $order_extra['delivery'] : $order_extra['address'];\n        } else {\n        	$imlData = $params;\n        }\n\n        $cost = array();\n        foreach ($imlData['service_id'] as $code => $service) {\n            $content = array(\n                'Job' => $code,                 								// услуга\n                'RegionFrom' => $imlData['region_id_from'],     				// регион отправки\n                'RegionTo' => $imlData['region_id_to'],             			// регион получения\n                'Volume' => '1',                                            	// кол-во мест\n                'Weigth' => $order->getWeight() ? $order->getWeight() : '1',	// вес(кг)\n                'SpecialCode' => $imlData['request_code'],      				// код пункта самовывоза\n            );\n            $cost[$code] = self::postApiRequest(self::URL_API_GETPRICE, self::API_LOGIN, self::API_PASS, $content);\n        }\n        return $cost;\n    }\n\n\n    /**\n    * Возвращает стоимость доставки для заданного заказа. Только число.\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address - Адрес доставки\n    * @return double\n    */\n    public function getDeliveryCost(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null, $use_currency = true)\n    {\n        $cost = $this->getImlCost($order);\n        if (!is_array($cost)) return -1;\n        $cost_arr = array();\n        foreach ($cost as $code => $obj) {\n            $cost_arr[] = isset($obj['Price']) ? $obj['Price'] : true;\n        }\n        return min($cost_arr);\n    }\n\n    public function getDeliveryCostText(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        $cost = $this->getDeliveryCost($order, $address);\n        if ($cost < 0) {\n            return '';\n        } else {\n            return ($cost) ? \\RS\\Helper\\CustomView::cost($cost).' '.$order->getMyCurrency()->stitle : 'бесплатно';\n        }\n    }\n\n    /**\n     * Основной POST запрос к API. Вернет массив объектов\n     *\n     * @param  string         $url\n     * @param  string         $login\n     * @param  string         $pass\n     * @param  array          $content\n     * @return array\n     */\n    private function postApiRequest($url, $login, $pass, array $content = array())\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($content));\n        curl_setopt($curl, CURLOPT_USERPWD, $login.\":\".$pass);\n        curl_setopt($curl, CURLOPT_SSLVERSION, 3);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        $response = curl_exec($curl);\n        return json_decode($response, true);\n    }\n\n    /**\n     * Основной GET запрос к API. Вернет массив объектов\n     *\n     * @param  string         $url\n     * @param  string         $login\n     * @param  string         $pass\n     * @return array\n     */\n    private function getApiRequest($url, $login, $pass)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_USERPWD, $login.\":\".$pass);\n        curl_setopt($curl, CURLOPT_SSLVERSION, 3);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        $response = curl_exec($curl);\n        return json_decode($response, true); // результат запроса\n    }\n\n    /**\n     * Переделывает структуру массива для формы в админке\n     *\n     * @return array [id] => [name]\n     */\n    public function getHelpIdList($incomingData)\n    {\n        $arr = array();\n        foreach ($incomingData as $data) {\n            $arr[$data['Code']] = $data['Description'];\n        }\n        return $arr;\n    }\n\n    /**\n    * Возвращает дополнительный HTML для публичной части без плагина карты\n    *\n    * @return string\n    */\n    public function getAddittionalHtml(\\Shop\\Model\\Orm\\Delivery $delivery, \\Shop\\Model\\Orm\\Order $order = null)\n    {\n        if (!$order) {\n            $order = \\Shop\\Model\\Orm\\Order::currentOrder();\n        }\n        $currencyApi = new \\Catalog\\Model\\CurrencyApi();\n        $currency = ($order->getMyCurrency() != '') ? $order->getMyCurrency() : $currencyApi->getDefaultCurrency();\n        $extra = $order['order_extra'];\n        $region_id_to = $extra['delivery']['region_id_to'] ? $extra['delivery']['region_id_to'] : $extra['address']['region_id_to'];\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'region_id_to'       => $region_id_to,       //Регион куда\n            'region_id_from'     => $this->getOption('region_id_from'),         //Регион откуда\n            'service_ids'        => json_encode($this->getActiveServices()),    //Услуги этогй доставки\n            'delivery_cost_json' => json_encode($this->getImlCost($order)),     //Текущий объект цены доставки\n            'delivery_cost'      => $this->getImlCost($order),                  //Текущий объект цены доставки\n            'order'              => $order,                                     //Текущий недоофрмленный заказ\n            'currency'           => json_encode($currency->getValues()),       	//Текущий объект валюты\n            'delivery'           => $delivery,                                  //Текущий объект доставки\n            'user'               => \\RS\\Application\\Auth::getCurrentUser(),     //Текущий объект пользователя\n        ) + \\RS\\Module\\Item::getResourceFolders($this));\n\n        if ($this->getOption('show_map') == 1) {\n            return $view->fetch('%imldelivery%/delivery/iml/widget.tpl');\n        }\n\n    }\n\n    /**\n     * Возвращает адреса пунктов самовывоза для карты\n     */\n    static function loadMap(\\Shop\\Model\\Orm\\Order $order, $delivery_id, $params)\n    {\n        //return print_r($order->getDelivery()->getTypeObject());\n        $order_extra = $order['order_extra'];\n        $order['delivery'] = $delivery_id;\n        $delivery = $order->getDelivery();\n        $delivery_type = new Iml;\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'region_id_to'       => $order_extra['address']['region_id_to'],       //Регион куда\n            'service_ids'        => json_encode($delivery_type->getActiveServices()),             //Услуги этой доставки\n            'delivery_cost_json' => json_encode($delivery_type->getImlCost($order)),         //Текущий объект цены доставки\n            'delivery_cost'      => $delivery_type->getImlCost($order),         //Текущий объект цены доставки\n            'order'              => $order,                                 //Текущий недоофрмленный заказ\n            'delivery'           => $delivery,                              //Текущий объект доставки\n            'delivery_type'      => $delivery_type,                              //Текущий объект типа доставки\n            'user'               => \\RS\\Application\\Auth::getCurrentUser(), //Текущий объект пользователя\n        ) + \\RS\\Module\\Item::getResourceFolders($delivery_type));\n\n        return $view->fetch('%imldelivery%/delivery/iml/map.tpl');\n    }\n\n    /**\n    * Возвращает дополнительный HTML для административной части с выбором опций доставки в заказе\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - заказ доставки\n    * @return string\n    */\n    function getAdminAddittionalHtml(\\Shop\\Model\\Orm\\Order $order = null)\n    {\n        //Получим данные по товарам\n        $products = $order->getCart()->getProductItems();\n\n        if (empty($products)){\n            $this->addError(t('В заказ не добавлено ни одного товара'));\n        }\n\n        //Получим цену с параметрами по умолчанию\n        $cost     = $this->getDeliveryCostText($order);\n        $delivery = $order->getDelivery();\n        $service_id = $this->getOption('service_id');\n\n        $view = new \\RS\\View\\Engine();\n        $view->assign(array(\n            'errors'      => $this->getErrors(),\n            'order'       => $order,\n            'cost'        => $cost,\n            'extra_info'  => $order->getExtraKeyPair(),\n            'delivery'    => $delivery,\n            'service_id'  => $service_id,\n        )+ \\RS\\Module\\Item::getResourceFolders($this));\n\n        return $view->fetch(\"%imldelivery%/form/delivery/iml/iml_admin.tpl\");\n    }\n\n    /**\n    * Возвращает HTML виджет с краткой информацией заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlShortInfo(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'type' => 'short',\n         'title' => 'Краткие сведения заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет с информацией заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlInfo(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'full',\n         'title' => 'Сведения заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет с историей заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlHistory(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'history',\n         'title' => 'История заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Возвращает HTML виджет со статусом заказа для админки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    private function getHtmlStatus(\\Shop\\Model\\Orm\\Order $order)\n    {\n       $view = new \\RS\\View\\Engine();\n       $view->assign(array(\n         'public_api_js_url'  => self::PUBLIC_API_URL_JS,\n         'public_api_css_url' => self::PUBLIC_API_URL_CSS,\n         'api_key' => $this->getOption('admin_api',0),\n         'cultureId' => $this->getOption('language',self::DEFAULT_LANGUAGE_ID),\n         'type' => 'standard',\n         'title' => 'Статус заказа',\n         'order' => $order,\n         'delivery_type' => $this\n       ));\n       return $view->fetch('%imldelivery%/form/delivery/iml/iml_get_status.tpl');\n    }\n\n    /**\n    * Действие с запросами к заказу для получения дополнительной информации от доставки\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - объект заказа\n    */\n    function actionOrderQuery(\\Shop\\Model\\Orm\\Order $order)\n    {\n        $url = new \\RS\\Http\\Request();\n        $method = $url->request('method',TYPE_STRING,false);\n        switch ($method) {\n            case \"getInfo\": //Получение статуса заказа\n                return $this->getHtmlInfo($order);\n                break;\n            case \"getShortInfo\": //Получение статуса заказа\n                return $this->getHtmlShortInfo($order);\n                break;\n            case \"getHistory\": //Получение статуса заказа\n                return $this->getHtmlHistory($order);\n                break;\n            case \"getStatus\": //Получение статуса заказа\n            default:\n                return $this->getHtmlStatus($order);\n                break;\n        }\n    }\n\n    /**\n    * Возвращает дополнительный HTML для админ части в заказе\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order - заказ доставки\n    * @return string\n    */\n    function getAdminHTML(\\Shop\\Model\\Orm\\Order $order)\n    {\n        $view = new \\RS\\View\\Engine();\n\n        $view->assign(array(\n            'order' => $order,\n        ));\n\n        return $view->fetch(\"%imldelivery%/form/delivery/iml/iml_additional_html.tpl\");\n    }\n\n\n\n\n    /**\n     * Запрос получает статус и состояние заказа(ов)\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function getImlStatuses(array $filters = null)\n    {\n        $content = array(\n            'Test' => 'True',                       // для тестового режима, иначе не указывайте\n            'CustomerOrder' => '',                 // номер заказа\n            'BarCode' => '',                        // штрих код\n            'DeliveryDateStart' => '',               // фильтр по дате доставки, с указанной даты и позднее\n            'DeliveryDateEnd' => '',                // фильтр по дате доставки, до указанной даты\n            'State' => 999,                         // из справочника\n            'OrderStatus' => 0,                    // из справочника\n            'Job' => '',                          // из справочника услуг\n            'RegionFrom' => '',                   // фильтр по региону отправки\n            'RegionTo' => '',                       // фильтр по региону получения\n            'CreationDateStart' => '',              // фильтр по дате доставки, с указанной даты и позднее\n            'CreationDateEnd' => ''                 // фильтр по дате доставки, до указанной даты\n        );\n\n        return $this->postApiRequest(self::URL_API_STATUS, self::API_LOGIN, self::API_PASS, array_merge($content, $filters));\n    }\n\n    /**\n     * Запрос позволяет получить список заказов по параметрам\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function getImlOrders(array $filters = null)\n    {\n        $content =array(\n            'Test' => 'True', // для тестового режима, иначе не указывайте\n            //'CustomerOrder' => '',                 // номер заказа\n            //'BarCode' => '2624028597816',          // штрих код\n            //'DeliveryDateStart' => '2014-01-15',   // с указанной даты и позднее\n            //'DeliveryDateEnd' => '2014-07-15',     // до указанной даты\n            //'State' => 3                           // из справочника\n            //'OrderStatus' => 0,                    // из справочника\n            'Job' => 'С24КО', // из справочника услуг\n            //'RegionFrom' => 'МОСКВА',              // из справочника регионов\n            //'RegionTo' => 'МОСКВА',                // из справочника регионов\n            'CreationDateStart' => '2014-01-15' // с указанной даты и позднее\n            //'CreationDateEnd' => '2014-07-15'      // до указанной даты\n        );\n\n        return $this->postApiRequest(self::URL_API_ORDERSLIST, self::API_LOGIN, self::API_PASS, array_merge($content, ilters));\n    }\n\n    /**\n     * Запрос позволяет создать заказ в системе IML\n     *\n     * @param  array|null $filters\n     * @return array\n     */\n    function createImlOrder(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        if(!$address) $address = $order->getAddress();\n        $catalog_config = \\RS\\Config\\Loader::byModule('catalog');\n\n        $currency      = \\Catalog\\Model\\CurrencyApi::getBaseCurrency(); //Базовая валюта\n        $date          = date('c',strtotime($order['dateof'])); //Дата заказа\n        $delivery      = $order->getDelivery(); //объект доставки\n        $delivery_cost = $delivery->getDeliveryCost($order);\n        $payment       = $order->getPayment();\n        $user          = $order->getUser();\n        $extra         = $order->getExtraInfo();\n        $cartItemsArray    = array();\n\n        $cart     = $order->getCart();\n        $products = $cart->getProductItems();\n        $cartdata = $cart->getPriceItemsData();\n\n        $services = self::staticGetServices();\n\n        // Заполняем продукты\n        foreach ($products as $n => $item) {\n            $product           = $item['product'];\n            $barcode           = $product->getBarCode($item['cartitem']['offer']);\n            $offer_title       = $product->getOfferTitle($item['cartitem']['offer']);\n\n            $cartItemsArray[] = array(\n                'productNo'=> $barcode,\n                'productName' => $product->title,\n                'productVariant' => $offer_title,\n                'productBarCode' => '',\n                'couponCode' => '',\n                'discount' => $item->discount,\n                'weightLine' => $item->single_weight,\n                'amountLine' => $item->single_cost,\n                'statisticalValueLine' => '',\n                'itemQuantity' => $item['cartitem']['amount'],\n                'deliveryService' => FALSE\n            );\n        }\n\n        // Заполняем доставку\n        if ($delivery_cost > 0) {\n            $cartItemsArray[] = array(\n                'productNo'=> $extra['iml_service_id']['value'],\n                'productName' => $services[$extra['iml_service_id']['value']],\n                'productVariant' => '',\n                'productBarCode' => '',\n                'couponCode' => '',\n                'discount' => '',\n                'weightLine' => '',\n                'amountLine' => '',\n                'statisticalValueLine' => '',\n                'itemQuantity' => '',\n                'deliveryService' => TRUE\n            );\n        }\n\n        // Заполняем инфо о заказе\n        $content = array(\n            'Test' => 'True', // для тестового режима, иначе не указывайте\n            'CustomerOrder' => $user['id'] ? $user['id'] : $order['id'],\n            'Job' => $extra['iml_service_id']['value'], // из справочника услуг\n            'Contact' => $user['name'],\n            'RegionCodeFrom' => $this->getOption('region_id_from',0), // из справочника регионов\n            'RegionCodeTo' => $extra['iml_region_to']['value'], // из справочника регионов\n            'Address' => $address['address'],\n            'DeliveryPoint' => $extra['iml_request_code']['value'], // из справочника пунктов самовывоза\n            'Phone' => $user['phone'],\n            'Amount' => $order['totalcost'], // разделитель '.' (точка)\n            'ValuatedAmount' => '14.2', // разделитель '.' (точка)\n            'Weight' => $order->getWeight(), // разделитель '.' (точка)\n            'Comment' => $order['comments'],\n            'GoodItems' => $cartItemsArray      //не обязательно, если есть позиции заказа\n        );\n\n        return $this->postApiRequest(self::URL_API_CREATEORDER, self::API_LOGIN, self::API_PASS, $content);\n\n    }\n        //  Test – тестовый режим, 'True' для тестового режима, иначе не указывайте\n        //  Job – услуга доставки, Code из справочника услуг\n        //  CustomerOrder – номер заказа\n        //  DeliveryDate – дата доставки в строковом представлении, формат dd.MM.yyyy\n        //  Volume – количество мест\n        //  Weight – вес\n        //  BarCode – штрих код заказа в формате EAN-13\n        //  DeliveryPoint – пункта самовывоза, RequestCode из таблицы пунктов самовывоза\n        //  Phone – телефон\n        //  Contact – контактное лицо\n        //  RegionCodeFrom – региона отправления, Code из таблицы регионов\n        //  RegionCodeTo – код региона получения, Code из таблицы регионов\n        //  Address – адрес доставки\n        //  TimeFrom – начало временного периода доставки\n        //  TimeTo – конец временного периода доставки\n        //  Amount – сумма заказа\n        //  ValuatedAmount – оценочная стоимость заказа\n        //  Comment – комментарий\n        //  City – город доставки, для отправки почтой России\n        //  PostCode – индекс, для отправки почтой России\n        //  PostRegion – регион, для отправки почтой России\n        //  PostArea – район, для отправки почтой России\n        //  PostContentType – тип вложения (0 - Печатная, 1 - Разное, 2 - 1 Класс), для отправки почтой России\n\n    /**\n    * Функция срабатывает после создания заказа\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order     - объект заказа\n    * @param \\Shop\\Model\\Orm\\Address $address - Объект адреса\n    * @return void\n    */\n    // function onOrderCreate(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null) {\n    //     $extra = $order->getExtraInfo();\n    //     if (!isset($extra['iml_order_response'])){ // Если заказ не создан\n    //         //Создадим заказ\n    //         //$created_order = $this->createImlOrder($order,$address);\n    //         //Если ответа дождались, то запишем номер заказа\n    //         if ($created_order){\n    //             if ($created_order['Result'] == 'OK') {\n    //                 $order->addExtraInfoLine(\n    //                     'IML ответ на создание заказа',\n    //                     $created_order['Result'],\n    //                     $created_order['Order'],\n    //                     'iml_order_response'\n    //                 );\n    //             } elseif ($created_order['Result'] == 'Error') {\n    //                 $order->addExtraInfoLine(\n    //                     'IML ошибка создания заказа',\n    //                     $created_order['Result'],\n    //                     $created_order['Errors'],\n    //                     'iml_order_error'\n    //                 );\n    //             }\n    //         } else { //Иначе\n    //             $order->addExtraInfoLine(\n    //                 'IML API не отвечает',\n    //                 'Error',\n    //                 array(\n    //                     0 => 'Что-то с сетью'\n    //                 ),\n    //                 'iml_api_error'\n    //             );\n    //         }\n    //         //$extra = $order->getExtraInfo();\n    //     }\n\n    //     //Запишем данные в таблицу, чтобы не вызывать повторного сохранения\n    //     \\RS\\Orm\\Request::make()\n    //         ->update()\n    //         ->from(new \\Shop\\Model\\Orm\\Order())\n    //         ->set(array(\n    //             '_serialized' => serialize($order['extra'])\n    //         ))\n    //         ->where(array(\n    //             'id' => $order['id']\n    //     ))->exec();\n    // }\n\n}\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/imldelivery/model/deliverytype/iml.inc.php",
			"file_size": 35837,
			"file_write_time": 130996267370872176,
			"settings":
			{
				"buffer_size": 31575,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\nnamespace Shop\\Model\\DeliveryType;\n\n/**\n* Абстрактный класс типа доставки. Тип доставки содержит в себе функции для расчета стоимости\n* в зависимости от различных параметров заказа.\n*/\nabstract class AbstractType\n{\n    protected\n        $opt = array();\n\n    private\n        $errors = array();  // Ошибки доставки\n\n    function loadOptions(array $opt = null)\n    {\n        $this->opt = $opt;\n    }\n\n    /**\n    * Возвращает название расчетного модуля (типа доставки)\n    *\n    * @return string\n    */\n    abstract function getTitle();\n\n    /**\n    * Возвращает описание типа доставки\n    *\n    * @return string\n    */\n    abstract function getDescription();\n\n    /**\n    * Возвращает идентификатор данного типа доставки. (только англ. буквы)\n    *\n    * @return string\n    */\n    abstract function getShortName();\n\n    /**\n    * Возвращает стоимость доставки для заданного заказа. Только число.\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address - Адрес доставки\n    * @return double\n    */\n    abstract function getDeliveryCost(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null, $use_currency = true);\n\n    /**\n    * Возвращает дополнительную информацию о доставке (например сроки достави)\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address - Адрес доставки\n    * @return string\n    */\n    function getDeliveryExtraText(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null, $use_currency = true)\n    {\n    }\n\n    /**\n    * Возвращает текст, в случае если доставка невозможна. false - в случае если доставка возможна\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address - Адрес доставки\n    * @return mixed\n    */\n    function somethingWrong(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        return false;\n    }\n\n    /**\n    * Функция срабатывает после создания заказа\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order     - объект заказа\n    * @param \\Shop\\Model\\Orm\\Address $address - Объект адреса\n    * @return mixed\n    */\n    function onOrderCreate(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {}\n\n    /**\n    * Возвращает ORM объект для генерации формы или null\n    *\n    * @return \\RS\\Orm\\FormObject | null\n    */\n    function getFormObject()\n    {}\n\n    /**\n    * Возвращает дополнительный HTML для админ части в заказе\n    * @return string\n    */\n    function getAdminHTML(\\Shop\\Model\\Orm\\Order $order)\n    {\n        return \"\";\n    }\n\n    /**\n    * Действие с запросами к заказу для получения дополнительной информации от доставки\n    *\n    */\n    function actionOrderQuery(\\Shop\\Model\\Orm\\Order $order)\n    {}\n\n    /**\n    * Производит валидацию текущих данных в свойствах\n    */\n    function validate(\\Shop\\Model\\Orm\\Delivery $delivery)\n    {}\n\n    /**\n    * Возвращает значение доп. поля доставки\n    *\n    * @param string $key - ключ\n    * @param mixed $default - значение по умолчанию\n    */\n    function getOption($key = null, $default = null)\n    {\n        if ($key == null) return $this->opt;\n        return isset($this->opt[$key]) ? $this->opt[$key] : $default;\n    }\n\n    /**\n    * Устанавливает значение доп. поля доставки\n    *\n    * @param string $key_or_array\n    * @param mixed $value\n    */\n    function setOption($key_or_array = null, $value = null)\n    {\n        if (is_array($key_or_array)) {\n            $this->opt = $key_or_array + $this->opt;\n        } else {\n            $this->opt[$key_or_array] = $value;\n        }\n    }\n\n    /**\n    * Возвращает HTML форму данного типа доставки\n    *\n    * @return string\n    */\n    function getFormHtml()\n    {\n        if ($params = $this->getFormObject()) {\n            $params->getPropertyIterator()->arrayWrap('data');\n            $params->getFromArray((array)$this->opt);\n            $params->setFormTemplate(strtolower(str_replace('\\\\', '_', get_class($this))));\n            $module = \\RS\\Module\\Item::nameByObject($this);\n            $tpl_folder = \\Setup::$PATH.\\Setup::$MODULE_FOLDER.'/'.$module.\\Setup::$MODULE_TPL_FOLDER;\n\n            return $params->getForm(null, null, false, null, '%system%/coreobject/tr_form.tpl', $tpl_folder);\n        }\n    }\n\n    /**\n    * Возвращает дополнительный HTML для публичной части\n    *\n    * @return string\n    */\n    function getAddittionalHtml(\\Shop\\Model\\Orm\\Delivery $delivery, \\Shop\\Model\\Orm\\Order $order = null)\n    {\n        return '';\n    }\n\n    /**\n    * Возвращает дополнительный HTML для административной части\n    *\n    * @return string\n    */\n    function getAdminAddittionalHtml(\\Shop\\Model\\Orm\\Order $order = null)\n    {\n        return '';\n    }\n\n    /**\n    * Возвращает цену в текстовом формате, т.е. здесь может быть и цена и надпись, например \"Бесплатно\"\n    *\n    * @param \\Shop\\Model\\Orm\\Order $order\n    * @param \\Shop\\Model\\Orm\\Address $address\n    * @return string\n    */\n    function getDeliveryCostText(\\Shop\\Model\\Orm\\Order $order, \\Shop\\Model\\Orm\\Address $address = null)\n    {\n        $cost = $this->getDeliveryCost($order, $address);\n        return ($cost) ? \\RS\\Helper\\CustomView::cost($cost).' '.str_replace('р.', '<i class=\"fa fa-rub\"></i>', $order->getMyCurrency()->stitle) : 'бесплатно';\n    }\n\n    /**\n    * Переводит строку XML в форматированный XML\n    *\n    * @param string $xml_string - строка XML\n    */\n    function toFormatedXML($xml_string)\n    {\n       $dom = new \\DOMDocument('1.0');\n       $dom->preserveWhiteSpace = false;\n       $dom->formatOutput = true;\n       $dom->loadXML($xml_string);\n       return $dom->saveXML();\n    }\n\n    /**\n    * Возвращает ошибки в виде строки склеевая символами\n    *\n    * @param string $glue - символы для склеивания\n    * @return string\n    */\n    function getErrorsStr($glue = \", \")\n    {\n       return implode($glue,$this->errors);\n    }\n\n    /**\n    * Получает массив ошибок\n    *\n    * @return array\n    */\n    function getErrors()\n    {\n       return $this->errors;\n    }\n\n    /**\n    * Возвращает есть ошибки при работе метода или нет\n    *\n    * @return boolean\n    */\n    function hasErrors()\n    {\n       return count($this->errors);\n    }\n\n    /**\n    * Очищает ошибки доставки\n    *\n    */\n    function clearErrors()\n    {\n       $this->errors = array();\n    }\n\n    /**\n    * Добавляет ошибку в массив ошибок\n    *\n    * @param string $error_text - текст ошибки\n    */\n    function addError($error_text)\n    {\n        $this->errors[] = $error_text;\n    }\n\n}\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/abstracttype.my.inc.php",
			"file_size": 7938,
			"file_write_time": 130976358078266551,
			"settings":
			{
				"buffer_size": 6667,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".fuse_hidden00000c7a00000001",
			"settings":
			{
				"buffer_size": 8548,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\nnamespace Shop\\Controller\\Front;\nuse \\RS\\Application\\Auth as AppAuth;\n\n/**\n* Контроллер Оформление заказа\n*/\nclass Checkout extends \\RS\\Controller\\Front\n{\n    protected\n        $order_api,\n        /**\n        * @var \\Shop\\Model\\Orm\\Order\n        */\n        $order;\n\n    /**\n    * Инициализация контроллера\n    */\n    function init()\n    {\n        $this->app->title->addSection(t('Оформление заказа'));\n        $this->order = \\Shop\\Model\\Orm\\Order::currentOrder();\n        $this->order_api = new \\Shop\\Model\\OrderApi();\n\n        $this->order->clearErrors();\n        $this->view->assign('order', $this->order);\n    }\n\n\n    function actionIndex()\n    {\n        $this->order->clear();\n\n        //Замораживаем объект \"корзина\" и привязываем его к заказу\n        $frozen_cart = \\Shop\\Model\\Cart::preOrderCart(null);\n        $frozen_cart->splitSubProducts();\n        $frozen_cart->mergeEqual();\n\n        $this->order->linkSessionCart($frozen_cart);\n        $this->order->setCurrency( \\Catalog\\Model\\CurrencyApi::getCurrentCurrency() );\n\n        $this->order['ip'] = $_SERVER['REMOTE_ADDR'];\n        $this->order['warehouse'] = 0;\n\n        $this->order['expired'] = false;\n        $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'address')));\n    }\n\n    /**\n    * Шаг 1. Установка адреса и контактов\n    */\n    function actionAddress()\n    {\n        if ( !$this->order->getCart() ) $this->redirect();\n        $this->app->title->addSection(t('Адрес и контакты'));\n        $captcha_config = \\RS\\Config\\Loader::byModule('kaptcha');\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                ->addBreadCrumb(t('Корзина'), $this->router->getUrl('shop-front-cartpage'))\n                ->addBreadCrumb(t('Адрес и контакты'));\n\n        $logout      = $this->url->request('logout', TYPE_BOOLEAN);\n        $login       = $this->url->request('ologin', TYPE_BOOLEAN); //Предварительная авторизация\n\n\n        if ($logout) {\n            AppAuth::logout();\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'address')));\n        }\n\n        $this->order['__code']->setEnable(false);\n        if (AppAuth::isAuthorize()) {\n            $this->order['user_type'] = null;\n            $this->order['__code']->setEnable(false);\n        } else {\n            if ($captcha_config['enabled']){\n                $this->order['__code']->setEnable(true);\n            }\n\n            if (empty($this->order['user_type'])) {\n                $this->order['user_type'] = 'person';\n                $this->order['reg_autologin'] = 1;\n            }\n        }\n\n        $cart_data = $this->order['basket'] ? $this->order->getCart()->getCartData() : null;\n        if ($cart_data === null || !count($cart_data['items']) || $cart_data['has_error'] || $this->order['expired']) {\n            //Если корзина пуста или заказ уже оформлен или имеются ошибки в корзине, то выполняем redirect на главную сайта\n            $this->redirect();\n        }\n\n\n        //Запрашиваем дополнительные поля формы заказа, если они определены в конфиге модуля\n        $order_fields_manager  = $this->order->getFieldsManager();\n        $order_fields_manager->setValues($this->order['userfields_arr']);\n\n        //Запрашиваем дополнительные поля формы регистрации, если они определены\n        $reg_fields_manager = \\RS\\Config\\Loader::byModule('users')->getUserFieldsManager();\n        $reg_fields_manager->setErrorPrefix('regfield_');\n        $reg_fields_manager->setArrayWrapper('regfields');\n        if (!empty($this->order['regfields'])) $reg_fields_manager->setValues($this->order['regfields']);\n\n\n\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'address', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'address');\n            $work_fields = $this->order->useFields( $sysdata + $_POST );\n\n            $this->order->setCheckFields($work_fields);\n            $this->order->checkData($sysdata, null, null, $work_fields);\n            $this->order['userfields'] = serialize($this->order['userfields_arr']);\n\n            //Авторизовываемся\n            if ($this->order['user_type'] == 'user' && !$logout) {\n                if (!\\RS\\Application\\Auth::login($this->order['login'], $this->order['password'])) {\n                    $this->order->addError('Неверный логин или пароль', 'login');\n                } else {\n                    $this->order['user_type'] = '';\n                    $this->order['__code']->setEnable(false);\n                }\n            }\n\n\n            if (!$logout && !$login) {\n\n                //Проверяем пароль, если пользователь решил задать его вручную. (при регистрации)\n                if (in_array($this->order['user_type'], array('person', 'company')) && !$this->order['reg_autologin']) {\n                    if (($pass_err = \\Users\\Model\\Orm\\User::checkPassword($this->order['reg_openpass'])) !== true) {\n                        $this->order->addError($pass_err, 'reg_openpass');\n                    }\n\n\n                    if(strcmp($this->order['reg_openpass'], $this->order['reg_pass2'])){\n                        $this->order->addError('Пароли не совпадают', 'reg_openpass');\n                    }\n\n\n                    //Сохраняем дополнительные сведения о пользователе\n                    $uf_err = $reg_fields_manager->check($this->order['regfields']);\n                    if (!$uf_err) {\n                        //Переносим ошибки в объект order\n                        foreach($reg_fields_manager->getErrors() as $form=>$errortext) {\n                            $this->order->addError($errortext, $form);\n                        }\n                    }\n                }\n\n                //Регистрируем пользователя, если нет ошибок\n                if (in_array($this->order['user_type'], array('person', 'company'))) {\n\n                    $new_user = new \\Users\\Model\\Orm\\User();\n                    $allow_fields = array('reg_name', 'reg_surname', 'reg_midname', 'reg_phone', 'reg_e_mail',\n                                            'reg_openpass', 'reg_company', 'reg_company_inn');\n                    $reg_fields = array_intersect_key($this->order->getValues(), array_flip($allow_fields));\n\n                    $new_user->getFromArray($reg_fields, 'reg_');\n                    $new_user['data'] = $this->order['regfields'];\n                    $new_user['is_company'] = (int)($this->order['user_type'] == 'company');\n\n                    if (!$new_user->validate()) {\n                        foreach($new_user->getErrorsByForm() as $form => $errors) {\n                            $this->order->addErrors($errors, 'reg_'.$form);\n                        }\n                    }\n\n                    if (!$this->order->hasError()) {\n                        if ($this->order['reg_autologin']) {\n                            $new_user['openpass'] = \\RS\\Helper\\Tools::generatePassword(6);\n                        }\n\n                        if ($new_user->create()) {\n                            if (AppAuth::login($new_user['login'], $new_user['pass'], true, true)) {\n                                $this->order['user_type'] = ''; //Тип регитрации - не актуален после авторизации\n                                $this->order['__code']->setEnable(false);\n                            } else {\n                                throw new \\RS\\Exception('Не удалось авторизоваться под созданным пользователем.');\n                            }\n                        } else {\n                            $this->order->addErrors($new_user->getErrorsByForm('e_mail'), 'reg_e_mail');\n                            $this->order->addErrors($new_user->getErrorsByForm('login'), 'reg_login');\n                        }\n                    }\n                }\n\n                //Если заказ без регистрации пользователя\n                if ($this->order['user_type'] == 'noregister') {\n                   //Получим данные\n                   $this->order['user_fio']   = $this->request('user_fio', TYPE_STRING);\n                   $this->order['user_email'] = $this->request('user_email', TYPE_STRING);\n                   $this->order['user_phone'] = $this->request('user_phone', TYPE_STRING);\n\n                   //Проверим данные\n                   if (empty($this->order['user_fio'])){\n                       $this->order->addError(t('Укажите, пожалуйста, Ф.И.О.'), 'user_fio');\n                   }\n                   if (!filter_var($this->order['user_email'], FILTER_VALIDATE_EMAIL)){\n                       $this->order->addError(t('Укажите, пожалуйста, E-mail'), 'user_email');\n                   }\n                }\n\n                //Сохраняем дополнительные сведения\n                $uf_err = $order_fields_manager->check($this->order['userfields_arr']);\n                if (!$uf_err) {\n                    //Переносим ошибки в объект order\n                    foreach($order_fields_manager->getErrors() as $form=>$errortext) {\n                        $this->order->addError($errortext, $form);\n                    }\n                }\n\n                //Сохраняем адрес\n                if (!$this->order->hasError() && $this->order['use_addr'] == 0) {\n                    $address = new \\Shop\\Model\\Orm\\Address();\n                    $address->getFromArray($this->order->getValues(), 'addr_');\n                    $address['user_id'] = AppAuth::getCurrentUser()->id;\n                    if ($address->insert()) {\n                        $this->order['use_addr'] = $address['id'];\n                    }\n                }\n\n                //Все успешно\n                if (!$this->order->hasError()) {\n                    $this->order['user_id'] = AppAuth::getCurrentUser()->id;\n                    $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'delivery')));\n                }\n            } //!logout && !login\n\n\n        } //POST\n\n\n\n        $user = AppAuth::getCurrentUser();\n        if (AppAuth::isAuthorize()) {\n            //Получаем список адресов пользователя\n            $address_api = new \\Shop\\Model\\AddressApi();\n            $address_api->setFilter('user_id', $user['id']);\n            $address_api->setFilter('deleted', 0);\n            $addr_list = $address_api->getList();\n            if (count($addr_list)>0 && $this->order['use_addr'] === null) {\n                $this->order['use_addr'] = $addr_list[0]['id'];\n            }\n            $this->view->assign('address_list', $addr_list);\n        }\n\n        if ($logout) {\n            $this->order->clearErrors();\n        }\n\n        if ($login) { //Покажем только ошибки авторизации, остальные скроем\n            $login_err = $this->order->getErrorsByForm('login');\n            $this->order->clearErrors();\n            if (!empty($login_err)) $this->order->addErrors($login_err, 'login');\n        }\n\n        $this->order['password']     = '';\n        $this->order['reg_openpass'] = '';\n        $this->order['reg_pass2']    = '';\n\n        $this->view->assign(array(\n            'is_auth'         => AppAuth::isAuthorize(),\n            'order'           => $this->order,\n            'order_extra'     => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n            'user'            => $user,\n            'conf_userfields' => $order_fields_manager,\n            'reg_userfields'  => $reg_fields_manager,\n        ));\n\n        return $this->result->setTemplate( 'checkout/address.tpl' );\n    }\n\n    /**\n    * Шаг 2. Выбор доставки\n    */\n    function actionDelivery()\n    {\n        if ($this->getModuleConfig()->hide_delivery) { //Если нужно проскочить шаг доставка\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n        }\n\n        $this->app->title->addSection(t('Выбор доставки'));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'), $this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )))\n                    ->addBreadCrumb(t('Выбор доставки'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n        $my_type = $this->user['is_company'] ? 'company' : 'user';\n        $delivery_api = new \\Shop\\Model\\DeliveryApi();\n\n\n\n        //Получим все зоны\n        $zone_api = new \\Shop\\Model\\ZoneApi();\n        $zones    = $zone_api->getZonesByRegionId($this->order->getAddress()->region_id, $this->order->getAddress()->country_id);\n\n        $delivery_api->setFilter('public', 1);\n        $delivery_api->setFilter('user_type', array('all', $my_type), 'in');\n        $delivery_api->setZoneFilter($zones);\n\n        $cartdata = $this->order->getCart()->getCartData(false);\n        //Проверим условие минимальной цены\n        $delivery_api->setFilter(array(\n            array(\n                'min_price' => 0,\n                '|min_price:<=' => $cartdata['total'],\n            )\n        ));\n        //Проверим условие максимальной цены\n        $delivery_api->setFilter(array(\n            array(\n                'max_price' => 0,\n                '|max_price:>' => $cartdata['total'],\n            )\n        ));\n        //Проверим условие минимального количества товаров\n        $delivery_api->setFilter(array(\n            array(\n                'min_cnt' => 0,\n                '|min_cnt:<=' => $cartdata['items_count'],\n            )\n        ));\n        $delivery_list = $delivery_api->getList();\n\n        $this->view->assign(array(\n            'delivery_list' => $delivery_list\n        ));\n\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'delivery', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n\n            //Проверим параметры выбора доставки\n            $sysdata = array('step' => 'delivery');\n            $work_fields = $this->order->useFields($sysdata + $this->url->getSource(POST));\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n                $delivery       = $this->order->getDelivery(); //Выбранная доставка\n                $delivery_extra = $this->request('delivery_extra',TYPE_ARRAY,false);\n                if ($delivery_extra){\n                    $this->order->addExtraKeyPair('delivery_extra',$delivery_extra);\n                }\n\n                if ($delivery['class'] == 'myself'){ //Если самовывоз и складов больше одного\n                   $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'warehouses')));\n                }else{\n                   $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n                }\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/delivery.tpl' );\n    }\n\n    /**\n    * Шаг 2.2 Страница выбора склада откуда забирать\n    * Используется только когда складов более одного\n    * и выбран способ доставки \"Самовывоз\"\n    *\n    */\n    function actionWarehouses()\n    {\n        $this->app->title->addSection(t('Выбор склада для забора товара'));\n\n        $warehouse_api = new \\Catalog\\Model\\WareHouseApi();\n        \\RS\\Event\\Manager::fire('order.getwarehouses', array('warehouse_api' => $warehouse_api));\n        $warehouses = $warehouse_api->setFilter('checkout_public', 1)->getList();\n\n        if (count($warehouses) < 2){\n            if (count($warehouses) == 1) {\n                //Если склад только один, то пропускаем выбор склада\n                $this->order['warehouse'] = $warehouses[0]['id'];\n            }\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n        }\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )))\n                    ->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )))\n                    ->addBreadCrumb(t('Выбор склада'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n\n        $this->view->assign(array(\n            'warehouses_list' => $warehouses\n        ));\n\n        if ($this->url->isPost()){\n            $this->order_api->addOrderExtraDataByStep($this->order, 'warehouses', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'warehouses');\n            $work_fields = $this->order->useFields($sysdata + $this->url->getSource(POST));\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n               $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/warehouse.tpl' );\n    }\n\n\n    /**\n    * Шаг 3. Выбор оплаты\n    */\n    function actionPayment()\n    {\n        $this->app->title->addSection(t('Выбор оплаты'));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )));\n        if (!$this->getModuleConfig()->hide_delivery) {\n                    $this->app->breadcrumbs->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )));\n        }\n        $this->app->breadcrumbs->addBreadCrumb(t('Выбор оплаты'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n        $my_type = $this->user['is_company'] ? 'company' : 'user';\n        $pay_api = new \\Shop\\Model\\PaymentApi();\n        $pay_api->setFilter('public', 1);\n        $pay_api->setFilter('user_type', array('all', $my_type), 'in');\n        $pay_api->setFilter('target', array('all', 'orders'), 'in');\n\n        $this->view->assign(array(\n            'pay_list' => $pay_api->getPaymentsList($this->order)\n        ));\n\n        //Найдём оплату по умолчанию, если оплата не была задана раннее\n        if (!$this->order['payment']){\n            $pay_api->setFilter('default_payment', 1);\n            $default_payment = $pay_api->getFirst($this->order);\n            if ($default_payment){\n                $this->order['payment'] = $default_payment['id'];\n            }\n        }\n\n        if ($this->getModuleConfig()->hide_payment) { //Если нужно проскочить шаг оплата\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'confirm')));\n        }\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'pay', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'pay');\n            $work_fields = $this->order->useFields($sysdata + $_POST);\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n                $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'confirm')));\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/payment.tpl' );\n    }\n\n    /**\n    * Шаг 4. Подтверждение заказа\n    */\n    function actionConfirm()\n    {\n        $this->app->title->addSection(t('Подтверждение заказа'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n\n        $basket = $this->order->getCart();\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )));\n        if (!$this->getModuleConfig()->hide_delivery) {\n            $this->app->breadcrumbs->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )));\n        }\n        if (!$this->getModuleConfig()->hide_payment) {\n            $this->app->breadcrumbs->addBreadCrumb(t('Выбор оплаты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'payment'\n                    )));\n        }\n        $this->app->breadcrumbs->addBreadCrumb(t('Подтверждение заказа'));\n\n        $this->view->assign(array(\n            'cart' => $basket\n        ));\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'confirm', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n\n            $this->order->clearErrors();\n            if ($this->getModuleConfig()->require_license_agree && !$this->url->post('iagree', TYPE_INTEGER)) {\n                $this->order->addError(t('Подтвердите согласие с условиями предоставления услуг'));\n            }\n\n            $sysdata = array('step' => 'confirm');\n            $work_fields = $this->order->useFields($sysdata + $_POST);\n\n            $this->order->setCheckFields($work_fields);\n            if (!$this->order->hasError() && $this->order->checkData($sysdata, null, null, $work_fields)) {\n                $this->order['is_payed'] = 0;\n                $this->order['delivery_new_query'] = 1;\n                $this->order['payment_new_query'] = 1;\n\n                echo '<pre>';\n                var_dump($this->order->insert());\n                die;\n\n                //Создаем заказ в БД\n                if ($this->order->insert()) {\n                    $this->order['expired'] = true; //заказ уже оформлен. больше нельзя возвращаться к шагам.\n                    \\Shop\\Model\\Cart::currentCart()->clean(); //Очищаем корзиу\n                    $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'finish')));\n                }\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/confirm.tpl' );\n    }\n\n    /**\n    * Шаг 5. Создание заказа\n    */\n    function actionFinish()\n    {\n        $this->app->title->addSection(t('Заказ №%0 успешно оформлен',array($this->order->order_num)));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'))\n                    ->addBreadCrumb(t('Адрес и контакты'))\n                    ->addBreadCrumb(t('Выбор доставки'))\n                    ->addBreadCrumb(t('Выбор оплаты'))\n                    ->addBreadCrumb(t('Завершение заказа'));\n\n        $this->view->assign(array(\n            'cart' => $this->order->getCart(),\n            'alt' => 'alt',\n            'statuses' => \\Shop\\Model\\UserStatusApi::getStatusIdByType()\n        ));\n\n        return $this->result->setTemplate( 'checkout/finish.tpl' );\n    }\n\n    /**\n    * Выполняет пользовательский статический метод у типа оплаты или доставки,\n    * если таковой есть у типа доставки\n    */\n    function actionUserAct()\n    {\n        $module   = $this->request('module',TYPE_STRING, 'Shop'); //Имя модуля\n        $type_obj = $this->request('typeObj',TYPE_INTEGER,0);     //0 - доставка (DeliveryType), 1 - оплата (PaymentType)\n        $type_id  = $this->request('typeId',TYPE_INTEGER,0);      //id доставки или оплаты\n        $class    = $this->request('class',TYPE_STRING,false);    //Класс для обращения\n        $act      = $this->request('userAct',TYPE_STRING,false);  //Статический метод который нужно вызвать\n        $params   = $this->request('params',TYPE_ARRAY,array());  //Дополнительные параметры для передачи в метод\n\n        if ($module && $act && $class){\n           $typeobj = \"DeliveryType\";\n           if ($type_obj == 1){\n              $typeobj = \"PaymentType\";\n           }\n\n           $delivery = '\\\\'.$module.'\\Model\\\\'.$typeobj.'\\\\'.$class;\n           $data = $delivery::$act($this->order, $type_id, $params);\n\n           if (!$this->order->hasError()){\n              return $this->result->setSuccess(true)\n                     ->addSection('data',$data);\n           }else{\n              return $this->result->setSuccess(false)\n                    ->addEMessage($this->order->getErrorsStr());\n           }\n        }else{\n           return $this->result->setSuccess(false)\n                    ->addEMessage('Не установлен метод или объект доставки или оплаты');\n        }\n    }\n\n    /**\n    * Удаление адреса при оформлении заказа\n    */\n    function actionDeleteAddress()\n    {\n        $id = $this->url->request('id', TYPE_INTEGER, 0); //id адреса доставки\n        if ($id){\n           $address = new \\Shop\\Model\\Orm\\Address($id);\n           if ($address['user_id'] == $this->user['id']) {\n               $address['deleted'] = 1;\n               $address->update();\n               return $this->result->setSuccess(true);\n           }\n        }\n        return $this->result->setSuccess(false);\n    }\n}\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/controller/front/checkout.inc.php",
			"file_size": 28847,
			"file_write_time": 130996265943630534,
			"settings":
			{
				"buffer_size": 26305,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\nnamespace Shop\\Model\\Orm;\nuse \\RS\\Orm\\Type,\n    \\Catalog\\Model\\Orm\\Product;\n\n/**\n* ORM Объект - заказ.\n*/\nclass Order extends \\RS\\Orm\\OrmObject\n{\n    const\n        ACL_WRITE_ORDER_BIT = 2,\n        ORDER_SESS_VAR = 'ORDER-ORMOBJECT';    \n        \n    protected \n        $use_generated_order_num = null, //Флаг использовать уникальный номер заказа\n        $products_hash = null, //хэш от товаров в заказе\n        $this_before_write;\n    \n    public\n        $address,\n        $order_cart,\n        $session_cart;\n    \n    protected static\n        $currency,\n        $table = 'order';\n    \n    function _init()\n    {\n        $properties = parent::_init()\n            ->groupSet('condition', array('step' => 'init'))\n            ->append(array(\n                'site_id' => new Type\\CurrentSite(),\n                'order_num' => new Type\\String(array(\n                    'maxLength' => '20',\n                    'description' => t('Уникальный идентификатор номера заказа'),\n                )),\n                'step' => new Type\\Mixed(array(\n                )),\n                'user_id' => new Type\\User(array(\n                    'maxLength' => '11',\n                    'attr' => array(array(\n                        'data-autocomplete-body' => '1'\n                    )),\n                    'description' => t('ID покупателя'),\n                )),\n                'basket' => new Type\\Mixed(array(\n                    'description' => t('Объект - корзина'),\n                )),\n                'currency' => new Type\\String(array(\n                    'maxLength' => '5',\n                    'description' => t('Трехсимвольный идентификатор на момент оформления заказа'),\n                )),\n                'currency_ratio' => new Type\\Float(array(\n                    'description' => t('Курс относительно базововй валюты')\n                )),\n                'currency_stitle' => new Type\\String(array(\n                    'description' => t('Символ валюты'),\n                    'maxLength' => 10\n                )),\n                'ip' => new Type\\String(array(\n                    'maxLength' => '15',\n                    'description' => t('IP'),\n                )),\n                'notify_user' => new Type\\Integer(array(\n                    'runtime' => true,\n                    'description' => t('Уведомлять пользователя об изменении в заказе')\n                )),\n        \n            //Подтверждение\n                'dateof' => new Type\\Datetime(array(\n                    'description' => t('Дата заказа'),\n                )),\n                'totalcost' => new Type\\Decimal(array(\n                    'maxLength' => '15',\n                    'decimal' => 2,\n                    'description' => t('Общая стоимость'),\n                )),\n                'user_delivery_cost' => new Type\\Decimal(array(\n                    'maxLength' => '15',\n                    'decimal' => 2,\n                    'description' => t('Стоимость доставки, определенная администратором'),\n                )),\n                'is_payed' => new Type\\Integer(array(\n                    'maxLength' => '1',\n                    'description' => t('Заказ полностью оплачен?'),\n                    'CheckBoxView' => array(1,0),\n                )),\n                'status' => new Type\\Integer(array(\n                    'maxLength' => '11',\n                    'description' => t('Статус'),\n                    'index' => true,\n                )),\n                'admin_comments' => new Type\\Text(array(\n                    'description' => t('Комментарии администратора (не отображаются пользователю)'),\n                    'Attr' => array(array('class' => 'fullwide')),\n                )),\n                'user_text' => new Type\\Richtext(array(\n                    'description' => t('Текст для покупателя'),\n                    'Attr' => array(array('class' => 'fullwide'))\n                )),\n                '_serialized' => new Type\\Text(),\n                'userfields' => new Type\\Text(array(\n                    'description' => t('Дополнительные сведения'),\n                    'condition' => array('step' => 'address'),\n                    'visible' => false\n                )),                            \n                'extra' => new Type\\ArrayList(array(\n                    'visible' => false\n                )),\n                'hash' => new Type\\String(array(\n                    'maxLength' => '32',\n                )),\n                'expired' => new Type\\Mixed(),                \n                'is_exported' => new Type\\Integer(array(\n                    'maxLength' => '1',\n                    'default' => 0,\n                    'description' => t('Выгружен ли заказ'),\n                    'visible' => false\n                )),\n        ))->cancelGroupSet();\n        \n        $this->addIndex(array('site_id', 'order_num'),self::INDEX_UNIQUE);\n        \n        $chk_depend = array(__CLASS__, 'chkDepend');\n        \n        \n        //поля для регистрации пользователя\n        $chk_condition = array(\n            'user_type' => array('person', 'company'),\n            'step' => 'address'\n        );        \n        \n        $properties\n            ->append(array(\n                'user_type' => new Type\\String(array(\n                    'maxLength' => '30',\n                    'condition' => array('step' => 'address'),\n                    'runtime' => true\n                ))\n            ))\n            ->groupSet('condition', $chk_condition)\n            ->groupSet('runtime', true)\n            ->append(array(    \n                'reg_name' => new Type\\String(array(\n                    'description' => t('Имя'),\n                    'maxLength' => '200',\n                )),\n                'reg_surname' => new Type\\String(array(\n                    'description' => t('Фамилия'),\n                    'maxLength' => '200',\n                )),\n                'reg_midname' => new Type\\String(array(\n                    'description' => t('Отчество'),\n                    'maxLength' => '200',\n                )),\n                'reg_phone' => new Type\\String(array(\n                    'description' => t('Телефон'),\n                    'maxLength' => '100',\n                )),\n                'reg_e_mail' => new Type\\String(array(\n                    'description' => t('E-mail'),\n                    'maxLength' => '100',\n                )),\n                'reg_autologin' => new Type\\Integer(array(\n                    'maxLength' => '1',\n                    'CheckBoxView' => array(1,0),\n                )),\n                'reg_login' => new Type\\String(array(\n                    'description' => t('Логин'),\n                    'maxLength' => '70',\n                )),\n                'reg_openpass' => new Type\\String(array(\n                    'description' => t('Пароль'),\n                    'maxLength' => '70',\n                    'attr' => array(array('type' => 'password')),\n                )),\n                'reg_pass2' => new Type\\String(array(\n                    'maxLength' => '70',\n                    'attr' => array(array('type' => 'password')),\n                )),\n                'regfields' => new Type\\ArrayList(array(\n                    'description' => t('Дополнительные сведения'),\n                ))\n            ));\n            \n            \n        // поля для регистрации предприятия\n        $chk_condition = array(\n            'user_type' => 'company',\n            'step' => 'address'\n        );\n        $properties\n            ->groupSet('condition', $chk_condition)\n            ->append(array(\n                'reg_company' => new Type\\String(array(\n                    'maxLength' => '255',\n                )),\n                'reg_company_inn' => new Type\\String(array(\n                    'maxLength' => '50'\n                )),\n            ));\n            \n        \n        // поля для авторизации пользователя\n        $chk_condition = array(\n            'user_type' => 'user',\n            'step' => 'address'\n        );\n        $properties\n            ->groupSet('condition', $chk_condition)            \n            ->append(array(\n                'login' => new Type\\String(array(\n                    'maxLength' => '100',\n                )),\n                'password' => new Type\\String(array(\n                    'maxLength' => '100',\n                    'Attr' => array(array('type' => 'password')),\n                ))\n            ))\n            ->cancelGroupSet();\n        \n        // Поля для адреса доставки\n        $properties\n            ->append(array(\n                'contact_person' => new Type\\String(array(\n                    'maxLength' => '255',\n                    'description' => t('Контактное лицо'),\n                    'condition' => array('step' => 'address'),\n                )),\n                'use_addr' => new Type\\Integer(array(\n                    'maxLength' => '11',\n                    'description' => t('ID адреса доставки'),\n                    'condition' => array('step' => 'address'),\n                ))\n            ));\n\n        $chk_condition = array(\n            'use_addr' => '0',\n            'step' => 'address'\n        );\n        \n        $properties\n            ->groupSet('condition', $chk_condition)\n            ->groupSet('runtime', true)\n            ->append(array(\n                'addr_country_id' => new Type\\String(array(\n                    'maxLength' => '100',\n                    'description' => t('Страна'),\n                    'Checker' => array('chkEmpty', t('Страна - обязательное поле')),\n                    'List' => array(array('\\Shop\\Model\\RegionApi', 'countryList')),\n                    'Attr' => array(array('size' => 1)),\n                )),\n                'addr_region' => new Type\\String(array(\n                    'maxLength' => '100',\n                )),\n                'addr_region_id' => new Type\\String(array(\n                    'maxLength' => '100',\n                    'description' => t('Область/Край'),\n                    'List' => array(array(__CLASS__, 'regionList')),\n                    'Attr' => array(array('size' => 1)),\n                )),\n                'addr_city' => new Type\\String(array(\n                    'maxLength' => '100',\n                    'description' => t('Город'),\n                    'Checker' => array('chkEmpty', t('Город - обязательное поле')),\n                )),\n                'addr_zipcode' => new Type\\String(array(\n                    'maxLength' => '20',\n                    'description' => t('Индекс'),\n                )),\n                'addr_address' => new Type\\String(array(\n                    'maxLength' => '255',\n                    'description' => t('Адрес'),\n                    'Checker' => array(function($object, $value, $error) \n                    {\n                        $config = \\RS\\Config\\Loader::byModule($object);\n                        if ($config['require_address'] && empty($value)) {\n                            return $error;\n                        }\n                        return true;\n                    }, 'Адрес - обязательное поле'),\n                ))\n            ))->cancelGroupSet();\n\n        $properties->append(array(\n            'userfields_arr' => new Type\\ArrayList(array(\n                'description' => t('Дополнительные сведения'),\n                'condition' => array('step' => 'address'),\n            )),\n            'code' => new Type\\Captcha(array(\n                'condition' => array('step' => 'address'),\n            )),\n            \n        //Шаг 2\n            'delivery' => new Type\\Integer(array(\n                'maxLength' => '11',\n                'description' => t('Доставка'),\n                'condition' => array('step' => 'delivery'),\n                'Checker' => array('chkEmpty', 'Укажите тип доставки'),\n                'List' => array(array('\\Shop\\Model\\DeliveryApi', 'staticSelectList')),     \n\n            )),\n            'deliverycost' => new Type\\Decimal(array(\n                'maxLength' => '15',\n                'decimal' => 2,\n                'description' => t('Стоимость доставки'),\n                'condition' => array('step' => 'delivery'),\n            )),\n            \n        //Шаг 2.2 - только при самовывозе\n            'warehouse' => new Type\\Integer(array(\n                'maxLength' => '11',\n                'description' => t('Склад'),\n                'condition' => array('step' => 'warehouses'),\n                'Checker' => array('chkEmpty', 'Укажите склад для забора товара'),\n                'List' => array(array('\\Catalog\\Model\\WarehouseApi', 'staticSelectList')),     \n            )),\n            \n        //Шаг 3\n            'payment' => new Type\\Integer(array(\n                'description' => t('Тип оплаты'),\n                'condition' => array('step' => 'pay'),\n                'Checker' => array('chkEmpty', 'Укажите способ оплаты'),\n                'List' => array(array('\\Shop\\Model\\PaymentApi', 'staticSelectList')),     \n            )),\n            \n        //Шаг 4\n            'comments' => new Type\\Text(array(\n                'description' => t('Комментарий'),\n                'condition' => array('step' => 'confirm')\n            )),\n\n        ));\n        \n        //Поля для заказа без авторизации или регистрации\n        $properties->append(array(\n            'user_fio' => new Type\\String(array(\n                'description' => t('Ф.И.О.'),\n                'Attr' => array(array(\n                    'size' => 40,\n                )),\n                'maxLength' => 255\n            )),\n            'user_email' => new Type\\String(array(\n                'description' => t('E-mail'),\n                'Attr' => array(array(\n                    'size' => 40,\n                )),\n                'maxLength' => 255\n            )),\n            'user_phone' => new Type\\String(array(\n                'description' => t('Телефон'),\n                'Attr' => array(array(\n                    'size' => 40,\n                )),\n                'maxLength' => 255\n            )),\n        ));\n        \n        $this->setWriteBit(self::ACL_WRITE_ORDER_BIT);        \n    }\n    \n    \n    /**\n    * Функция срабатывает перед записью заказа\n    * \n    * @param string $flag - insert или update\n    * @return void\n    */\n    function beforeWrite($flag)\n    {\n        $this->this_before_write = new Order($this['id'], false);\n        \n        if ($this['id'] < 0) {\n            $this['_tmpid'] = $this['id'];\n            unset($this['id']);\n        }\n        \n        $config = \\RS\\Config\\Loader::byModule($this);\n        \n        //Проверка уникального идентификатора номера заказа\n        if (empty($this['order_num']) && $config['use_generated_order_num']) {\n            $api = new \\Shop\\Model\\OrderApi();\n            $this['order_num'] = $api->generateOrderNum($this);\n        }     \n\n        if ($flag == self::INSERT_FLAG) {\n            //Проверяем наличие необходимого количества товаров.\n            if ($config['check_quantity']) {\n                $pnum_check = $this->checkProductsNum();\n                if ($pnum_check !== true) {\n                    return $this->addError($pnum_check);\n                }\n            }\n\n            $pay = $this->getPayment();\n            $pay->getTypeObject()->onCreateOrder();\n\n            $delivery = $this->getDelivery();\n            \n            //Устанавливаем первоначальный статус заказа\n            if (!empty($config['first_order_status'])) {\n                $status = $config['first_order_status'];\n            } else {\n                $status = \\Shop\\Model\\UserStatusApi::getStatusIdByType( \\Shop\\Model\\Orm\\UserStatus::STATUS_NEW );\n            }\n            \n            if ($pay['first_status']>0) {\n                $status = $pay['first_status'];\n            }\n            \n            if ($delivery['first_status']>0) {\n                $status = $delivery['first_status'];\n            }\n            \n            $this['status'] = $status;\n            $this['ip']     = $_SERVER['REMOTE_ADDR'];\n            $this['dateof'] = date('Y-m-d H:i:s');\n            $this['hash']   = md5(uniqid(mt_rand(), true));\n            if(!$this->isModified('is_exported')){\n                $this['is_exported'] = 0;\n            }\n\n            //Создаем корзину к заказу\n            if ($this['basket']) {\n                $cart = $this->getCart(); //Подготавливаем корзину к переносу в заказ\n                if ($cart && ($error = $cart->makeOrderCart()) !== true) {\n                    return $this->addError($error);\n                }\n            }\n            \n            //Если есть массив дополнительных данных, то сохраним их\n            if (!empty($this['order_extra'])){\n                foreach ($this['order_extra'] as $order_key_step=>$order_step){\n                    $m=0;\n                    foreach ($order_step as $extra_title=>$extra_value){\n                        $extra_uniq_key = $order_key_step.\"_\".$m;\n                        $this->addExtraInfoLine($extra_title, $extra_value, null, $extra_uniq_key); \n                        $m++;   \n                    }\n                }\n            }\n        }      \n                \n        if ($flag == self::UPDATE_FLAG) { //При обновлении заказа \n            /**\n            * @var \\Shop\\Model\\Orm\\Order\n            */\n            $this->before_this = new self($this['id']);\n            //Подгрузим данные для дальнейшей сверки с новыми\n            //Прежняя корзина\n            $this->before_this['cart_md5'] = $this->before_this->getProductsHash(); \n            \n            if ($config['check_quantity']) { //Если у товара меняется статус, изменяем количество у товара, если нужно.\n                    $cancelled = \\Shop\\Model\\UserStatusApi::getStatusIdByType( \\Shop\\Model\\Orm\\UserStatus::STATUS_CANCELLED );\n                    if ($this['status'] == $cancelled && $this->before_this['status'] != $cancelled ) {\n                        $this->incProductsNum(); //Заказ был отменен, возвращаем товарам их количество\n                    }\n                    if ($this['status'] != $cancelled && $this->before_this['status'] == $cancelled ) {\n                        $this->decProductsNum(); //Заказ был возобновлен, отнимаем у товаров количество\n                    }\n                    \n                    if (isset($this['back_warehouse'])){ //Если склад изменили, то вернём остатки на старый склад\n                       $this->incProductsNum($this['back_warehouse']);\n                    }\n            }\n        }\n        \n        $this['_serialized'] = serialize($this['extra']);\n        $this['userfields']  = serialize($this['userfields_arr']);   \n    }\n    \n    /**\n    * Фукнция срабатывает после записи объекта в БД\n    * \n    * @param string $flag - insert или update\n    * @return void\n    */\n    function getProductsHash()\n    {\n        if (!$this['id']) {\n            $products = $this->getCart()->getProductItems();\n            $arr = array();\n            foreach($products as $uniq=>$item){\n               $product  = $item['product'];\n               $cartitem = $item['cartitem'];\n               $arr[]    = $product['title'].\"_\".$product['id'].\"_\".$cartitem['offer'].\"_\".$cartitem['amount'];\n            } \n            sort($arr);\n            return md5(serialize($arr));\n        }else{\n            $cart_data=$this->getCart()->getPriceItemsData();\n            $cart_data['checkcount'] = count($cart_data['items']);\n            return md5(serialize($cart_data));\n        }\n    }\n    \n    function afterWrite($flag)\n    {\n        $config = \\RS\\Config\\Loader::byModule($this);    \n        \n        if ($flag == self::INSERT_FLAG) { //При вставке\n            if($this->session_cart){\n                $this->session_cart->saveOrderData(); //Создаем корзину к заказу\n            }\n            \n            if($this->session_cart){\n                //Отмечаем, что скидочный купон использован, если он был привязан к корзине\n                $coupons = $this->session_cart->getCouponItems();\n                foreach($coupons as $coupon) {\n                    $coupon['coupon']->incrementUse();\n                }\n            }\n            \n            if (!$config['use_generated_order_num']) {\n            //Устнавливаем номер заказа, равный ID заказа, в случае, если выключена опция генерации\n                \\RS\\Orm\\Request::make()\n                    ->update($this)\n                    ->set('order_num = id')\n                    ->where(array('id' => $this['id']))\n                    ->exec();\n                $this['order_num'] = $this['id'];\n            }\n            \n            //Уменьшаем количество товаров, учавствующих в заказе.\n            if ($config['check_quantity']) {\n                $this->decProductsNum();\n            }\n            \n            if (empty($this['disable_checkout_notice'])) { //Если не стоит запрет на отправку уведомлений\n                \n                //Отправляем уведомление покупателю\n                $notice = new \\Shop\\Model\\Notice\\CheckoutUser();\n                $notice->init($this);\n                \\Alerts\\Model\\Manager::send($notice);  \n                \n                $site_config = \\RS\\Config\\Loader::getSiteConfig();\n                if (!empty($site_config['admin_email']) || !empty($site_config['admin_phone'])){ //Если указан E-mail администратора\n                    //Отправляем уведомление администратору\n                    $notice = new \\Shop\\Model\\Notice\\CheckoutAdmin();\n                    $notice->init($this);\n                    \\Alerts\\Model\\Manager::send($notice);  \n                }\n            }         \n        }\n        \n        \n        \n        \n        if ($flag == self::UPDATE_FLAG){\n            //Уменьшаем количество товаров, учавствующих в заказе, если сменился склад\n            if ($config['check_quantity'] && isset($this['back_warehouse'])) {\n                $this->decProductsNum();\n            }\n        }\n        \n        if ($flag == self::UPDATE_FLAG && $this['notify_user'] && $this->canUserNotify()) {\n            //Отправляем уведомление пользователю об изменении заказа\n            $notice = new \\Shop\\Model\\Notice\\OrderChange();\n            $notice->init($this);\n            \\Alerts\\Model\\Manager::send($notice);\n        } \n        \n        //Выполняем действия с доставками и оплатами, если у этого типа доставок и оплат поддерживаются такие действия и включён флаг на разрешение\n        if ($this['delivery_new_query']){ //Если доставке нужно делать запрос при создании или редактировании заказа\n            $delivery_type = $this->getDelivery()->getTypeObject();\n            $delivery_type->onOrderCreate($this, $this->getAddress());\n        }\n        \n        if ($this['payment_new_query']){ //Если оплате нужно делать запрос при создании или редактировании заказа\n            $payment_type = $this->getPayment()->getTypeObject();\n            $payment_type->onOrderCreate($this, $this->getAddress()); \n        }    \n        \n        //Посмотрим, есть ли адреса заказов, которые были не присвоины и новому идентификатору\n        if ($this['_tmpid']<0){\n            $address_api = new \\Shop\\Model\\AddressApi();\n            $address_api->setFilter('order_id', $this['_tmpid']);\n            $address_list = $address_api->getList();\n            \n            if ($address_list){\n                foreach ($address_list as $address){\n                    $address['order_id'] = $this['id'];\n                    $address->update(); \n                }\n            }\n        }\n        \n        \\RS\\Event\\Manager::fire('order.change', array('order_before' => $this->this_before_write, 'order' => $this));\n    }         \n    \n    /**\n    * Функция срабатывает после загрузки объекта\n    * \n    */\n    function afterObjectLoad()\n    {\n        $this['extra'] = @unserialize($this['_serialized']);\n        $this['userfields_arr'] = @unserialize($this['userfields']);\n    }\n    \n    /**\n    * Возвращает true, если в заказе произошли изменения, о которых следует сообщить пользователю\n    * \n    * @return bool\n    */\n    function canUserNotify()\n    {\n        $changed = false;\n        \n        if ($this->before_this !== null) {\n            $old_order = $this->before_this;\n            $changed =  (float)$this['totalcost'] != (float)$old_order['totalcost']  //Проверяем сумму заказа\n                        || ($old_order['status'] != $this['status'])                 //Проверяем статус\n                        || ($old_order['cart_md5'] != md5(serialize($this->getCart()->getPriceItemsData()))) //Проверяем состав товаров\n                        || ($this->before_address->getLineView() != $this->getAddress()->getLineView()) //Проверяем адрес доставки\n                        || ($old_order['delivery'] != $this['delivery'])             //Проверяем способ доставки\n                        || ($old_order['contact_person'] != $this['contact_person']) //Проверяем контактное лицо\n                        || ($old_order['warehouse'] != $this['warehouse'])           //Проверяем склад\n                        || ($old_order['payment'] != $this['payment'])               //Проверяем способ оплаты\n                        || ($old_order['user_text'] != $this['user_text'])           //Проверяем текст для пользователя\n                        || ($old_order['is_payed'] != $this['is_payed']);            //Проверяем флаг оплаты\n        }\n        \n        return $changed;\n    }\n    \n    /**\n    * Привязывает корзину к заказу\n    * \n    * @param \\Shop\\Model\\Cart $cart - загруженный объект корзины в режиме PREORDER или EMPTY\n    * @return Order\n    */\n    function linkSessionCart(\\Shop\\Model\\Cart $cart)\n    {\n        $this['basket'] = serialize($cart);\n        return $this;\n    }\n    \n    /**\n    * Сохраняет параметры валюты, в которой оформляется заказ\n    * \n    * @param \\Catalog\\Model\\Orm\\Currency $currency\n    * @return Order\n    */\n    function setCurrency(\\Catalog\\Model\\Orm\\Currency $currency)\n    {\n        $this['currency'] = $currency['title'];\n        $this['currency_ratio'] = $currency['ratio'];\n        $this['currency_stitle'] = $currency['stitle'];        \n        return $this;\n    }\n\n    /**\n    * Проверяет наличие всех товаров в корзине\n    */\n    function checkProductsNum()\n    {\n        $num_error = false;\n        if(!$this['basket']) return true;\n        $bitems = $this->getCart()->getProductItems(false);\n        \n        \n        foreach ($bitems as $n => $item) {\n            $real_num = $item['product']->getNum($item['cartitem']['offer']); \n            if ($item['cartitem']['amount'] > $real_num) {\n                $num_error = true;\n                $bitems[$n]['product']['num'] = $real_num;\n            }\n        }\n        if ($num_error) {\n            return t('Извините, некоторых товаров уже нет в наличии');\n        }\n        return true;\n    }    \n    \n    \n    /**\n    * Увеличить количество остатков на величину заказа\n    * \n    * @param integer|boolean $warehouse - id склада на который будет возвращены количества товаров\n    */\n    function incProductsNum($warehouse = false)\n    {\n        $warehouse = $warehouse ? $warehouse : (int)$this['warehouse']; //Склад для возврата\n        $bitems = $this->getCart()->getProductItems();\n        foreach ($bitems as $item) {\n            $product = new Product($item['product']['id']);\n            $product->incrementNum($item['cartitem']['offer'], (int)$item['cartitem']['amount'], $warehouse);\n        }\n    }\n    \n    /**\n    * Уменьшить количество остатков на величину заказа\n    */\n    function decProductsNum()\n    {\n        $bitems = $this->getCart()->getProductItems();\n        foreach ($bitems as $item) {\n            $product = new Product($item['product']['id']);\n            $product->decrementNum($item['cartitem']['offer'], (int)$item['cartitem']['amount'], (int)$this['warehouse']);\n        }\n    }\n    \n    \n    /**\n    * Возвращает экземпляр класса текущей корзины\n    * @return Order\n    */\n    public static function currentOrder()\n    {\n        $order = new self();\n        $order->getFromSession();\n        return $order;\n    }\n    \n    /**\n    * Загружает объект данными из сессии. \n    * После вызова данного метода, любые изменения в объект будут сохраняться в сессию\n    * \n    * @return void\n    */\n    public function getFromSession() \n    {\n        if (!isset($_SESSION[self::ORDER_SESS_VAR])) {\n            $_SESSION[self::ORDER_SESS_VAR] = array();\n        }\n        $this->_values = &$_SESSION[self::ORDER_SESS_VAR];\n    }\n    \n    \n    /**\n    * Возвращает поля, которые удовлетворяют условиям condition.\n    * Условия задают в каком случае поля должны запрашиваться и проверяться из POST\n    * \n    * @return array\n    */\n    function useFields($post)\n    {\n        $result = array();\n        foreach($this->getProperties() as $key=>$property) {\n            $rule = isset($property->condition) ? $property->condition : null;\n            $include = true;            \n            if ($rule) {\n                foreach($rule as $field => $need) {\n                    if (!isset($post[$field])) {\n                        $include = false;\n                    } else {\n                        if (is_array($need)) {\n                            if (!in_array($post[$field], $need)) $include = false;\n                        } else {\n                            if ($post[$field] != $need) $include = false;\n                        }\n                    }\n                }\n            }\n            if ($include) $result[] = $key;\n        }\n        return $result;        \n    }    \n    \n    \n    \n    /**\n    * Возвращает объект, управляющий дополнительными полями, заданными в настройках модуля\n    * \n    * @return \\RS\\Config\\UserFieldsManager\n    */\n    function getFieldsManager()\n    {\n        $order_fields_manager  = \\RS\\Config\\Loader::byModule($this)->getUserFieldsManager();\n        $order_fields_manager->setErrorPrefix('orderfield_');\n        $order_fields_manager->setArrayWrapper('userfields_arr');\n        \n        $data = @unserialize($this['userfields']);\n       \n        if (!empty($data)) $order_fields_manager->setValues($data);\n        \n        return $order_fields_manager;\n    }    \n    \n    /**\n    * Возвращает список регионов в стране\n    * \n    */\n    public static function regionList()\n    {\n        $_this = self::currentOrder();\n        $parent = $_this['addr_country_id'];\n        $api = new \\Shop\\Model\\RegionApi();\n        if ($parent<1) {\n            $countries = $api->countryList();\n            $array_countries_keys = array_keys($countries);\n            if (count($countries)) $parent = reset($array_countries_keys);\n        }\n        if ($parent>0) {\n            $api->setFilter('parent_id', $parent);\n            $regions = $api->getAssocList('id', 'title');\n        } else {\n            $regions = array();\n        }\n        return $regions;\n    }\n    \n    /**\n    * Возвращает объект адреса доставки\n    * \n    * @return \\Shop\\Model\\Orm\\Address\n    */\n    function getAddress($cache = true)\n    {\n        if ($this->address === null || !$cache) {\n            $this->address = new Address($this['use_addr']);\n        }\n        return $this->address;\n    }\n    \n    /**\n    * Устанавливает объект адреса доставки, в случае если адрес доставки еще не существует в БД\n    * \n    * @param Address $address\n    * @return Order\n    */\n    function setAddress(Address $address)\n    {\n        $this->address = $address;\n        return $this;\n    }\n    \n    \n    /**\n    * Возращает вес заказа в граммах\n    * \n    * @return float\n    */\n    function getWeight()\n    {\n        return $this->getCart()->getTotalWeight();\n    }\n    \n    /**\n    * Возвращает объект способа доставки\n    * \n    * @return Delivery\n    */\n    function getDelivery()\n    {\n        return new Delivery($this['delivery']);\n    }    \n    \n    /**\n    * Возвращает объект способа оплаты\n    * \n    * @return Payment\n    */\n    function getPayment()\n    {\n        return new Payment($this['payment'], true, $this);\n    }\n    \n    /**\n    * Возвращает объект выбранного склада\n    * \n    * @return \\Catalog\\Model\\Orm\\WareHouse\n    */\n    function getWarehouse()\n    {\n        return new \\Catalog\\Model\\Orm\\WareHouse($this['warehouse']);\n    }    \n    \n    /**\n    * Возвращает стоимсть доставки для текущего заказа и заданного типа доставки\n    * \n    * @param Delivery $delivery\n    * @return string\n    */\n    function getDeliveryCostText(Delivery $delivery)\n    {\n        return $delivery->getDeliveryCostText($this, $this->getAddress());\n    }\n    \n    function getDeliveryExtraText(Delivery $delivery)\n    {\n        return $delivery->getDeliveryExtraText($this, $this->getAddress());\n    }\n\n    /**\n    * Применяет валюту заказа к заданной цене\n    * \n    * @param float $price\n    * @return double\n    */\n    function applyMyCurrency($price)\n    {\n        return round($price * $this['currency_ratio'], 2);\n    }\n    \n    /**\n    * Возвращает валюту, в которой был оформлен заказ\n    * \n    * @return \\Catalog\\Model\\Orm\\Currency\n    */\n    function getMyCurrency()\n    {\n        if (self::$currency === null) {\n            self::$currency = \\Catalog\\Model\\CurrencyApi::getByUid($this['currency']);\n            if (!self::$currency) {\n                self::$currency = \\Catalog\\Model\\CurrencyApi::getBaseCurrency();\n            }\n        }\n        return self::$currency;\n    }\n    \n    /**\n    * Возвращает пользователя, оформившего заказ\n    * \n    * @return \\Users\\Model\\Orm\\User\n    */\n    function getUser()\n    {\n        if ($this['user_id']>0){\n            return new \\Users\\Model\\Orm\\User($this['user_id']);\n        }\n        $user = new \\Users\\Model\\Orm\\User();\n        $fio = explode(\" \", $this['user_fio']);\n        if (isset($fio[0])){\n            $user['surname'] = $fio[0];\n        }\n        if (isset($fio[1])){\n            $user['name'] = $fio[1];\n        }\n        if (isset($fio[2])){\n            $user['midname'] = $fio[2];\n        }\n        $user['e_mail'] = $this['user_email'];\n        $user['phone']  = $this['user_phone'];\n        return $user;\n    }\n    \n    /**\n    * Возвращает объект с позициями оформленного заказа\n    * \n    * @return \\Shop\\Model\\Cart\n    */\n    function getCart()\n    {\n        if ($this['id']) {\n            if ($this->order_cart === null) {\n                $this->order_cart = \\Shop\\Model\\Cart::orderCart($this);\n            }\n            return $this->order_cart;            \n        } else {\n            if ($this->session_cart === null) {\n                $this->session_cart = @unserialize($this['basket']);\n            }\n            if ($this->session_cart){\n               $this->session_cart->setOrder($this);    \n            }          \n            return $this->session_cart;\n        }\n    }\n    \n    /**\n    * Возможно ли редактирование заказа. \n    * Возвращает false если были удалены налоги либо скидки, идентфикаторы которых присутсвуют в этом заказе\n    * \n    * @return bool\n    */\n    function canEdit()\n    {\n        // Проверям, не удалены ли налоги\n        $items   = $this->getCart()->getCartItemsByType(\\Shop\\Model\\Cart::TYPE_TAX);\n        foreach($items as $one){\n            $obj = new \\Shop\\Model\\Orm\\Tax;\n            if(!$obj->exists($one['entity_id'])){\n                return false;\n            }\n        }\n\n        // Проверям, не удалены ли скидочные купоны\n        $items   = $this->getCart()->getCartItemsByType(\\Shop\\Model\\Cart::TYPE_COUPON);\n        foreach($items as $one){\n            $obj = new \\Shop\\Model\\Orm\\Discount;\n            if(!$obj->exists($one['entity_id'])){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    /**\n    * Возвращает объект статуса заказа\n    * \n    * @return UserStatus\n    */\n    function getStatus()\n    {\n        return new UserStatus($this['status']);\n    }\n    \n    /**\n    * Возвращает общую стоимость заказа \n    * \n    * @param bool $format - Если true, то стоимость будет отформатирована\n    * @param bool $use_currency - Если true, то стоимость будет возвращена, в валюте в которой оформлялся заказ\n    * @return float\n    */\n    function getTotalPrice($format = true, $use_currency = false)\n    {\n        $price = $this['totalcost'];\n        if ($use_currency) {\n            $price = $this->applyMyCurrency($price);\n        }\n        \n        if ($format) {\n            $currency = $use_currency ? $this['currency_stitle'] : \\Catalog\\Model\\CurrencyApi::getBaseCurrency()->stitle;\n            $price = \\RS\\Helper\\CustomView::cost($price, $currency);\n        }\n        return $price;\n    }\n    \n    /**\n    * Возвращает список из базовой валюты и валюты в которой оформлен заказ\n    * \n    * @return array\n    */\n    function getAllowCurrencies()\n    {\n        $base_currency = \\Catalog\\Model\\CurrencyApi::getBaseCurrency();\n        $result = array(\n            '0' => $base_currency->title\n        );\n        \n        if ($base_currency->title == $this['currency']) {\n            $my = 0;\n        } else {\n            $result = array('1' => $this['currency']) + $result;\n            $my = 1;\n        }\n        \n        $result[$my] .= t(' (заказ оформлен в этой валюте)');\n        return $result;\n    }\n    \n    /**\n    * Возвращает дополнительные пары ключ => значение для отображения в админ. панели в разделе \"Информация о заказе\"\n    * \n    * @return array\n    */\n    function getExtraInfo()\n    {\n        $data = $this['extra'];\n        if (isset($data['extrainfo']) && is_array($data['extrainfo'])) {  \n            return $data['extrainfo'];\n        }\n        return array();\n    }\n    \n    /**\n    * Добавляет дополнительную информацию к заказу\n    * \n    * @param string $title - Название информации\n    * @param mixed $value - Значение\n    * @param mixed $data - доп. сведения (если есть)\n    * @param mixed $key - уникальный идентификатор информации\n    * \n    * @return Order\n    */\n    function addExtraInfoLine($title, $value, $data = null, $key = null)\n    {\n        $extra = $this['extra'];\n        $item = array(\n            'title' => $title,\n            'value' => $value,\n            'data' => $data\n        );\n        \n        if ($key === null) {\n            $extra['extrainfo'][] = $item;\n        } else {\n            $extra['extrainfo'][$key] = $item;\n        }\n        $this['extra'] = $extra;\n        $this['_serialized'] = serialize($extra);\n        return $this;\n    }\n    \n    /**\n    * Добавляет в скрытую(которая не будет выводится) секцию с данными\n    * ваши данные по ключу\n    * \n    * @param string $key  - \n    * @param mixed $value - \n    * @return \\Shop\\Model\\Orm\\Order\n    */\n    function addExtraKeyPair($key, $value)\n    {\n        $extra = $this['extra'];\n        $extra['extrakeypair'][$key] = $value;\n        \n        $this['extra'] = $extra;\n        $this['_serialized'] = serialize($extra);        \n        return $this;\n    }\n    \n    /**\n    * Возвращет данные из секции \"extrakeypair\"\n    * \n    * @param string $key - ключ в секции extrakeypair, если не указан, то возвращает всю секцию\n    * @return mixed\n    */\n    function getExtraKeyPair( $key = null )\n    {\n       $extra = $this['extra'];\n       if (!isset($extra['extrakeypair'])) {\n           return array();\n       } \n       if ($key === null) {\n           return $extra['extrakeypair'];\n       }else{\n           return $extra['extrakeypair'][$key];\n       } \n    }\n    \n    /**\n    * Возвращает список объектов для печати текущего заказа\n    * \n    * @return array\n    */\n    function getPrintForms()\n    {\n        return \\Shop\\Model\\PrintForm\\AbstractPrintForm::getList();\n    }\n    \n    /**\n    * Возвращает объект компании(с реквизитами), которая поставляет услуги для данного заказа\n    * \n    * @return \\Shop\\Model\n    */\n    function getShopCompany()\n    {\n        if (($company = $this->getPayment()->getTypeObject()->getCompany()) == false) {\n            $company = new Company();\n            $company->getFromArray( \\RS\\Config\\Loader::getSiteConfig($this['site_id'])->getValues() );            \n        }\n        return $company;\n    }\n    \n    /**\n    * Возвращает true если для этого заказа возможна online-оплата\n    * \n    */\n    function canOnlinePay()\n    {\n        if(!$this->getPayment()->getTypeObject()->canOnlinePay()){ \n            return false;\n        }\n        \n        if($this->getStatus()->type != \\Shop\\Model\\Orm\\UserStatus::STATUS_WAITFORPAY){\n            return false;\n        }\n        \n        if($this->is_payed){\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n    * Возвращайет URL для оплаты заказа в случае выбора online способа оплаты\n    * \n    * @param bool $absolute - Если true, то будет возвращен абсолютный URL\n    * @return string\n    */\n    function getOnlinePayUrl($absolute = false)\n    {\n        $router = \\RS\\Router\\Manager::obj();\n        return $router->getUrl('shop-front-onlinepay', array(\"Act\" => \"doPay\", \"order_id\" => $this['order_num']), $absolute);\n    }\n    \n    /**\n    * Возвращает список файлов, прикрепленных к заказу\n    * \n    * @param string | array $access - уровень доступа\n    * @param bool $include_product_files - если true, то в результатах будет выведены и список файлов товаров, \n    * доступных после оплаты\n    * @return \\Files\\Model\\Orm\\File[]\n    */\n    function getFiles($access = array('visible', 'afterpay'), $include_product_files = true)\n    {\n        $result = array();\n        if ($this['id'] && \\RS\\Module\\Manager::staticModuleExists('files')) {\n            $file_api = new \\Files\\Model\\FileApi();            \n            if (!is_array($access)) {\n                $access = (array)$access;\n            }\n            \n            if (!$this['is_payed'] && in_array('afterpay', $access)) {\n                $access = array_diff($access, array('afterpay'));\n            }\n            \n            if ($access) {\n                //Получаем файлы заказа\n                $file_api->setFilter(array(\n                    'link_type_class' => 'files-shoporder',\n                    'link_id' => $this['id']\n                ));\n                $file_api->setFilter('access', $access, 'in');\n                $result = $file_api->getList();\n            }\n            \n            if ($include_product_files && in_array('afterpay', $access)) {\n                //Получаем файлы товаров\n                $cartitems = $this->getCart()->getCartItemsByType(\\Shop\\Model\\Cart::TYPE_PRODUCT);\n                $ids = array();\n                foreach($cartitems as $cartitem) {\n                    $ids[] = $cartitem['entity_id'];\n                }\n                \n                if ($ids) {\n                    $file_api->clearFilter();\n                    $file_api->setFilter(array(\n                        'link_type_class' => 'files-catalogproduct',\n                        'access' => 'afterpay'\n                    ));\n                    $file_api->setFilter('link_id', $ids, 'in');\n                    $result = array_merge($result, $file_api->getList());\n                }\n            }\n        }\n        return $result;\n    }\n    \n    /**\n    * Возвращает стоимость доставки, у существующего заказа\n    * \n    * @return float\n    */\n    function getDeliveryCost()\n    {\n        return $this['user_delivery_cost'] ?: 0;\n    }\n\n}\n",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/orm/order.inc.php",
			"file_size": 48204,
			"file_write_time": 130996242976574835,
			"settings":
			{
				"buffer_size": 43230,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\nnamespace RS\\Orm;\n\nclass OrmObject extends AbstractObject\n{\n    protected static \n        $self_singleton_cache = array(),\n        $self_cache = array(); //Здесь будут кэшироваться данные объектов, загруженные через конструктор\n        \n    /**\n    * Объявляет поле ID у объектов\n    * @return \\RS\\Orm\\PropertyIterator\n    */\n    protected function _init() //инициализация полей класса. конструктор метаданных\n    {\n        return $this->getPropertyIterator()->append(array(\n            'id' => new Type\\Integer(array(\n                'description' => 'Уникальный идентификатор (ID)',\n                'autoincrement' => true,\n                'allowEmpty' => false,\n                'primaryKey' => true,\n                'visible' => false\n            ))\n        ));\n    }\n    \n    /**\n    * При передаче в конструктор id объекта, загружает его. \n    * Если объекта с таким id не найдено, объект остается пустым.\n    * \n    * При загрузке объекта через конструктор используется простая система \n    * кэширования сохраняющая в статической переменной загруженные данные для объекта.\n    * При следующей попытке загрузить такой же объект с таким же id будет, данные будут взяты из кэша.\n    * \n    * @param mixed $id\n    * @param bool $cache - Если задано true, то будет использоваться кэширование при загрузке объекта\n    */\n    function __construct($id = null, $cache = true)\n    {\n        parent::__construct();\n        if ($id !== null && (!$cache || !$this->loadFromCache($id))) {\n            $this->load($id);\n            $this->saveInCache($id);\n        }\n    }\n    \n    /**\n    * Возвращает имя свойства, которое помечено как первичный ключ.\n    * \n    * @return string\n    */\n    public function getPrimaryKeyProperty()\n    {\n        return 'id';\n    }\n    \n    /**\n    * Сохраняет в статической переменной значение свойств объекта\n    * \n    * @param mixed $id\n    * @return void\n    */\n    function saveInCache($id)\n    {\n        self::$self_cache[$this->_self_class][self::getIdHash($id)] = $this->_values;\n    }\n    \n    /**\n    * Загружает из статической переменной(кэша) значения свойств для текущего объекта\n    * \n    * @param mixed $id\n    * @return bool Возвращает true, если данные были в кэше, иначе false\n    */\n    function loadFromCache($id)\n    {\n        $id = self::getIdHash($id);\n        if (isset(self::$self_cache[$this->_self_class][$id])) {\n            $this->getFromArray(self::$self_cache[$this->_self_class][$id]);\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n    * Имплементирует pattern SingleTon\n    * В отличие от загрузки объекта из кэша через конструктор по id данные метод всегда возвращает один и тот же объект.\n    * \n    * @param mixed $id\n    */\n    public static function loadSingle($id)\n    {\n        $self_class = get_called_class();\n        $id_hash = self::getIdHash($id);\n        if (!isset(self::$self_singleton_cache[$self_class][$id_hash])) {\n            self::$self_singleton_cache[$self_class][$id_hash] = new $self_class($id, false);\n        }\n        return self::$self_singleton_cache[$self_class][$id_hash];\n    }\n    \n    /**\n    * Возвращает хэш от ID\n    * \n    * @param mixed $id\n    * @return string\n    */\n    protected static function getIdHash($id)\n    {\n        return is_scalar($id) ? (string)$id : md5(json_encode($id));\n    }\n    \n}",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/core/rs/orm/ormobject.inc.php",
			"file_size": 4341,
			"file_write_time": 130976356591989665,
			"settings":
			{
				"buffer_size": 3504,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\n\nnamespace RS\\Orm;\n\n/**\n* Базовый абстрактный класс объектов ORM\n*/\nabstract class AbstractObject extends \\RS\\Behavior\\AcceptBehavior implements \\ArrayAccess, \\Iterator\n{\n    const\n            INSERT_FLAG    = 'insert',\n            UPDATE_FLAG    = 'update',\n            REPLACE_FLAG   = 'replace',\n            INDEX_PRIMARY  = 'primary key',\n            INDEX_UNIQUE   = 'unique',\n            INDEX_KEY      = 'index',\n            INDEX_FULLTEXT = 'fulltext';\n\n    protected\n            $_values = array(), //Значения свойств\n            $_self_class,       //имя класса ORM объекта\n            $_local_id;         //внутренний ID объекта\n    \n    //Невидимые для print_r параметры\n    protected static\n            $db = DB_NAME, //Имя базы данных\n            $table = null, //Имя таблицы\n\n            $iterator = 0,\n            $init_default_method = '_initDefaults', //Имя метода, который вызывается во время создания объекта\n            $local = array(),\n            $default_local_parameters = array(\n                'modified'        => array(), //Измененные свойства\n                'properties'      => null,    //Свойства объекта\n                'errorlist'       => array(), //Список ошибок в формах\n                'formerror'       => array(), //Список форм с ошибками\n                'non_form_errors' => array(), //Список ошибок не в формах\n                'write_bit'       => ACCESS_BIT_WRITE, //Номер бита, который следует проверять при вызове CheckData (вызывается перед записью)\n                'checkRights'     => true,    //Проверять права на запись во время проверки данных (CheckData)\n                'escape_fields'   => array(), //Перевести в entity следующие поля\n                'escape_all'      => false    //Перевести в entity все значения при записи            \n                    ),\n            $class = array(),\n            $default_class_parameters = array(\n                'property_template' => '%system%/coreobject/prop_form.tpl',\n                'properties' => null, //Свойства объекта\n                'indexes' => array(),\n    );\n\n    public function __construct()\n    {\n        $this->_self_class = get_class($this);\n        $this->_local_id = self::$iterator++;\n        self::$local[$this->_local_id] = self::$default_local_parameters;\n        $this->{static::$init_default_method}();        \n    }\n\n    function __destruct()\n    {\n        unset(self::$local[$this->_local_id]);\n    }    \n    \n    /**\n    * Инициирует поля ORM Объекта\n    * @return void\n    */\n    protected function initProperties()\n    {\n        if (!$this->issetClassParameter()) {\n            self::$class[$this->_self_class] = self::$default_class_parameters;\n            $newIterator = new PropertyIterator();\n            $this->setClassParameter('properties', $newIterator);\n            if (!isset(self::$local[$this->_local_id]['properties'])) {\n                $this->setLocalParameter('properties', $newIterator);\n            }\n            $this->_init();\n            $this->afterInit();\n        } \n        else {\n            if (!isset(self::$local[$this->_local_id]['properties'])) {\n                self::$local[$this->_local_id]['properties'] = self::$class[$this->_self_class]['properties'];\n            }\n        }\n    }\n\n    /**\n    * В данном методе должны быть заданы поля объекта. \n    * Вызывается один раз для одного класса объектов в момент первого обращения к свойству\n    */\n    abstract protected function _init();\n\n    /**\n    * Внутри данной функции нужно объявлять значения свойств по умолчанию.\n    * Вызывается после конструктора.\n    */\n    protected function _initDefaults()\n    {}\n\n    /**\n     * Производит внутреннюю инициализацию объекта. Вызывается один раз для одного имени класса\n     */\n    protected function afterInit()\n    {\n        //Сообщаем свойствам их ключи.\n        $properties = self::$local[$this->_local_id]['properties'];\n\n        /**\n         * Event: orm.init\n         * paramtype \\RS\\Orm\\AbstractObject\n         */\n        \\RS\\Event\\Manager::fire('orm.init.' . $this->getShortAlias(), $this);\n\n        if ($properties !== null) {\n            $default_values = array();\n            foreach ($properties as $property => $value) {\n                $properties[$property]->setName($property);\n            }\n        }\n    }\n\n    /**\n     * Присваивает не измененным полям значение по-умолчанию\n     * \n     * @return void\n     */\n    public function fillDefaults()\n    {\n        foreach ($this->getProperties() as $key => $property) {\n            $default_value = $property->getDefault();\n            if (!$this->isModified($key) && $default_value !== null) {\n                $this[$key] = $default_value;\n            }\n        }\n    }\n\n    /**\n    * @deprecated\n     * Возвращает параметры, заданные для всех объектов данного класса\n     * \n     * @param string $key имя параметра\n     */\n    public function getClassParameter($key = null)\n    {\n        return $key ? self::$class[$this->_self_class][$key] : self::$class[$this->_self_class];\n    }\n\n    /**\n     * @deprecated\n     * Устанавливает параметр, заданные для всех объектов данного класса\n     * \n     * @param string | array $key имя параметра или ассоциативный массив параметров и значений\n     * @param mixed $value значение\n     */\n    public function setClassParameter($key, $value = null)\n    {\n        if (is_array($key)) {\n            self::$class[$this->_self_class] = $key + self::$class[$this->_self_class];\n        } else {\n            self::$class[$this->_self_class][$key] = $value;\n        }\n    }\n\n    /**\n     * @deprecated\n     * Возвращает true, если задан $key и параметр $key существует.\n     * Возвращает true, если не задан $key и задан хотя бы один параметр для даннго класса\n     * \n     * @param string | null $key - имя параметра\n     * @return bool\n     */\n    public function issetClassParameter($key = null)\n    {\n        if ($key === null) {\n            return isset(self::$class[$this->_self_class]);\n        } else {\n            return isset(self::$class[$this->_self_class][$key]);\n        }\n    }\n\n    /**\n     * Устанавливает параметр для текущего объекта.\n     * \n     * @param string | array $key - имя параметра или ассоциативный массив имя => значение\n     * @param mixed $value - значение параметра\n     */\n    public function setLocalParameter($key, $value = null)\n    {\n        if (is_array($key)) {\n            self::$local[$this->_local_id] = $key + self::$local[$this->_local_id];\n        } else {\n            self::$local[$this->_local_id][$key] = $value;\n        }\n    }\n\n    /**\n     * Возвращает параметр, заданный для текущего объекта\n     * \n     * @param mixed $key - имя параметра\n     * @param mixed $default - значение по-умолчанию\n     * @return mixed\n     */\n    public function getLocalParameter($key, $default = null)\n    {\n        return isset(self::$local[$this->_local_id][$key]) ? self::$local[$this->_local_id][$key] : $default;\n    }\n    \n    /**\n    * Возвращает параметр, заданный для текущего объекта, а если такой параметр не задан, заданный для текущего класса объектов\n    * \n    * @param mixed $key - имя параметра\n    * @param mixed $default - значение по-умолчанию\n    * @return mixed\n    */\n    public function getParameter($key, $default = null)\n    {\n        if (isset(self::$local[$this->_local_id][$key])) {\n            return self::$local[$this->_local_id][$key];\n        } else {\n            return isset(self::$class[$this->_self_class][$key]) ? self::$class[$this->_self_class][$key] : $default;\n        }\n    }\n\n    /**\n     * Задает новые свойства для текущего объекта.\n     * Применение данного метода накладывает ряд ограничений на последующую работу объекта. \n     * К объекту невозможно будет применить сериализацию.\n     */\n    public function setPropertyIterator(PropertyIterator $iterator)\n    {\n        $this->setLocalParameter('properties', $iterator);\n        $this->afterInit();\n    }\n\n    /**\n     * Устанавливает, проверять ли права на запись при попытке изменить объект\n     * \n     * @param boolean $bool\n     */\n    function checkRights($bool)\n    {\n        $this->setLocalParameter('checkRights', $bool);\n    }\n\n    /**\n     * Очищает все значения свойств\n     */\n    function clear()\n    {\n        $this->_values = array();\n        self::$local[$this->_local_id]['modified'] = array();\n    }\n\n    /**\n     * Возвращает загруженный объект по условию в случае успеха, иначе вернет пустой экземпляр объекта.\n     * \n     * @param array|string $expr выражение WHERE.\n     * @param array $values массив со значениям, заменит \"-КЛЮЧ-\" из expr на ЗНАЧЕНИЕ\n     * @param string $prefix будет подставлено перед текущим выражением AND, OR,...\n     * @return self\n     */\n    public static function loadByWhere($expr, array $values = null, $prefix = 'AND')\n    {\n        $called_class = get_called_class();\n        $result = \\RS\\Orm\\Request::make()\n                ->from(new $called_class)\n                ->where($expr, $values, $prefix)\n                ->limit(1)\n                ->object();\n        return $result ? $result : new $called_class;\n    }\n\n    /**\n     * Проверяет наличие значения по ключу (ArrayAccess)\n     */\n    public function offsetExists($offset)\n    {\n        if ($offset{0} == '_' && $offset{1} == '_') {\n            $this->initProperties();\n            return isset(self::$local[$this->_local_id]['properties'][substr($offset, 2)]);\n        }\n        return isset($this->_values[$offset]);\n    }\n\n    /**\n     * Возвращает значение по ключу (имени свойства) (ArrayAccess)\n     * Если $offset начинается с \"__\" (двойное подчеркивание), то возвращает объект \\RS\\Orm\\Type\\.....\n     * \n     * @param string $offset - имя свойства. \n     */\n    public function offsetGet($offset)\n    {\n        if ($offset{0} == '_' && $offset{1} == '_') {\n            //Запрос объекта \n            $offset = substr($offset, 2);\n            $value = $this->getProp($offset);\n        } else {\n            //Запрос значения объекта\n            $value = isset($this->_values[$offset]) ? $this->_values[$offset] : null;\n        }\n        return $value;\n    }\n\n    /**\n     * Устанавливает значение в свойство (ArrayAccess)\n     * \n     * @param string $offset - ключ( имя свойства )\n     * @param mixed $value - значение\n     */\n    public function offsetSet($offset, $value)\n    {\n        $this->_values[$offset] = $value;\n        self::$local[$this->_local_id]['modified'][$offset] = true;\n\n        return $value;\n    }\n\n    /**\n     * Ограниченная функция установки \n     * \n     * @param mixed $offset\n     * @param mixed $value\n     * @return mixed\n     */\n    public function __set($offset, $value)\n    {\n        return $this->offsetSet($offset, $value);\n    }\n\n    public function __get($offset)\n    {\n        return $this->offsetGet($offset);\n    }\n\n    /**\n     * Очищает значение свойства\n     * \n     * @param mixed $offset\n     */\n    public function offsetUnset($offset)\n    {\n        unset($this->_values[$offset]);\n        unset(self::$local[$this->_local_id]['modified'][$offset]);\n    }\n\n    /**\n     * Возвращает объект хранилища\n     * @return \\RS\\Orm\\Storage\\AbstractStorage\n     */\n    protected function getStorageInstance()\n    {\n        return new \\RS\\Orm\\Storage\\Db($this);\n    }\n\n    /**\n     * Возвращает сокращенное наименование orm объекта. \n     * Данное имя используется в названиях событий\n     * @return string\n     */\n    public function getShortAlias()\n    {\n        $name = str_replace('\\\\', '-', strtolower($this->_self_class));\n        return trim(str_replace('model-orm-', '', $name), '-');\n    }\n    \n    /**\n    * Загружает объект из хранилища\n    * \n    * @param mixed $primaryKeyValue - уникальный идентификатор\n    */\n    public function load($primaryKeyValue = null)\n    {\n        return $this->getStorageInstance()->load($primaryKeyValue);\n    }        \n\n    /**\n     * Добавляет объект в хранилище\n     * \n     * @param bool $ignore - Если true, то ошибки вставки будут игнорироваться\n     * @param array $on_duplicate_update_keys - поля, которые необходимо обновить в случае если запись уже существует\n     * @param array $on_duplicate_uniq_fields - поля, которые точно идетифицируют текущаю запись, для подгрузки id объекта при обновлении\n     * @return boolean - true в случае успеха, иначе - false\n     */\n    public function insert($ignore = false, $on_duplicate_update_keys = array(), $on_duplicate_uniq_fields = array())\n    {\n        /**\n         * Event: orm.beforewrite\n         * paramtype array\n         * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n         * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n         * index 'on_duplicate_update_keys' => array of string\n         */\n        $can_do = $this->beforeWrite(self::INSERT_FLAG, $on_duplicate_update_keys) !== false && !\\RS\\Event\\Manager::fire('orm.beforewrite.' . $this->getShortAlias(), array(\n                    'orm' => $this,\n                    'flag' => self::INSERT_FLAG,\n                    'on_duplicate_update_keys' => $on_duplicate_update_keys\n                ))->getEvent()->isStopped();\n\n        $ret = false;\n        $storage = $this->getStorageInstance();\n        $type = $ignore ? 'insert ignore' : 'insert';\n        \n        if ($can_do && $ret = $storage->insert($type, $on_duplicate_update_keys, $on_duplicate_uniq_fields)) {\n            $this->afterWrite(self::INSERT_FLAG, $on_duplicate_update_keys);\n            /**\n             * Event: orm.afterwrite\n             * paramtype array\n             * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n             * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n             */\n            \\RS\\Event\\Manager::fire('orm.afterwrite.' . $this->getShortAlias(), array(\n                'orm' => $this,\n                'flag' => self::INSERT_FLAG,\n                'on_duplicate_update_keys' => $on_duplicate_update_keys\n            ));\n        }\n        return $ret;\n    }\n\n    /**\n     * Обновляет объект в хранилище\n     * \n     * @param mixed $primaryKey - уникальный идентификатор. Необходимо указывать, если у объекта меняется уникальный идентификатор\n     * @return boolean - true в случае успеха\n     */\n    public function update($primaryKey = null)\n    {\n        /**\n         * Event: orm.beforewrite\n         * paramtype array\n         * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n         * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n         */\n        $can_do = $this->beforeWrite(self::UPDATE_FLAG) !== false && !\\RS\\Event\\Manager::fire('orm.beforewrite.' . $this->getShortAlias(), array(\n                    'orm' => $this,\n                    'flag' => self::UPDATE_FLAG\n                ))->getEvent()->isStopped();\n\n        $ret = false;\n        $storage = $this->getStorageInstance();\n        if ($can_do && $ret = $storage->update($primaryKey)) {\n            $this->afterWrite(self::UPDATE_FLAG);\n            /**\n             * Event: orm.afterwrite\n             * paramtype array\n             * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n             * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n             */\n            \\RS\\Event\\Manager::fire('orm.afterwrite.' . $this->getShortAlias(), array(\n                'orm' => $this,\n                'flag' => self::UPDATE_FLAG\n            ));\n        }\n        return $ret;\n    }\n\n    /**\n     * Заменяет объект в хранилище, если таковой уже имелся, в противном случае вставляет новый объект\n     * \n     * @return boolean - true, в случае успеха\n     */\n    public function replace()\n    {\n        /**\n         * Event: orm.beforewrite\n         * paramtype array\n         * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n         * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n         */\n        $can_do = $this->beforeWrite(self::REPLACE_FLAG) !== false && !\\RS\\Event\\Manager::fire('orm.beforewrite.' . $this->getShortAlias(), array(\n                    'orm' => $this,\n                    'flag' => self::REPLACE_FLAG\n                ))->getEvent()->isStopped();\n\n        $ret = false;\n        $storage = $this->getStorageInstance();\n        if ($can_do && $ret = $storage->replace()) {\n            $this->afterWrite(self::REPLACE_FLAG);\n            /**\n             * Event: orm.afterwrite\n             * paramtype array\n             * index 'orm' => \\RS\\Orm\\AbstractObject OrmObject\n             * index 'flag' => string \"insert\" | \"replace\" | \"update\"\n             */\n            \\RS\\Event\\Manager::fire('orm.afterwrite.' . $this->getShortAlias(), array(\n                'orm' => $this,\n                'flag' => self::REPLACE_FLAG\n            ));\n        }\n        return $ret;\n    }\n\n    /**\n     * Удаляет объект из хранилища\n     * @return boolean - true, в случае успеха\n     */\n    public function delete()\n    {\n        //Проверяем права на запись для модуля\n        $check_rights = $this->getLocalParameter('checkRights');\n        if ($check_rights && ($acl_err = \\RS\\AccessControl\\Rights::CheckRightError($this, $this->getLocalParameter('write_bit')))) {\n            $this->addError($acl_err);\n            return false;\n        }\n        //Конец проверки прав на запись для модуля        \n        \n        $eresult = \\RS\\Event\\Manager::fire('orm.delete.' . $this->getShortAlias(), array(\n            'orm' => $this,\n        ));\n\n        return !$eresult->getEvent()->isStopped() && $this->getStorageInstance()->delete();\n    }\n\n    /**\n     * Возвращает true, если объект с указанным Уникальным идентификатором существует\n     * \n     * @param mixed $primaryKeyValue - уникальный идентификатор\n     * @return boolean\n     */\n    public function exists($primaryKeyValue)\n    {\n        return $this->getStorageInstance()->exists($primaryKeyValue);\n    }\n\n    /**\n     * Загружает данные в объект из массива\n     * \n     * @param array $data - массив ключ => значение\n     * @param string $remove_prefix - префикс, который будет удален перед ключем\n     * @return AbstractObject\n     */\n    public function getFromArray(array $data, $remove_prefix = null, $mark_modify = true)\n    {\n        foreach ($data as $key => $value) {\n            $propname = ($remove_prefix !== null) ? str_replace($remove_prefix, '', $key) : $key;\n            $this->_values[$propname] = $value;\n            if ($mark_modify) {\n                self::$local[$this->_local_id]['modified'][$propname] = true;\n            }\n        }\n\n        $this->afterObjectLoad();\n        \\RS\\Event\\Manager::fire('orm.afterload.' . $this->getShortAlias(), array(\n            'orm' => $this,\n        ));\n        \n        return $this;\n    }\n\n    /**\n     * Возвращает ассоциативный массив свойств и значений текущего объекта\n     * @return array\n     */\n    public function getValues()\n    {\n        return $this->_values;\n    }\n\n    /**\n     * Возвращает true, если свойство $property изменено\n     * \n     * @param string $property - имя свойства\n     * @return boolean\n     */\n    public function isModified($property)\n    {\n        if (isset(self::$local[$this->_local_id]['modified'][$property])) {\n            return true;\n        } else {\n            return $this->getProp($property)->isAlwaysModify();\n        }\n    }\n\n    /**\n     * Возвращает объект PropertyIterator, который используется в текущем объекте\n     * @return \\RS\\Orm\\PropertyIterator\n     */\n    public function getPropertyIterator()\n    {\n        $this->initProperties();\n        return self::$local[$this->_local_id]['properties'];\n    }\n\n    /**\n     * Дополняет текущий класс объектов новыми полями(свойствами)\n     * \n     * @param array $properties - массив со свойствами, аналогично тому, что задается в _init\n     * @return AbstractObject\n     */\n    public function appendProperty(array $properties)\n    {\n        $this->getPropertyIterator()->append($properties);\n        $this->afterInit();\n        return $this;\n    }\n\n    /**\n     * Возвращает имя таблицы текущего объекта\n     * \n     * @param boolean $with_quotes - если true, то оборачивать в апострофами имя таблицы\n     * @return string\n     */\n    protected function _tableName($with_quotes = true)\n    {\n        if (!isset(static::$table)) {\n            throw new \\RS\\Exception(t('Не задано имя таблицы в ORM объекте %0', $this->_self_class));\n        }\n        $table = \\Setup::$DB_TABLE_PREFIX . static::$table;\n        return ($with_quotes) ? \"`$table`\" : $table;\n    }\n\n    /**\n     * Возвращает базу данный и имя таблицы\n     * @return string\n     */\n    public function _getTable()\n    {\n        return \"`\" . static::$db . \"`.\" . $this->_tableName();\n    }\n\n    /**\n     * Возвращает базу данный и имя таблицы в виде массива\n     * @return array - где [0] => имя базы, [1] => имя таблицы\n     */\n    public function _getTableArray()\n    {\n        return array(static::$db, $this->_tableName(false));\n    }\n\n    /**\n     * Возвращает имя свойства, которое помечено как первичный ключ.\n     * Для совместимости с предыдущими версиями, метод ищет первичный ключ в свойствах. \n     * \n     * С целью увеличения производительности необходимо у наследников реализовать явное\n     * возвращение свойств, отвечающих за первичный ключ.\n     * \n     * @return string | array | false - false в случае отсутствия такого свойства\n     */\n    public function getPrimaryKeyProperty()\n    {\n        foreach ($this->getPropertyIterator() as $key => $prop)\n            if ($prop->isPrimaryKey())\n                return $key;\n\n        return false;\n    }\n\n    /**\n     * Возвращает список объектов свойств с установленными значениями\n     * \n     * @return PropertyIterator\n     */\n    final public function getProperties()\n    {\n        $this->initProperties();\n        $properties = self::$local[$this->_local_id]['properties'];\n        $properties->setValues($this->_values);\n        return $properties;\n    }\n\n    /**\n     * Возвращает объект свойства\n     * @return Type\\AbstractType\n     */\n    function getProp($offset)\n    {\n        $this->initProperties();\n        \n        $properties = self::$local[$this->_local_id]['properties'];\n        $value = isset($this->_values[$offset]) ? $this->_values[$offset] : null;\n\n        if (isset($properties[$offset])) {\n            $property = $properties[$offset];\n        } else {\n            $property = new Type\\Mixed();\n        }\n\n        $property->set($value);\n        if (isset(self::$local[$this->_local_id]['formerror'][$offset])) {\n            $property->setErrors(self::$local[$this->_local_id]['formerror'][$offset]);\n        } else {\n            $property->setErrors(array());\n        }\n        return $property;\n    }\n\n    /**\n     * Сохраняет объект\n     * Если передан $primaryKeyValue, то обновляет его свойства, если нет то вставляет новую запись\n     * @param mixed $primaryKeyValue\n     */\n    public function save($primaryKeyValue = null, $user_post = array(), $post_var = null, $files_var = null)\n    {\n        if ($this->checkData($user_post, $post_var, $files_var)) {\n            foreach ($this->getProperties() as $key => $property) {\n                $property->selfSave(); //Если это сложный объект, то пусть он сам себя сохраняет(например делает запись в промежуточной таблице)\n                $this->_values[$key] = $property->get();\n            }\n\n            if ($this->getLocalParameter('replaceOn')) {\n                return $this->replace();\n            } else {\n                if (isset($primaryKeyValue)) {\n                    return $this->update($primaryKeyValue);\n                } else {\n                    return $this->insert();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Устанавливает режим вставки\n     * \n     * @param boolean $bool - если true, то метод save будет использовать для вставки вместо insert - replace.\n     * @return void\n     */\n    function replaceOn($bool)\n    {\n        $this->setLocalParameter('replaceOn', $bool);\n    }\n\n    /**\n     * Устанавливает номер бита, который следует проверять при вызове CheckData (вызывается перед записью)\n     * \n     * @param integer $n - номер бита\n     * @return void\n     */\n    function setWriteBit($n)\n    {\n        $this->setLocalParameter('write_bit', $n);\n    }\n\n    /**\n     * Устанавливает, какие ключи должны приниматься из POST для сохранения объекта\n     * \n     * @param array $keys\n     */\n    public function usePostKeys(array $keys)\n    {\n        $this->setLocalParameter('use_keys', $keys);\n    }\n\n    /**\n     * Устанавливает, какие ключи должны исключаться из POST при сохранении объекта\n     *\n     * @param array $keys\n     */\n    public function excludePostKeys(array $keys)\n    {\n        $this->setLocalParameter('exclude_keys', $keys);\n    }\n\n    /**\n     * Проверка на возможность сохранения данных. при этом объект заполняется из POST. насколько это возможно.\n     * \n     * @param array $user_post - дополнительные данные, которые будут добавлены к post_var\n     * @param array $post_var - если передан, то будет использован вместо $_POST\n     * @param array $files_var - если передан, то будет использован вместо $_FILES\n     * @param array $usekeys - массив с ключами, которые нужно исползовать для заполнения объекта\n     * @param array $exclude - массив с ключами, которые нужно исключить при заполнении объекта\n     * @return boolean\n     */\n    public function checkData($user_post = array(), $post_var = null, $files_var = null, $usekeys = null, $exclude = null)\n    {\n        if (!isset($post_var))\n            $post_var = $_POST;\n        if (!isset($files_var))\n            $files_var = $_FILES;\n        if (!isset($usekeys))\n            $usekeys = $this->getLocalParameter('use_keys');\n        if (!isset($exclude))\n            $exclude = $this->getLocalParameter('exclude_keys');\n\n        $post_var = array_merge($post_var, $user_post);\n        //$this->clearErrors();\n\n        //Проверяем права на запись для модуля\n        $check_rights = $this->getLocalParameter('checkRights');\n        if ($check_rights && ($acl_err = \\RS\\AccessControl\\Rights::CheckRightError($this, $this->getLocalParameter('write_bit')))) \n        {\n            $this->addError($acl_err);\n        }//Конец проверки прав на запись для модуля        \n        //Заполняем свойства\n        $request_data = $post_var + $files_var;\n        foreach ($this->getProperties() as $key => $property) {\n            //Пропускаем заполнение свойства, если необходимо\n            if (isset($usekeys) && !in_array($key, $usekeys))\n                continue;\n            if (isset($exclude) && in_array($key, $exclude))\n                continue;\n            if (!$property->isListenPost() && !isset($user_post[$key]))\n                continue;\n\n            $value = $property->getFromRequest($request_data);\n\n            if (isset($value)) {\n                $this[$key] = $value;\n            }\n        }\n\n        $this->validate();\n        \n        return !$this->hasError();\n    }\n\n    /**\n     * Производит валидацию текущих данных в свойствах\n     * \n     * @return bool Возвращает true, если нет ошибок, иначе - false\n     */\n    function validate()\n    {\n        //Валидация свойств\n        $result = true;\n        $check_fields = $this->getLocalParameter('check_fields', null);\n        foreach ($this->getProperties() as $key => $property) {\n            if ($check_fields === null || in_array($key, $check_fields)) {\n                \n                $err = $this->checkField($property);  //Пропускаем через валидаторы форм\n                if ($err !== true) {\n                    $this->addError($err, $key);\n                    $property->setErrors(array($err));\n                    $result = false;\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Устанавливает, какие поля проверять при вызове checkData\n     * \n     * @param array $fields\n     * @return void\n     */\n    function setCheckFields(array $fields)\n    {\n        $this->setLocalParameter('check_fields', $fields);\n    }\n\n    /**\n     * При заполнении данными с помощью метода check(), \n     * указанные свойства будут пропущены через функцию htmlspecialchars.\n     * \n     * @param array $escape_fields - массив с названиями свойств, которые нужно перевести в entity\n     */\n    function escapeFields(array $escape_fields)\n    {\n        $this->setLocalParameter('escape_fields', $escape_fields);\n    }\n\n    /**\n     * Переводить в entity все значения свойств перед записью?\n     * \n     * @param boolean $bool - если true, то будут переведены в entity все свойства\n     */\n    function escapeAll($bool)\n    {\n        $this->setLocalParameter('escape_all', $bool);\n    }\n\n    /**\n     * Возвращает результат проверки поля $key\n     * \n     * @param string | \\RS\\Orm\\Type\\AbstractType $key\n     * @return boolean | string - true, если все успешно иначе текст ошибки\n     */\n    public function checkField($property)\n    {\n        if (!($property instanceof Type\\AbstractType)) {\n            $property = $this->getProp($property);\n        }\n           \n\n        foreach ($property->getCheckers() as $checker) {\n            \n            $param = array_merge(array($this, $property->get()), $checker['param']);\n            if (is_string($checker['callmethod'])) {\n                $callback = array('\\RS\\Orm\\Type\\Checker', $checker['callmethod']);\n            } else {\n                $callback = $checker['callmethod'];\n            }\n            /* Передает checker'у параметры:\n              1.$this - текущий объект\n              2.$value - значение поля на проверку\n              3.$errortext - текст ошибки\n              4.... произвольные параметры, переданные в setChecker у свойства\n              5....\n              ... */\n            $result = call_user_func_array($callback, $param);\n            \n            \n            \n            if ($result !== true)\n                return $result;\n        }\n        return true;\n    }\n\n    /**\n     * Проверяет поле в зависимости от значений других полей.\n     * Вызывает реальные checker'ы, если соблюдены conditions,\n     * иначе не вызывает checker\n     */\n    public static function chkDepend($coreobj, $value, $real_errtext, $real_chk, array $conditions, $real_params = array())\n    {\n        $flag = true;\n        foreach ($conditions as $key => $val) {\n            if (is_array($val)) {\n                if (!in_array($coreobj[$key], $val))\n                    $flag = false;\n            } else {\n                if ($coreobj[$key] != $val)\n                    $flag = false;\n            }\n        }\n        if (!$flag)\n            return true; //Сообщаем, что поле прошло прверку, если условия использования чекера не подходят\n\n        $param = array_merge(array($coreobj, $value, $real_errtext), $real_params);\n\n        if (is_array($real_chk)) {\n            $callback = $real_chk;\n        } else {\n            $chk = new Type\\Checker();\n            $callback = array($chk, $real_chk);\n        }\n        return call_user_func_array($callback, $param);\n    }\n\n    /**\n     * Дабавляет ошибку\n     * \n     * @param string $string - текст ошибки\n     * @param string $form - свойство, в котором произошла ошибка\n     * @return bool(false)\n     */\n    public function addError($string, $form = null)\n    {\n        $local = &self::$local[$this->_local_id];\n        $local['errorlist'] [] = $string;\n\n        if ($form !== null) {\n            $local['formerror'] [$form][] = $string;\n        } else {\n            $local['non_form_errors'] [] = $string;\n        }\n        return false;\n    }\n\n    /**\n     * Добавляет ошибки\n     * \n     * @param mixed $array - массив с ошибками\n     * @param mixed $form - свойство в котором произошли ошибки\n     * @return bool(false)\n     */\n    public function addErrors($array, $form = null)\n    {\n        $local = &self::$local[$this->_local_id];\n        $local['errorlist'] = array_merge($local['errorlist'], $array);\n\n        if ($form !== null) {\n            if (!isset($local['formerror'][$form]))\n                $local['formerror'][$form] = $array;\n            else\n                $local['formerror'][$form] = array_merge($local['formerror'][$form], $array);\n        } else {\n            $local['non_form_errors'] = array_merge($local['non_form_errors'], $array);\n        }\n        return false;\n    }\n\n    /**\n     * @deprecated\n     * Возвращает массив с текстами всех ошибок.\n     */\n    public function getLastError()\n    {\n        return $this->getLocalParameter('errorlist');\n    }\n\n    /**\n     * Возвращает массив с текстами всех ошибок.\n     * @return array\n     */\n    public function getErrors()\n    {\n        return $this->getLocalParameter('errorlist');\n    }\n    \n    /**\n    * Возвращает ошибки в виде строки\n    * \n    * @return string\n    */\n    function getErrorsStr()\n    {\n        return implode(', ', $this->getErrors());\n    }    \n\n    /**\n     * Возвращает true, если есть ошибки.\n     * @return boolean\n     */\n    public function hasError()\n    {\n        return !empty(self::$local[$this->_local_id]['errorlist']);\n    }\n\n    /**\n     * Возвращает массив форм, в которых есть ошибки\n     * @return array\n     */\n    public function getFormError()\n    {\n        return array_keys(self::$local[$this->_local_id]['formerror']);\n    }\n\n    /**\n     * Возвращает ассоциативный массив с ошибками в формах, если $key = null\n     * Возвращает массив с ошибками, если $key != null и $sep = null\n     * Возвращает строку с ошибками, с разделителем $sep, если $key != null и $sep != null\n     * \n     * @param string | null $key - имя свойство\n     * @param string | null $sep - разделитель\n     * @return array | string\n     */\n    public function getErrorsByForm($key = null, $sep = null)\n    {\n        $local = &self::$local[$this->_local_id];\n        if ($key === null)\n            return $local['formerror'];\n        if ($sep === null) {\n            return isset($local['formerror'][$key]) ? $local['formerror'][$key] : array();\n        } else {\n            return isset($local['formerror'][$key]) ? implode($sep, $local['formerror'][$key]) : '';\n        }\n    }\n\n    /**\n     * Возвращает массив с ошибками со сведениями о поле\n     * @return array\n     */\n    public function getDisplayErrors()\n    {\n        $errors_by_form = $this->getErrorsByForm();\n        $non_form_errors = $this->getNonFormErrors();\n        $errors = array();\n        if (count($non_form_errors)) {\n            $errors['@system'] = array(\n                'class' => 'system',\n                'fieldname' => t('Системное сообщение'),\n                'errors' => $non_form_errors\n            );\n        }\n\n        foreach ($errors_by_form as $key => $error_list) {\n            if (self::$local[$this->_local_id]['properties'][$key]) {\n                $prop = $this->getProp($key);\n                $fieldname = $prop->getDescription() != '' ? $prop->getDescription() : $prop->getName();\n            } else {\n                $fieldname = $key;\n            }\n            $errors[$key] = array(\n                'class' => 'field',\n                'fieldname' => $fieldname,\n                'errors' => $error_list\n            );\n        }\n        return $errors;\n    }\n\n    /**\n     * Возвращает true, если недостаточно прав на изменение данного объекта.\n     * @return void\n     */\n    public function noWriteRights()\n    {\n        $error = \\RS\\AccessControl\\Rights::CheckRightError($this, ACCESS_BIT_WRITE);\n        if ($error !== false) {\n            $this->addError($error);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Возвращает ошибки не привязанные к формам\n     * @return array\n     */\n    public function getNonFormErrors()\n    {\n        return $this->getLocalParameter('non_form_errors');\n    }\n\n    /**\n     * Очищает все ошибки в объекте\n     * @return void\n     */\n    public function clearErrors()\n    {\n        $this->setLocalParameter('errorlist', array());\n        $this->setLocalParameter('formerror', array());\n        $this->setLocalParameter('non_form_errors', array());\n    }\n\n    /**\n     * Устанавливает объекту отрицательный id\n     */\n    function setTemporaryId()\n    {\n        return $this[$this->getPrimaryKeyProperty()] = -time();\n    }\n\n    /**\n     * Устанавливает шаблон, который будет использоваться для создания формы\n     * \n     * @param string $template - путь к шаблону\n     */\n    function setFormTemplate($template)\n    {\n        $this->setLocalParameter('form_template', $template);\n    }\n\n    /**\n     * Приводит базу данных в соответствие со структурой объекта\n     * \n     * @return bool\n     */\n    function dbUpdate()\n    {\n        if ($this->getStorageInstance() instanceof \\RS\\Orm\\Storage\\Db) {\n            $map = new DbMap($this->getProperties(), $this->getIndexes(), static::$db, $this->_tableName(false));\n            return $map->sync();\n        }\n        return true;\n    }\n\n    /**\n     * Добавляет описание индекса для данного объекта\n     * \n     * @param array | string $fields - поля, которые должны войти в индекс\n     * @param string $type - тип индекса. Используйте константы:\n     *    self::INDEX_PRIMARY - первичный ключ\n     *    self::INDEX_UNIQUE - уникальный индекс\n     *    self::INDEX_KEY - неуникальный индекс\n     *    self::INDEX_FULLTEXT - полнотекстовый индекс\n     * @param string $name - идентификатор индекса\n     * @param string $using - тип индекса BTREE | HASH\n     * @return AbstractObject\n     */\n    function addIndex($fields, $type = self::INDEX_KEY, $name = null, $using = null)\n    {\n        $fields = (array) $fields;\n        if ($name === null) {\n            $name = str_replace(' ', '', strtolower(implode('_', $fields)));\n        }\n        if ($type == self::INDEX_PRIMARY) {\n            $name = 'PRIMARY';\n        }\n\n        self::$class[$this->_self_class]['indexes'][$name] = array(\n            'fields' => $fields,\n            'type' => $type,\n            'name' => $name,\n            'using' => $using\n        );\n\n        //Если полю присваевается первичный ключ, то возможность установить NULL запрещается\n        if ($type == self::INDEX_PRIMARY) {\n            foreach ($fields as $field) {\n                $this->getProp($field)->setAllowEmpty(false);\n            }\n        }\n        return $this;\n    }\n\n    function getIndexes()\n    {\n        //Добавляем индексы, установленные у полей\n        foreach ($this->getProperties() as $key => $property) {\n            if ($property->isPrimaryKey()) {\n                $this->addIndex($key, self::INDEX_PRIMARY);\n            }\n            if ($property->isUnique()) {\n                $this->addIndex($key, self::INDEX_UNIQUE);\n            }\n            if ($property->isIndex()) {\n                $this->addIndex($key, self::INDEX_KEY);\n            }\n        }\n\n        return $this->getClassParameter('indexes');\n    }\n\n    /**\n     * Возвращает HTML форму объекта, если её не существует по указанному пути, то создает её.\n     * \n     * @param array $tpl_vars - дополнительные параметры, передаваемые в шаблон\n     * @param mixed $switch - контекст, в котором будет генерироваться форма. Позволяет скрывать какие-либо поля в зависимости от контекста\n     * @param bool $is_multiedit - Если true, то это форма мультиредактирования\n     * @param mixed $template - имя файла генерируемого шаблона\n     * @param mixed $tpl_maker - имя шаблона, по которому будет произведена генерация \n     * @param mixed $tpl_folder - каталог для генерации шаблона\n     * @return string\n     */\n    function getForm(array $tpl_vars = null, $switch = null, $is_multiedit = false, $template = null, $tpl_maker = null, $tpl_folder = null)\n    {\n        if ($tpl_maker === null) {\n            $tpl_maker = $is_multiedit ? '%system%/coreobject/multiedit_form.tpl' : '%system%/coreobject/src_form.tpl';\n        }\n\n        if ($tpl_folder === null) {\n            $module = \\RS\\Module\\Item::nameByObject($this);\n            $tpl_folder = \\Setup::$PATH . \\Setup::$MODULE_FOLDER . '/' . $module . \\Setup::$MODULE_TPL_FOLDER;\n        }\n\n        if ($template === null) {\n            $default_filename = strtolower(str_replace('\\\\', '_', $this->_self_class));\n            $filename = $this->getLocalParameter('form_template', $default_filename); //Получаем имя файла\n            $me = $is_multiedit ? 'me_' : ''; //Префикс шаблона мультиредактирования\n            $hash = $this->getPropertyHash($is_multiedit, $switch);\n            $template = $tpl_folder . '/form/' . $me . $filename . '_' . strtolower($switch) . $hash . '.auto.tpl';\n        }\n\n        if (!file_exists($template)) {\n            //Нужно создать шаблон исходя из полей объекта\n            $make_form = new \\RS\\View\\Engine();\n\n            $properties = $this->getPropertyIterator();\n            $make_form->assign(array(\n                'prop' => $properties,\n                'elem' => $this,\n                'switch' => $switch\n            ));\n\n            $content = $make_form->fetch($tpl_maker);\n\n            \\RS\\File\\Tools::makePath($template, true);\n            file_put_contents($template, $content);\n        }\n\n        $inputs = new \\RS\\View\\Engine();\n        if ($tpl_folder) {\n            $inputs->setTemplateDir($tpl_folder);\n        }\n\n        if ($tpl_vars) {\n            $inputs->assign($tpl_vars);\n        }\n\n        $inputs->assign('elem', $this);\n        return $inputs->fetch($template);\n    }\n\n    /**\n     * Возвращет HTML форму одного свойства объекта.\n     * \n     * @param string $key - имя свойства\n     * @param array $attributes - массив с атрибутами для формы\n     * @param array $view_params - массив с атрибутами для формы [form => true, errors => true], form - только сама форма, errors - форма с ошибками\n     * @return string\n     */\n    public function getPropertyView($key, $attributes = array(), $view_params = array())\n    {\n        $sm = new \\RS\\View\\Engine();\n        $property = $this->getProp($key);\n        $property->setAttr($attributes);\n\n        $sm->assign(array(\n            'prop' => $property,\n            'view_params' => $view_params,\n            'object' => $this\n        ));\n        return $sm->fetch($this->getClassParameter('property_template'));\n    }\n\n    /**\n     * Возвращает Хэш от списка свойств объекта\n     * \n     * @param bool $is_multiedit\n     * @param string | null $switch\n     */\n    protected function getPropertyHash($is_multiedit, $switch = null)\n    {\n        $groups = $this->getPropertyIterator()->getGroups($is_multiedit, $switch);\n        $str = '';\n        foreach ($groups as $data) {\n            $str .= $data['group'] . implode('', array_keys($data['items']));\n        }\n\n        return sprintf('%u', crc32($str));\n    }\n\n    /**\n     * Возвращает ключ => значение всех полей типа Type/Hidden\n     * @return array\n     */\n    public function getHiddenKeyVal()\n    {\n        $result = array();\n        foreach (self::$local[$this->_local_id]['properties'] as $key => $prop) {\n            if ($prop instanceof Type\\Hidden) {\n                $result[$key] = $this[$key];\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Добавляет скрытые поля\n     * \n     * @param string | array $key\n     * @param mixed $value\n     * @return void\n     */\n    public function addHiddenFields($keys, $value = null)\n    {\n        if (!is_array($keys)) {\n            $keys = array($keys => $value);\n        }\n        foreach ($keys as $key => $value) {\n            self::$local[$this->_local_id]['properties'][$key] = new Type\\Hidden();\n            $this[$key] = $value;\n        }\n    }\n\n    /**\n    * @deprecated\n    * Необходимо реализовывать метод getDebugActions()\n    */\n    public function addDebugActions(array $actions, $local = false)\n    {}\n\n    /**\n    * @deprecated\n    * Необходимо реализовывать метод getDebugActions()\n    */\n    public function addDebugAction(\\RS\\Debug\\Action\\AbstractAction $action, $local = false)\n    {}\n\n    /**\n     * Возвращает строку с необходимыми атрибутами блочного элемента для вставки в html\n     * @return string | null\n     */\n    public function getDebugAttributes()\n    {\n        if ($actions = $this->getDebugActions()) {\n            return \\RS\\Debug\\Group::getContextAttributes($actions, $this);\n        }\n    }\n\n    /**\n     * Возвращает клон текущего объекта\n     * @return AbstractObject\n     */\n    public function cloneSelf()\n    {\n        $clone = new $this->_self_class;\n        $clone->getFromArray($this->getValues());\n        if (isset($clone['sortn'])){ //Если есть индекс сортировки то очистим его\n           unset($clone['sortn']); \n        }\n        $pk = $this->getPrimaryKeyProperty();\n        if ($pk) {\n            $clone[$pk] = null; //Очищаем первичный ключ объекта\n        }\n        \n        \\RS\\Event\\Manager::fire('orm.clone.' . $this->getShortAlias(), $clone);\n        \n        return $clone;\n    }\n\n    /**\n     * Уничтожает класс объектов, в следующем конструкторе будет вызван _init\n     * @return void\n     */\n    public static function destroyClass()\n    {\n        unset(self::$class[get_called_class()]);\n    }\n\n    /**\n     * Вызывается перед сохранением объекта в storage\n     * @param insert|update|replace $save_flag\n     * \n     * @return null | false Если возвращено false, то сохранение не произойдет\n     */\n    public function beforeWrite($save_flag)\n    {}\n\n    /**\n     * Вызывается после сохранения объекта в storage\n     * @param insert|update|replace $save_flag\n     * \n     * @return void\n     */\n    public function afterWrite($save_flag)\n    {}\n\n    /**\n     * Вызывается после загрузки объекта\n     * \n     * @return void\n     */\n    public function afterObjectLoad()\n    {}\n    \n    /**\n    * Возвращает отладочные действия, которые можно произвести с объектом\n    * \n    * @return RS\\Debug\\Action[]\n    */\n    public function getDebugActions()\n    {\n        return array();\n    }\n\n    /**\n     * Удаляет таблицу для данного объекта\n     * \n     * @return bool\n     */\n    public function dropTable()\n    {\n        if ($this->getStorageInstance() instanceof \\RS\\Orm\\Storage\\Db) {\n            try {\n                $sql = \"DROP TABLE IF EXISTS \" . $this->_getTable();\n                \\RS\\Db\\Adapter::sqlExec($sql);\n            } catch (\\RS\\Db\\Exception $e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //начало свойств интерфейса итератора\n    public function current()\n    {\n        $property = key($this->_values);\n        return $this->getProp($property);\n    }\n\n    public function key()\n    {\n        return key($this->_values);\n    }\n\n    public function next()\n    {\n        next($this->_values);\n        $valid = $property = key($this->_values);\n        return ($valid && $this->getProp($property));\n    }\n\n    public function rewind()\n    {\n        reset($this->_values);\n        $valid = $property = key($this->_values);\n        return ($valid && $this->getProp($property));\n    }\n\n    public function valid()\n    {\n        return key($this->_values) !== null;\n    }\n\n    //конец свойств интерфейса итератора\n\n    /**\n     * При сериализации объекта - достаточно сохранить массив его значений.\n     */\n    function __sleep()\n    {\n        return array('_values');\n    }\n\n    /**\n     * Позволяет сконструировать объект заново после рассериализации\n     */\n    function __wakeup()\n    {\n        $this->__construct();\n    }\n    \n    function __clone()\n    {\n        $this->__construct();\n    }\n    \n}",
			"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/core/rs/orm/abstractobject.inc.php",
			"file_size": 54979,
			"file_write_time": 130996254611863747,
			"settings":
			{
				"buffer_size": 47336,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "{assign var=shop_config value=ConfigLoader::byModule('shop')}\n{assign var=check_quantity value=$shop_config.check_quantity}\n\n{*Подгружаем цвета*}\n{modulegetvars name=\"\\Colors\\Controller\\BlockValues\" var=\"colors\"}\n\n\n<div class=\"authorization formStyle reserveForm complectsPopup\">\n	<div class=\"multiComplectations{if !$product->isAvailable()} notAvaliable{/if}{if $product->canBeReserved()} canBeReserved{/if}{if $product.reservation == 'forced'} forcedReserve{/if}\" data-id=\"{$product.id}\">\n		<div class=\"row\">\n			<div class=\"col-md-24\">\n				<h1>{$product.title}</h1>\n			</div>\n		</div>\n		<div class=\"row\">\n			<div class=\"col-md-12 leftColumn\">\n				<div class=\"image\">\n					{$main_image=$product->getMainImage()}\n					<img src=\"{$main_image->getUrl(275, 380)}\" class=\"photo\" alt=\"{$main_image.title|default:\"{$product.title}\"}\"/>\n				</div>\n			</div>\n			<div class=\"col-md-12 rightColumn\">\n				<div class=\"fcost\">\n					{*assign var=last_price value=$product->getCost('Зачеркнутая цена')}\n					{if $last_price>0}<div class=\"lastPrice\">{$last_price}</div>{/if*}\n					<span class=\"myCost\">{$product->getCost()} {$product->getCurrency()}</span>\n				</div>\n				{if $product.barcode}\n					<p class=\"barcode\"><span class=\"cap\">Артикул:</span> <strong class=\"offerBarcode\">{$product.barcode}</strong></p>\n				{/if}\n\n				<div class=\"information\">\n				    {if $product->isMultiOffersUse()}\n				        {* Многомерные комплектации *}\n				        <span class=\"pname\">{$product.offer_caption|default:'Комплектация'}</span>\n				        {* Подгрузим у многомерных комплектаций фото к их вариантам *}\n				        {$product->fillMultiOffersPhotos()}\n				        {* Переберём доступные многомерные комплектации *}\n				        <div class=\"multiOffers\">\n				            {foreach $product.multioffers.levels as $level}\n				                {if !empty($level.values)}\n				                <div class=\"clearfix\"></div>\n				                    <div class=\"multiofferTitle\">{if $level.title}{$level.title}{else}{$level.prop_title}{/if}</div>\n				                    {if !$level.is_photo && !isset($level.values_photos)} {* Если отображать не как фото (выпадающим списком)*}\n				                        <select name=\"multioffers[{$level.prop_id}]\" data-prop-title=\"{if $level.title}{$level.title}{else}{$level.prop_title}{/if}\">\n				                            {foreach $level.values as $value}\n				                                <option value=\"{$value.val_str}\">{$value.val_str}</option>\n				                            {/foreach}\n				                        </select>\n				                        <div class=\"multiofferBlock multiofferBlock{$level.prop_id}\">\n											{foreach $level.values as $value key=i}\n												<div class=\"moItem{if $i == 1} active{/if}\"><div class=\"moItemInner\">{$value.val_str}</div></div>\n											{/foreach}\n										</div>\n										<div class=\"clearfix\"></div>\n				                    {else} {* Как фото (цвет) *}\n				                        <div class=\"multiOfferValues\">\n				                            <input type=\"hidden\" name=\"multioffers[{$level.prop_id}]\" data-prop-title=\"{if $level.title}{$level.title}{else}{$level.prop_title}{/if}\"/>\n				                            <div class=\"multiofferBlock multiofferBlock{$level.prop_id}\">\n												{foreach $level.values as $value key=i}\n													<div class=\"moItem{if $i == 1} active{/if}\"><div class=\"moItemInner\" style=\"background-color:#fff;background-image: linear-gradient( -45deg, {$colors.colors[$value.val_str].color2} 0%, {$colors.colors[$value.val_str].color2} 50%, {$colors.colors[$value.val_str].color1} 50%, {$colors.colors[$value.val_str].color1} 50%);\" title=\"{$value.val_str}\">{$value.val_str}</div></div>\n												{/foreach}\n											</div>\n				                        </div>\n				                    {/if}\n				                {/if}\n				            {/foreach}\n				        </div>\n				        {if $product->isOffersUse()}\n				            {foreach from=$product.offers.items key=key item=offer name=offers}\n				                <input value=\"{$key}\" type=\"hidden\" name=\"hidden_offers\" class=\"hidden_offers\" {if $smarty.foreach.offers.first}checked{/if} id=\"offer_{$key}\" data-info='{$offer->getPropertiesJson()}' {if $check_quantity}data-num=\"{$offer.num}\"{/if} data-change-cost='{ \".offerBarcode\": \"{$offer.barcode|default:$product.barcode}\", \".myCost\": \"{$product->getCost(null, $key)}\", \".lastPrice\": \"{$product->getOldCost($key)}\"}' data-images='{$offer->getPhotosJson()}' data-sticks='{$offer->getStickJson()}'/>\n				            {/foreach}\n\n				            <input type=\"hidden\" name=\"offer\" value=\"0\"/>\n				        {/if}\n				    {elseif $product->isOffersUse()}\n				        {* Простые комплектации *}\n				        <div class=\"packages\">\n				            <div class=\"package\">\n				                <span class=\"pname\">{$product.offer_caption|default:'Комплектация'}</span>\n				                <div class=\"values\">\n				                    {if count($product.offers.items)>5}\n				                        <select name=\"offer\">\n				                            {foreach from=$product.offers.items key=key item=offer name=offers}\n				                            <option value=\"{$key}\" {if $smarty.foreach.offers.first}checked{/if} {if $check_quantity}data-num=\"{$offer.num}\"{/if} data-change-cost='{ \".myCost\": \"{$product->getCost(null, $key)}\", \".lastPrice\": \"{$product->getOldCost($key)}\"}' data-images='{$offer->getPhotosJson()}' data-sticks='{$offer->getStickJson()}'>{$offer.title}</option>\n				                            {/foreach}\n				                        </select>\n				                    {else}\n				                        {foreach from=$product.offers.items key=key item=offer name=offers}\n				                            <div class=\"packageItem\">\n				                                <input value=\"{$key}\" type=\"radio\" name=\"offer\" {if $smarty.foreach.offers.first}checked{/if} id=\"offer_{$key}\" {if $check_quantity}data-num=\"{$offer.num}\"{/if} data-change-cost='{ \".myCost\": \"{$product->getCost(null, $key)}\", \".lastPrice\": \"{$product->getOldCost($key)}\"}' data-images='{$offer->getPhotosJson()}' data-sticks='{$offer->getStickJson()}'>\n				                                <label for=\"offer_{$key}\">{$offer.title}</label><br>\n				                            </div>\n				                        {/foreach}\n				                    {/if}\n				                </div>\n				            </div>\n				        </div>\n				    {/if}\n				</div>\n\n				<div class=\"amountWrap\">\n					<div class=\"inc\"><i class=\"fa fa-plus\"></i></div>\n					<div class=\"amount\">\n						Количество: <input value=\"1\" type=\"number\" name=\"amount\" class=\"fieldAmount\">\n					</div>\n					<div class=\"dec\"><i class=\"fa fa-minus\"></i></div>\n				</div>\n		        <div class=\"buttons\">\n					{* Вывод наличия на складах *}\n					{assign var=stick_info value=$product->getWarehouseStickInfo()}\n					{assign var=stock value=$product->getWarehouseStock()}\n					<div class=\"restWrap\">\n						{foreach from=$stock.1 item=rest key=key}\n							<div class=\"offerProperty\" data-offer=\"{$key}\">\n								{if $rest.stock == 0}\n									<span class=\"text-danger\"><strong>Нет в наличии</strong></span>\n									{* Кнопка заказать\n									<a data-href=\"{$router->getUrl('shop-front-reservation', [\"product_id\" => $product.id])}\" class=\"button reserve inDialog\">Заказать</a> *}\n								{elseif $rest.stock > 0 && $rest.stock <= 3}\n									Кол-во на складе: <span class=\"text-primary\"><strong>{$rest.stock}</strong></span>\n								{else}\n									Кол-во на складе: <span class=\"text-success\"><strong>много</strong></span>\n								{/if}\n							</div>\n						{/foreach}\n					</div>\n					<a data-href=\"{$router->getUrl('shop-front-cartpage', [\"add\" => $product.id])}\" class=\"cornered button addToCart noShowCart\">В корзину</a>\n				</div>\n			</div>\n		</div>\n		<div class=\"row\">\n			<div class=\"col-md-24\">\n				<div class=\"information\">\n				{if $product.description}\n					<p class=\"descr\">{$product.description|strip_tags|teaser:510}</p>\n				{/if}\n				</div>\n				<div class=\"clearfix\"></div>\n			</div>\n		</div>\n	</div>\n</div>\n\n{literal}\n    <script type=\"text/javascript\">\n        $(function() {\n            $('[name=\"offer\"]').changeOffer();\n        });\n        $('.multiComplectations .addToCart').on('click',function(){\n            $.colorbox.close();\n        });\n        $('.moItem').on('click', function() {\n			var value = $(this).text();\n			$(this).addClass('active').siblings('.moItem').removeClass('active');\n			$(this).parent().prev('[name^=\"multioffers[\"]').val(value).trigger('change');\n		});\n    </script>\n{/literal}\n",
			"file": "show_complekts.tpl",
			"file_size": 8895,
			"file_write_time": 130996202566311490,
			"settings":
			{
				"buffer_size": 8548,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(\n    [id] => 568\n    [category] => modDocument\n    [name] => modDocument::black night_id594::black night_id594\n    [closed] => 0\n    [date] => 1454315145\n    [votes_up] => 44\n    [votes_down] => 0\n    [votes_total] => 44\n    [votes_balance] => 44\n    [votes_pct_up] => 100\n    [votes_pct_down] => 0\n    [user_voted] => \n)\n\n",
			"settings":
			{
				"buffer_size": 324,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n/**\n* ReadyScript (http://readyscript.ru)\n*\n* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)\n* @license http://readyscript.ru/licenseAgreement/\n*/\nnamespace Shop\\Controller\\Front;\nuse \\RS\\Application\\Auth as AppAuth;\n\n/**\n* Контроллер Оформление заказа\n*/\nclass Checkout extends \\RS\\Controller\\Front\n{\n    protected\n        $order_api,\n        /**\n        * @var \\Shop\\Model\\Orm\\Order\n        */\n        $order;\n\n    /**\n    * Инициализация контроллера\n    */\n    function init()\n    {\n        $this->app->title->addSection(t('Оформление заказа'));\n        $this->order = \\Shop\\Model\\Orm\\Order::currentOrder();\n        $this->order_api = new \\Shop\\Model\\OrderApi();\n\n        $this->order->clearErrors();\n        $this->view->assign('order', $this->order);\n    }\n\n\n    function actionIndex()\n    {\n        $this->order->clear();\n\n        //Замораживаем объект \"корзина\" и привязываем его к заказу\n        $frozen_cart = \\Shop\\Model\\Cart::preOrderCart(null);\n        $frozen_cart->splitSubProducts();\n        $frozen_cart->mergeEqual();\n\n        $this->order->linkSessionCart($frozen_cart);\n        $this->order->setCurrency( \\Catalog\\Model\\CurrencyApi::getCurrentCurrency() );\n\n        $this->order['ip'] = $_SERVER['REMOTE_ADDR'];\n\n        $this->order['expired'] = false;\n        $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'address')));\n    }\n\n    /**\n    * Шаг 1. Установка адреса и контактов\n    */\n    function actionAddress()\n    {\n        if ( !$this->order->getCart() ) $this->redirect();\n        $this->app->title->addSection(t('Адрес и контакты'));\n        $captcha_config = \\RS\\Config\\Loader::byModule('kaptcha');\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                ->addBreadCrumb(t('Корзина'), $this->router->getUrl('shop-front-cartpage'))\n                ->addBreadCrumb(t('Адрес и контакты'));\n\n        $logout      = $this->url->request('logout', TYPE_BOOLEAN);\n        $login       = $this->url->request('ologin', TYPE_BOOLEAN); //Предварительная авторизация\n\n\n        if ($logout) {\n            AppAuth::logout();\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'address')));\n        }\n\n        $this->order['__code']->setEnable(false);\n        if (AppAuth::isAuthorize()) {\n            $this->order['user_type'] = null;\n            $this->order['__code']->setEnable(false);\n        } else {\n            if ($captcha_config['enabled']){\n                $this->order['__code']->setEnable(true);\n            }\n\n            if (empty($this->order['user_type'])) {\n                $this->order['user_type'] = 'person';\n                $this->order['reg_autologin'] = 1;\n            }\n        }\n\n        $cart_data = $this->order['basket'] ? $this->order->getCart()->getCartData() : null;\n        if ($cart_data === null || !count($cart_data['items']) || $cart_data['has_error'] || $this->order['expired']) {\n            //Если корзина пуста или заказ уже оформлен или имеются ошибки в корзине, то выполняем redirect на главную сайта\n            $this->redirect();\n        }\n\n\n        //Запрашиваем дополнительные поля формы заказа, если они определены в конфиге модуля\n        $order_fields_manager  = $this->order->getFieldsManager();\n        $order_fields_manager->setValues($this->order['userfields_arr']);\n\n        //Запрашиваем дополнительные поля формы регистрации, если они определены\n        $reg_fields_manager = \\RS\\Config\\Loader::byModule('users')->getUserFieldsManager();\n        $reg_fields_manager->setErrorPrefix('regfield_');\n        $reg_fields_manager->setArrayWrapper('regfields');\n        if (!empty($this->order['regfields'])) $reg_fields_manager->setValues($this->order['regfields']);\n\n\n\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'address', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'address');\n            $work_fields = $this->order->useFields( $sysdata + $_POST );\n\n            $this->order->setCheckFields($work_fields);\n            $this->order->checkData($sysdata, null, null, $work_fields);\n            $this->order['userfields'] = serialize($this->order['userfields_arr']);\n\n            //Авторизовываемся\n            if ($this->order['user_type'] == 'user' && !$logout) {\n                if (!\\RS\\Application\\Auth::login($this->order['login'], $this->order['password'])) {\n                    $this->order->addError('Неверный логин или пароль', 'login');\n                } else {\n                    $this->order['user_type'] = '';\n                    $this->order['__code']->setEnable(false);\n                }\n            }\n\n\n            if (!$logout && !$login) {\n\n                //Проверяем пароль, если пользователь решил задать его вручную. (при регистрации)\n                if (in_array($this->order['user_type'], array('person', 'company')) && !$this->order['reg_autologin']) {\n                    if (($pass_err = \\Users\\Model\\Orm\\User::checkPassword($this->order['reg_openpass'])) !== true) {\n                        $this->order->addError($pass_err, 'reg_openpass');\n                    }\n\n\n                    if(strcmp($this->order['reg_openpass'], $this->order['reg_pass2'])){\n                        $this->order->addError('Пароли не совпадают', 'reg_openpass');\n                    }\n\n\n                    //Сохраняем дополнительные сведения о пользователе\n                    $uf_err = $reg_fields_manager->check($this->order['regfields']);\n                    if (!$uf_err) {\n                        //Переносим ошибки в объект order\n                        foreach($reg_fields_manager->getErrors() as $form=>$errortext) {\n                            $this->order->addError($errortext, $form);\n                        }\n                    }\n                }\n\n                //Регистрируем пользователя, если нет ошибок\n                if (in_array($this->order['user_type'], array('person', 'company'))) {\n\n                    $new_user = new \\Users\\Model\\Orm\\User();\n                    $allow_fields = array('reg_name', 'reg_surname', 'reg_midname', 'reg_phone', 'reg_e_mail',\n                                            'reg_openpass', 'reg_company', 'reg_company_inn');\n                    $reg_fields = array_intersect_key($this->order->getValues(), array_flip($allow_fields));\n\n                    $new_user->getFromArray($reg_fields, 'reg_');\n                    $new_user['data'] = $this->order['regfields'];\n                    $new_user['is_company'] = (int)($this->order['user_type'] == 'company');\n\n                    if (!$new_user->validate()) {\n                        foreach($new_user->getErrorsByForm() as $form => $errors) {\n                            $this->order->addErrors($errors, 'reg_'.$form);\n                        }\n                    }\n\n                    if (!$this->order->hasError()) {\n                        if ($this->order['reg_autologin']) {\n                            $new_user['openpass'] = \\RS\\Helper\\Tools::generatePassword(6);\n                        }\n\n                        if ($new_user->create()) {\n                            if (AppAuth::login($new_user['login'], $new_user['pass'], true, true)) {\n                                $this->order['user_type'] = ''; //Тип регитрации - не актуален после авторизации\n                                $this->order['__code']->setEnable(false);\n                            } else {\n                                throw new \\RS\\Exception('Не удалось авторизоваться под созданным пользователем.');\n                            }\n                        } else {\n                            $this->order->addErrors($new_user->getErrorsByForm('e_mail'), 'reg_e_mail');\n                            $this->order->addErrors($new_user->getErrorsByForm('login'), 'reg_login');\n                        }\n                    }\n                }\n\n                //Если заказ без регистрации пользователя\n                if ($this->order['user_type'] == 'noregister') {\n                   //Получим данные\n                   $this->order['user_fio']   = $this->request('user_fio', TYPE_STRING);\n                   $this->order['user_email'] = $this->request('user_email', TYPE_STRING);\n                   $this->order['user_phone'] = $this->request('user_phone', TYPE_STRING);\n\n                   //Проверим данные\n                   if (empty($this->order['user_fio'])){\n                       $this->order->addError(t('Укажите, пожалуйста, Ф.И.О.'), 'user_fio');\n                   }\n                   if (!filter_var($this->order['user_email'], FILTER_VALIDATE_EMAIL)){\n                       $this->order->addError(t('Укажите, пожалуйста, E-mail'), 'user_email');\n                   }\n                }\n\n                //Сохраняем дополнительные сведения\n                $uf_err = $order_fields_manager->check($this->order['userfields_arr']);\n                if (!$uf_err) {\n                    //Переносим ошибки в объект order\n                    foreach($order_fields_manager->getErrors() as $form=>$errortext) {\n                        $this->order->addError($errortext, $form);\n                    }\n                }\n\n                //Сохраняем адрес\n                if (!$this->order->hasError() && $this->order['use_addr'] == 0) {\n                    $address = new \\Shop\\Model\\Orm\\Address();\n                    $address->getFromArray($this->order->getValues(), 'addr_');\n                    $address['user_id'] = AppAuth::getCurrentUser()->id;\n                    if ($address->insert()) {\n                        $this->order['use_addr'] = $address['id'];\n                    }\n                }\n\n                //Все успешно\n                if (!$this->order->hasError()) {\n                    $this->order['user_id'] = AppAuth::getCurrentUser()->id;\n                    $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'delivery')));\n                }\n            } //!logout && !login\n\n\n        } //POST\n\n\n\n        $user = AppAuth::getCurrentUser();\n        if (AppAuth::isAuthorize()) {\n            //Получаем список адресов пользователя\n            $address_api = new \\Shop\\Model\\AddressApi();\n            $address_api->setFilter('user_id', $user['id']);\n            $address_api->setFilter('deleted', 0);\n            $addr_list = $address_api->getList();\n            if (count($addr_list)>0 && $this->order['use_addr'] === null) {\n                $this->order['use_addr'] = $addr_list[0]['id'];\n            }\n            $this->view->assign('address_list', $addr_list);\n        }\n\n        if ($logout) {\n            $this->order->clearErrors();\n        }\n\n        if ($login) { //Покажем только ошибки авторизации, остальные скроем\n            $login_err = $this->order->getErrorsByForm('login');\n            $this->order->clearErrors();\n            if (!empty($login_err)) $this->order->addErrors($login_err, 'login');\n        }\n\n        $this->order['password']     = '';\n        $this->order['reg_openpass'] = '';\n        $this->order['reg_pass2']    = '';\n\n        $this->view->assign(array(\n            'is_auth'         => AppAuth::isAuthorize(),\n            'order'           => $this->order,\n            'order_extra'     => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n            'user'            => $user,\n            'conf_userfields' => $order_fields_manager,\n            'reg_userfields'  => $reg_fields_manager,\n        ));\n\n        return $this->result->setTemplate( 'checkout/address.tpl' );\n    }\n\n    /**\n    * Шаг 2. Выбор доставки\n    */\n    function actionDelivery()\n    {\n        if ($this->getModuleConfig()->hide_delivery) { //Если нужно проскочить шаг доставка\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n        }\n\n        $this->app->title->addSection(t('Выбор доставки'));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'), $this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )))\n                    ->addBreadCrumb(t('Выбор доставки'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n        $my_type = $this->user['is_company'] ? 'company' : 'user';\n        $delivery_api = new \\Shop\\Model\\DeliveryApi();\n\n\n\n        //Получим все зоны\n        $zone_api = new \\Shop\\Model\\ZoneApi();\n        $zones    = $zone_api->getZonesByRegionId($this->order->getAddress()->region_id, $this->order->getAddress()->country_id);\n\n        $delivery_api->setFilter('public', 1);\n        $delivery_api->setFilter('user_type', array('all', $my_type), 'in');\n        $delivery_api->setZoneFilter($zones);\n\n        $cartdata = $this->order->getCart()->getCartData(false);\n        //Проверим условие минимальной цены\n        $delivery_api->setFilter(array(\n            array(\n                'min_price' => 0,\n                '|min_price:<=' => $cartdata['total'],\n            )\n        ));\n        //Проверим условие максимальной цены\n        $delivery_api->setFilter(array(\n            array(\n                'max_price' => 0,\n                '|max_price:>' => $cartdata['total'],\n            )\n        ));\n        //Проверим условие минимального количества товаров\n        $delivery_api->setFilter(array(\n            array(\n                'min_cnt' => 0,\n                '|min_cnt:<=' => $cartdata['items_count'],\n            )\n        ));\n        $delivery_list = $delivery_api->getList();\n\n        $this->view->assign(array(\n            'delivery_list' => $delivery_list\n        ));\n\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'delivery', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n\n            //Проверим параметры выбора доставки\n            $sysdata = array('step' => 'delivery');\n            $work_fields = $this->order->useFields($sysdata + $this->url->getSource(POST));\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n                $delivery       = $this->order->getDelivery(); //Выбранная доставка\n                $delivery_extra = $this->request('delivery_extra',TYPE_ARRAY,false);\n                if ($delivery_extra){\n                    $this->order->addExtraKeyPair('delivery_extra',$delivery_extra);\n                }\n                $warehouse_api = new \\Catalog\\Model\\WareHouseApi();\n                $warehouses    = $warehouse_api->setFilter('checkout_public', 1)->getList(); //Склады\n\n                if ($delivery['class'] == 'myself' && (count($warehouses)>1)){ //Если самовывоз и складов больше одного\n                   $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'warehouses')));\n                }else{\n                   $default_warehouse = $warehouse_api::getDefaultWareHouse();\n                   if (isset($default_warehouse['id']) && ($default_warehouse['id']>0)){\n                       $this->order['warehouse'] = $default_warehouse['id']; //Сбрасываем склад, для значения выбора склада по умолчанию\n                   }else{\n                       $this->order['warehouse'] = 0; //Сбрасываем склад, для значения выбора склада по умолчанию\n                   }\n\n                   $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n                }\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/delivery.tpl' );\n    }\n\n    /**\n    * Шаг 2.2 Страница выбора склада откуда забирать\n    * Используется только когда складов более одного\n    * и выбран способ доставки \"Самовывоз\"\n    *\n    */\n    function actionWarehouses()\n    {\n        $this->app->title->addSection(t('Выбор склада для забора товара'));\n\n        $warehouse_api = new \\Catalog\\Model\\WareHouseApi();\n        $warehouses    = $warehouse_api->setFilter('checkout_public', 1)->getList();\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )))\n                    ->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )))\n                    ->addBreadCrumb(t('Выбор склада'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() || (count($warehouses)<2)) $this->redirect();\n\n        $this->view->assign(array(\n            'warehouses_list' => $warehouses\n        ));\n\n\n        if ($this->url->isPost()){\n            $this->order_api->addOrderExtraDataByStep($this->order, 'warehouses', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'warehouses');\n            $work_fields = $this->order->useFields($sysdata + $this->url->getSource(POST));\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n               $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'payment')));\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/warehouse.tpl' );\n    }\n\n\n    /**\n    * Шаг 3. Выбор оплаты\n    */\n    function actionPayment()\n    {\n        $this->app->title->addSection(t('Выбор оплаты'));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )));\n        if (!$this->getModuleConfig()->hide_delivery) {\n                    $this->app->breadcrumbs->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )));\n        }\n        $this->app->breadcrumbs->addBreadCrumb(t('Выбор оплаты'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n        $my_type = $this->user['is_company'] ? 'company' : 'user';\n        $pay_api = new \\Shop\\Model\\PaymentApi();\n        $pay_api->setFilter('public', 1);\n        $pay_api->setFilter('user_type', array('all', $my_type), 'in');\n        $pay_api->setFilter('target', array('all', 'orders'), 'in');\n\n        $this->view->assign(array(\n            'pay_list' => $pay_api->getPaymentsList($this->order)\n        ));\n\n        //Найдём оплату по умолчанию, если оплата не была задана раннее\n        if (!$this->order['payment']){\n            $pay_api->setFilter('default_payment', 1);\n            $default_payment = $pay_api->getFirst($this->order);\n            if ($default_payment){\n                $this->order['payment'] = $default_payment['id'];\n            }\n        }\n\n        if ($this->getModuleConfig()->hide_payment) { //Если нужно проскочить шаг оплата\n            $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'confirm')));\n        }\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'pay', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n            $sysdata = array('step' => 'pay');\n            $work_fields = $this->order->useFields($sysdata + $_POST);\n            $this->order->setCheckFields($work_fields);\n            if ($this->order->checkData($sysdata, null, null, $work_fields)) {\n                $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'confirm')));\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/payment.tpl' );\n    }\n\n    /**\n    * Шаг 4. Подтверждение заказа\n    */\n    function actionConfirm()\n    {\n        $this->app->title->addSection(t('Подтверждение заказа'));\n\n        if ( $this->order['expired'] || !$this->order->getCart() ) $this->redirect();\n\n        $basket = $this->order->getCart();\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'),$this->router->getUrl('shop-front-cartpage'))\n                    ->addBreadCrumb(t('Адрес и контакты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'address'\n                    )));\n        if (!$this->getModuleConfig()->hide_delivery) {\n            $this->app->breadcrumbs->addBreadCrumb(t('Выбор доставки'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'delivery'\n                    )));\n        }\n        if (!$this->getModuleConfig()->hide_payment) {\n            $this->app->breadcrumbs->addBreadCrumb(t('Выбор оплаты'),$this->router->getUrl('shop-front-checkout',array(\n                        'Act' => 'payment'\n                    )));\n        }\n        $this->app->breadcrumbs->addBreadCrumb(t('Подтверждение заказа'));\n\n        $this->view->assign(array(\n            'cart' => $basket\n        ));\n\n        if ($this->url->isPost()) {\n            $this->order_api->addOrderExtraDataByStep($this->order, 'confirm', $this->url->request('order_extra', TYPE_ARRAY, array())); //Заносим дополнительные данные\n\n            $this->order->clearErrors();\n            if ($this->getModuleConfig()->require_license_agree && !$this->url->post('iagree', TYPE_INTEGER)) {\n                $this->order->addError(t('Подтвердите согласие с условиями предоставления услуг'));\n            }\n\n            $sysdata = array('step' => 'confirm');\n            $work_fields = $this->order->useFields($sysdata + $_POST);\n\n            $this->order->setCheckFields($work_fields);\n            if (!$this->order->hasError() && $this->order->checkData($sysdata, null, null, $work_fields)) {\n                $this->order['is_payed'] = 0;\n                $this->order['delivery_new_query'] = 1;\n                $this->order['payment_new_query'] = 1;\n\n                //Создаем заказ в БД\n                if ($this->order->insert()) {\n                    $this->order['expired'] = true; //заказ уже оформлен. больше нельзя возвращаться к шагам.\n                    \\Shop\\Model\\Cart::currentCart()->clean(); //Очищаем корзиу\n                    $this->redirect($this->router->getUrl('shop-front-checkout', array('Act' => 'finish')));\n                }\n            }\n        }\n\n        $this->view->assign(array(\n            'order_extra' => !empty($this->order['order_extra']) ? $this->order['order_extra'] : array(),\n        ));\n\n        return $this->result->setTemplate( 'checkout/confirm.tpl' );\n    }\n\n    /**\n    * Шаг 5. Создание заказа\n    */\n    function actionFinish()\n    {\n        $this->app->title->addSection(t('Заказ №%0 успешно оформлен',array($this->order->order_num)));\n\n        //Добавим хлебные крошки\n        $this->app->breadcrumbs\n                    ->addBreadCrumb(t('Корзина'))\n                    ->addBreadCrumb(t('Адрес и контакты'))\n                    ->addBreadCrumb(t('Выбор доставки'))\n                    ->addBreadCrumb(t('Выбор оплаты'))\n                    ->addBreadCrumb(t('Завершение заказа'));\n\n        $this->view->assign(array(\n            'cart' => $this->order->getCart(),\n            'alt' => 'alt',\n            'statuses' => \\Shop\\Model\\UserStatusApi::getStatusIdByType()\n        ));\n\n        return $this->result->setTemplate( 'checkout/finish.tpl' );\n    }\n\n    /**\n    * Выполняет пользовательский статический метод у типа оплаты или доставки,\n    * если таковой есть у типа доставки\n    */\n    function actionUserAct()\n    {\n        $module   = $this->request('module',TYPE_STRING, 'Shop'); //Имя модуля\n        $type_obj = $this->request('typeObj',TYPE_INTEGER,0);     //0 - доставка (DeliveryType), 1 - оплата (PaymentType)\n        $type_id  = $this->request('typeId',TYPE_INTEGER,0);      //id доставки или оплаты\n        $class    = $this->request('class',TYPE_STRING,false);    //Класс для обращения\n        $act      = $this->request('userAct',TYPE_STRING,false);  //Статический метод который нужно вызвать\n        $params   = $this->request('params',TYPE_ARRAY,array());  //Дополнительные параметры для передачи в метод\n\n        if ($module && $act && $class){\n           $typeobj = \"DeliveryType\";\n           if ($type_obj == 1){\n              $typeobj = \"PaymentType\";\n           }\n\n           $delivery = '\\\\'.$module.'\\Model\\\\'.$typeobj.'\\\\'.$class;\n           $data = $delivery::$act($this->order, $type_id, $params);\n\n           if (!$this->order->hasError()){\n              return $this->result->setSuccess(true)\n                     ->addSection('data',$data);\n           }else{\n              return $this->result->setSuccess(false)\n                    ->addEMessage($this->order->getErrorsStr());\n           }\n        }else{\n           return $this->result->setSuccess(false)\n                    ->addEMessage('Не установлен метод или объект доставки или оплаты');\n        }\n    }\n\n    /**\n    * Удаление адреса при оформлении заказа\n    */\n    function actionDeleteAddress()\n    {\n        $id = $this->url->request('id', TYPE_INTEGER, 0); //id адреса доставки\n        if ($id){\n           $address = new \\Shop\\Model\\Orm\\Address($id);\n           if ($address['user_id'] == $this->user['id']) {\n               $address['deleted'] = 1;\n               $address->update();\n               return $this->result->setSuccess(true);\n           }\n        }\n        return $this->result->setSuccess(false);\n    }\n}\n",
			"settings":
			{
				"buffer_size": 26416,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 295.0,
		"last_filter": "re",
		"selected_items":
		[
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"INS",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Add..."
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"prett",
				"HTMLPrettify: Set Prettify Preferences"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: List Unmanaged Packages"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"smart",
				"Set Syntax: Smarty"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 363.0
	},
	"console":
	{
		"height": 269.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/den/Документы/identifyx_remote"
	],
	"file_history":
	[
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/stub.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/spsr.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/cdek.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/ems.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/abstracttype.my.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/abstracttype.inc.php",
		"/home/den/Документы/test_yo_wish/index.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/data.grid.js",
		"/home/den/projects/rsnoshop.local/public/info.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/shop/blocks/cart/cart.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/robots.txt",
		"/home/den/.config/sublime-text-3/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/catalog/product.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/wrapper.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/js/common.js",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/js/theme.js",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/.editorconfig",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/core/rs/orm/abstractobject.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/shop/show_complekts.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/shop/checkout/finish.tpl",
		"/home/den/.config/sublime-text-3/Packages/CSScomb/CSScomb.sublime-settings",
		"/home/den/.config/sublime-text-3/Packages/User/Git.sublime-settings",
		"/home/den/.config/sublime-text-3/Packages/Git/Git.sublime-settings",
		"/home/den/.config/sublime-text-3/Packages/CSScomb/README.md",
		"/home/den/.config/sublime-text-3/Packages/HTML-CSS-JS Prettify/HTMLPrettify.sublime-settings",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/catalog/product_card.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/catalog/list_products.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/css/style-j.css",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/shop/show_complekts.tpl.bak",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/css/style.css",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/identifyx.class.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/catalog/oneclick.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/js/jquery.changeoffer.js",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/controller/front/checkout.inc.php",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/imldelivery/view/delivery/iml/widget.tpl",
		"/home/den/Документы/identifyx_remote/sftp-config.json",
		"/home/den/Документы/test_yo_wish/sftp-config.json",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/moduleview/shop/checkout/confirm.tpl",
		"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/fashion/resource/js/jquery.changeoffer.js",
		"/home/den/projects/MODX.today/_deployment/set_site_version.php",
		"/home/den/Документы/test_yo_wish/manager/assets/modext/widgets/security/modx.grid.message.js",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/schema/identifyx.mysql.schema.xml",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/likes.grid.js",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/ips.grid.js",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/lexicon/ru/default.inc.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/misc/combo.js",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/misc/utils.js",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/user/getlist.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/data/getlist.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/likes/getlist.class.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/home.panel.js",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/controllers/home.class.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/identifyx.js",
		"/home/den/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/ips.windows.js",
		"/home/den/Документы/test_yo_wish/core/model/modx/processors/security/user/deactivatemultiple.class.php",
		"/home/den/projects/logs/iport_identifyx_log",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql/idfxresource.class.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/css/mgr/main.css",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/css/mgr/bootstrap.buttons.css",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/data.windows.js",
		"/home/den/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/den/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/likes.windows.js",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr/widgets/items.windows.js",
		"/home/den/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/ip/getlist.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/user/unblock.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/mgr/user/block.class.php",
		"/home/den/Документы/test_yo_wish/core/components/mycomponentmigxui/model/mycomponentmigxui/mysql/mcuiconfig.map.inc.php",
		"/home/den/Документы/test_yo_wish/assets/components/dbadmin/js/mgr/widgets/tables.grid.js",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/web/data/getlist.class.php",
		"/home/den/Документы/test_yo_wish/core/model/modx/modprocessor.class.php",
		"/home/den/Документы/test_yo_wish/core/components/dbadmin/processors/mgr/table/getdata.class.php",
		"/home/den/Документы/identifyx_remote/_build/build.transport.php",
		"/home/den/Документы/test_yo_wish/core/model/modx/transport/modtransportpackage.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/index.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/elements/snippets/snippet.identifyx.php",
		"/home/den/Документы/identifyx_remote/_build/resolvers/resolve.tables.php",
		"/home/den/Документы/test_yo_wish/core/model/modx/modx.class.php",
		"/home/den/Документы/test_yo_wish/core/xpdo/xpdo.class.php",
		"/home/den/Документы/test_yo_wish/core/xpdo/transport/xpdofilevehicle.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/metadata.mysql.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql/idfxresource.map.inc.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql/idfxuserpic.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql/idfxuserpic.map.inc.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql/idfxuser.class.php",
		"/home/den/Документы/test_yo_wish/core/lexicon/ru/workspace.inc.php",
		"/home/den/Документы/identifyx_remote/_build/build.config.php",
		"/home/den/Документы/identifyx_remote/_build/data/transport.snippets.php",
		"/home/den/Документы/identifyx_remote/_build/data/transport.menu.php",
		"/home/den/Документы/test_yo_wish/core/model/modx/transport/modpackagebuilder.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/web/user/unblock.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/web/data/update.class.php",
		"/home/den/Документы/identifyx_remote/core/components/identifyx/processors/web/data/remove.class.php",
		"/home/den/Документы/identifyx_remote/assets/components/identifyx/connector.php",
		"/home/den/Документы/identifyx_remote/_build/data/transport.chunks.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/identifyx.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/ip/create.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/user/block.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/user/unblock.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/user/get.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/ip/update.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/ip/get.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/likes/getlist.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/schema/identifyx.mysql.schema.xml",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx.bak/idfxuserdata.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/idfxuserdata.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/data/getlist.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/data/remove.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/data/update.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/data/get.class.php",
		"/home/den/Документы/test_yo_wish/core/xpdo/om/xpdoobject.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/data/create.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/ip/getlist.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/ip/remove.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/processors/mgr/likes/create.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/idfxresource.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/idfxuser.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/idfxdata.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/extuser.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/mysql/idfxips.map.inc.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/mysql/idfxlikes.map.inc.php",
		"/home/den/Документы/identifyx/core/components/identifyx/controllers/home.class.php",
		"/home/den/Документы/identifyx/core/components/identifyx/elements/snippets/snippet.identifyx.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/metadata.mysql.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/mysql/extuser.map.inc.php",
		"/home/den/Документы/identifyx/core/components/identifyx/model/identifyx/mysql/idfxdata.class.php"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 77.0,
		"where_history":
		[
			"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/js",
			"/var/www/rsnoshop.local",
			"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote/assets/components/identifyx/js/mgr",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/identifyx_remote/_build",
			"/home/den/Документы/identifyx_remote/core/components/identifyx/model/identifyx/mysql",
			"/home/den/Документы/identifyx_remote",
			"/home/den/Документы/identifyx_remote/_build",
			"/home/den/Документы/identifyx",
			"/home/den/Документы/identifyx/assets/components/identifyx/js/mgr",
			"/home/den/Документы/test_yo_wish",
			"/home/den/projects/Office",
			"/home/den/projects/identifyx",
			"/home/den/projects/identifyx.bak/identifyx",
			"/home/den/projects/identifyx",
			"/home/den/projects/Office",
			"/home/den/projects/identifyx",
			"/home/den/Загрузки/identifyx",
			"/home/den/Загрузки/identifyx,*.js",
			"/home/den/Загрузки/identifyx",
			"/home/den/Документы/test_yo_wish",
			"/home/den/Загрузки/identifyx",
			"/home/den/Документы/test_yo_wish/core/model/modx",
			"/home/den/Загрузки/identifyx",
			"/media/den/9E5AF0115AEFE44D/Projects",
			"/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getDeliveryCost",
			"order_cart",
			"createImlOrder",
			"	\n",
			"$this",
			"cartTotalItems",
			"floatCartAmount",
			"\\",
			"\\n",
			"data-compl",
			"1364",
			"found",
			"propTitle",
			"multiOffersInfo",
			"offerBarcode",
			"offer",
			"createMessage",
			"modx-window-message-create",
			"security/message/create",
			"message",
			"row",
			"identifyx_err_fp_blocked",
			"numbercolumn",
			"#",
			".",
			"format:",
			"/*!",
			"-2x",
			"3",
			"5x",
			"numbercolumn",
			"header",
			");\n",
			"identifyx-combo-user",
			"getFp",
			"identifyx_ips_ip",
			"idfxUserLikes.",
			"User",
			"identifyx-likes-window-create",
			"grid.Data",
			"Data",
			"identifyx-grid-data",
			"updateData",
			"inner",
			"fprint_id",
			"onClick",
			"getMenu",
			"$params['user_id']",
			"addLike",
			"$fp",
			"$params['fp']",
			"user",
			"like",
			"ip_obj",
			"fp_obj",
			"				$",
			"res",
			"=>",
			"set",
			"set('createdon'",
			"'createdon'",
			"'createdon' =>",
			"idfxUserData",
			"User",
			"selected",
			"cons",
			"handler",
			"renderActions",
			"renderBoolean",
			"idfxUserDeactivateMultipleProcessor",
			"BlockProcessor",
			"modUserDeactivateMultipleProcessor",
			"Profile",
			"User.fullname",
			"Profile",
			"GetListProcessor",
			"modUser",
			"idfxUserDataGetListProcessor",
			"idfxOfficeDataGetListProcessor",
			"_getSelectedUserIds",
			"BUTTON",
			"onClick",
			"getMenu",
			"IdentifyX",
			"IdentifiX",
			"setPackageMeta",
			"Could not load package metadata for package",
			"install",
			"meta",
			"Could not load package metadata for package",
			"loadClass",
			"Could not load class:",
			"save",
			"savr",
			"package_installing",
			"Рабочее пространство загружено, сейчас устанавливаем пакет...",
			"identifyx",
			"metadata",
			"Could not load",
			"Could not load class",
			"identifyx",
			"office",
			"table=\"",
			"User",
			"idfxUserData",
			"idfxUserLike",
			"User",
			"user",
			"userData",
			"idfxIps",
			"extends",
			"ext",
			"objectType",
			"idfxUser",
			"idfxIps",
			"userLike",
			"ext",
			"extResource",
			"idfxResource",
			"extUser",
			"userLikes",
			"userIps",
			"userPic",
			"userData",
			"save",
			"xPDOSimpleObject",
			"user_id",
			"newsletter"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"userData",
			"IdentifyXUserData",
			"IdentifyXManagerController",
			"IdentifyX.",
			"identifyx-data",
			"identifyx-grid-data",
			"i7igUka7uR"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/templates/autofashion/resource/css/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63071,
						"regions":
						{
						},
						"selection":
						[
							[
								58283,
								58283
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 50009.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/imldelivery/model/deliverytype/iml.inc.php.bak",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31575,
						"regions":
						{
						},
						"selection":
						[
							[
								29632,
								29632
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/imldelivery/model/deliverytype/iml.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31575,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/deliverytype/abstracttype.my.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6667,
						"regions":
						{
						},
						"selection":
						[
							[
								424,
								424
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": ".fuse_hidden00000c7a00000001",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 8548,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/controller/front/checkout.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26305,
						"regions":
						{
						},
						"selection":
						[
							[
								22738,
								22738
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 8825.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/modules/shop/model/orm/order.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43230,
						"regions":
						{
						},
						"selection":
						[
							[
								43163,
								43163
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/core/rs/orm/ormobject.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3504,
						"regions":
						{
						},
						"selection":
						[
							[
								197,
								197
							]
						],
						"settings":
						{
							"incomplete_sync": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/media/den/9E5AF0115AEFE44D/Projects/ReadyScript_AJ/core/rs/orm/abstractobject.inc.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47336,
						"regions":
						{
						},
						"selection":
						[
							[
								4897,
								4897
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6426.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "show_complekts.tpl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8548,
						"regions":
						{
						},
						"selection":
						[
							[
								1887,
								1887
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": true,
							"syntax": "Packages/Smarty/Syntaxes/Smarty.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2125.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 324,
						"regions":
						{
						},
						"selection":
						[
							[
								9,
								9
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26416,
						"regions":
						{
						},
						"selection":
						[
							[
								26416,
								26416
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 282.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 114.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 217.0
	},
	"output.sftp":
	{
		"height": 114.0
	},
	"pinned_build_system": "",
	"project": "identifyx.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 177.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
